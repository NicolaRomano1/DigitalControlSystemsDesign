
MPC_direct_coding.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a1b0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000620  0800a350  0800a350  0001a350  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a970  0800a970  0002199c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a970  0800a970  0001a970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a978  0800a978  0002199c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a978  0800a978  0001a978  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a97c  0800a97c  0001a97c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000199c  20000000  0800a980  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000bdc  200019a0  0800c31c  000219a0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000257c  0800c31c  0002257c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002199c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011a7f  00000000  00000000  000219cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002950  00000000  00000000  0003344b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fc0  00000000  00000000  00035da0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e70  00000000  00000000  00036d60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017d89  00000000  00000000  00037bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011557  00000000  00000000  0004f959  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000914fa  00000000  00000000  00060eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f23aa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000534c  00000000  00000000  000f23fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200019a0 	.word	0x200019a0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a338 	.word	0x0800a338

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200019a4 	.word	0x200019a4
 80001dc:	0800a338 	.word	0x0800a338

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_ldivmod>:
 8000bf8:	b97b      	cbnz	r3, 8000c1a <__aeabi_ldivmod+0x22>
 8000bfa:	b972      	cbnz	r2, 8000c1a <__aeabi_ldivmod+0x22>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bfbe      	ittt	lt
 8000c00:	2000      	movlt	r0, #0
 8000c02:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c06:	e006      	blt.n	8000c16 <__aeabi_ldivmod+0x1e>
 8000c08:	bf08      	it	eq
 8000c0a:	2800      	cmpeq	r0, #0
 8000c0c:	bf1c      	itt	ne
 8000c0e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c12:	f04f 30ff 	movne.w	r0, #4294967295
 8000c16:	f000 b9bf 	b.w	8000f98 <__aeabi_idiv0>
 8000c1a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c1e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c22:	2900      	cmp	r1, #0
 8000c24:	db09      	blt.n	8000c3a <__aeabi_ldivmod+0x42>
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	db1a      	blt.n	8000c60 <__aeabi_ldivmod+0x68>
 8000c2a:	f000 f84d 	bl	8000cc8 <__udivmoddi4>
 8000c2e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c32:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c36:	b004      	add	sp, #16
 8000c38:	4770      	bx	lr
 8000c3a:	4240      	negs	r0, r0
 8000c3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	db1b      	blt.n	8000c7c <__aeabi_ldivmod+0x84>
 8000c44:	f000 f840 	bl	8000cc8 <__udivmoddi4>
 8000c48:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c50:	b004      	add	sp, #16
 8000c52:	4240      	negs	r0, r0
 8000c54:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c58:	4252      	negs	r2, r2
 8000c5a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c5e:	4770      	bx	lr
 8000c60:	4252      	negs	r2, r2
 8000c62:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c66:	f000 f82f 	bl	8000cc8 <__udivmoddi4>
 8000c6a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c6e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c72:	b004      	add	sp, #16
 8000c74:	4240      	negs	r0, r0
 8000c76:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7a:	4770      	bx	lr
 8000c7c:	4252      	negs	r2, r2
 8000c7e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c82:	f000 f821 	bl	8000cc8 <__udivmoddi4>
 8000c86:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c8e:	b004      	add	sp, #16
 8000c90:	4252      	negs	r2, r2
 8000c92:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c96:	4770      	bx	lr

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b974 	b.w	8000f98 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468e      	mov	lr, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14d      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4694      	mov	ip, r2
 8000cda:	d969      	bls.n	8000db0 <__udivmoddi4+0xe8>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b152      	cbz	r2, 8000cf8 <__udivmoddi4+0x30>
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	f1c2 0120 	rsb	r1, r2, #32
 8000cea:	fa20 f101 	lsr.w	r1, r0, r1
 8000cee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cf6:	4094      	lsls	r4, r2
 8000cf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cfc:	0c21      	lsrs	r1, r4, #16
 8000cfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000d02:	fa1f f78c 	uxth.w	r7, ip
 8000d06:	fb08 e316 	mls	r3, r8, r6, lr
 8000d0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d0e:	fb06 f107 	mul.w	r1, r6, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1e:	f080 811f 	bcs.w	8000f60 <__udivmoddi4+0x298>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 811c 	bls.w	8000f60 <__udivmoddi4+0x298>
 8000d28:	3e02      	subs	r6, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d34:	fb08 3310 	mls	r3, r8, r0, r3
 8000d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d3c:	fb00 f707 	mul.w	r7, r0, r7
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x92>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4c:	f080 810a 	bcs.w	8000f64 <__udivmoddi4+0x29c>
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	f240 8107 	bls.w	8000f64 <__udivmoddi4+0x29c>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5e:	1be4      	subs	r4, r4, r7
 8000d60:	2600      	movs	r6, #0
 8000d62:	b11d      	cbz	r5, 8000d6c <__udivmoddi4+0xa4>
 8000d64:	40d4      	lsrs	r4, r2
 8000d66:	2300      	movs	r3, #0
 8000d68:	e9c5 4300 	strd	r4, r3, [r5]
 8000d6c:	4631      	mov	r1, r6
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0xc2>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	f000 80ef 	beq.w	8000f5a <__udivmoddi4+0x292>
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d82:	4630      	mov	r0, r6
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f683 	clz	r6, r3
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	d14a      	bne.n	8000e28 <__udivmoddi4+0x160>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xd4>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80f9 	bhi.w	8000f8e <__udivmoddi4+0x2c6>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	469e      	mov	lr, r3
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0e0      	beq.n	8000d6c <__udivmoddi4+0xa4>
 8000daa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dae:	e7dd      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000db0:	b902      	cbnz	r2, 8000db4 <__udivmoddi4+0xec>
 8000db2:	deff      	udf	#255	; 0xff
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	f040 8092 	bne.w	8000ee2 <__udivmoddi4+0x21a>
 8000dbe:	eba1 010c 	sub.w	r1, r1, ip
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f fe8c 	uxth.w	lr, ip
 8000dca:	2601      	movs	r6, #1
 8000dcc:	0c20      	lsrs	r0, r4, #16
 8000dce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dda:	fb0e f003 	mul.w	r0, lr, r3
 8000dde:	4288      	cmp	r0, r1
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x12c>
 8000de2:	eb1c 0101 	adds.w	r1, ip, r1
 8000de6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x12a>
 8000dec:	4288      	cmp	r0, r1
 8000dee:	f200 80cb 	bhi.w	8000f88 <__udivmoddi4+0x2c0>
 8000df2:	4643      	mov	r3, r8
 8000df4:	1a09      	subs	r1, r1, r0
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000e00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e04:	fb0e fe00 	mul.w	lr, lr, r0
 8000e08:	45a6      	cmp	lr, r4
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x156>
 8000e0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e14:	d202      	bcs.n	8000e1c <__udivmoddi4+0x154>
 8000e16:	45a6      	cmp	lr, r4
 8000e18:	f200 80bb 	bhi.w	8000f92 <__udivmoddi4+0x2ca>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	eba4 040e 	sub.w	r4, r4, lr
 8000e22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e26:	e79c      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000e28:	f1c6 0720 	rsb	r7, r6, #32
 8000e2c:	40b3      	lsls	r3, r6
 8000e2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e36:	fa20 f407 	lsr.w	r4, r0, r7
 8000e3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	40f9      	lsrs	r1, r7
 8000e42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e46:	fa00 f306 	lsl.w	r3, r0, r6
 8000e4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e4e:	0c20      	lsrs	r0, r4, #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fb09 1118 	mls	r1, r9, r8, r1
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e60:	4288      	cmp	r0, r1
 8000e62:	fa02 f206 	lsl.w	r2, r2, r6
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x1b8>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e70:	f080 8088 	bcs.w	8000f84 <__udivmoddi4+0x2bc>
 8000e74:	4288      	cmp	r0, r1
 8000e76:	f240 8085 	bls.w	8000f84 <__udivmoddi4+0x2bc>
 8000e7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e88:	fb09 1110 	mls	r1, r9, r0, r1
 8000e8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e94:	458e      	cmp	lr, r1
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x1e2>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea0:	d26c      	bcs.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea2:	458e      	cmp	lr, r1
 8000ea4:	d96a      	bls.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4461      	add	r1, ip
 8000eaa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eae:	fba0 9402 	umull	r9, r4, r0, r2
 8000eb2:	eba1 010e 	sub.w	r1, r1, lr
 8000eb6:	42a1      	cmp	r1, r4
 8000eb8:	46c8      	mov	r8, r9
 8000eba:	46a6      	mov	lr, r4
 8000ebc:	d356      	bcc.n	8000f6c <__udivmoddi4+0x2a4>
 8000ebe:	d053      	beq.n	8000f68 <__udivmoddi4+0x2a0>
 8000ec0:	b15d      	cbz	r5, 8000eda <__udivmoddi4+0x212>
 8000ec2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ec6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eca:	fa01 f707 	lsl.w	r7, r1, r7
 8000ece:	fa22 f306 	lsr.w	r3, r2, r6
 8000ed2:	40f1      	lsrs	r1, r6
 8000ed4:	431f      	orrs	r7, r3
 8000ed6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eda:	2600      	movs	r6, #0
 8000edc:	4631      	mov	r1, r6
 8000ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee2:	f1c2 0320 	rsb	r3, r2, #32
 8000ee6:	40d8      	lsrs	r0, r3
 8000ee8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eec:	fa21 f303 	lsr.w	r3, r1, r3
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	4301      	orrs	r1, r0
 8000ef4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef8:	fa1f fe8c 	uxth.w	lr, ip
 8000efc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f00:	fb07 3610 	mls	r6, r7, r0, r3
 8000f04:	0c0b      	lsrs	r3, r1, #16
 8000f06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f0e:	429e      	cmp	r6, r3
 8000f10:	fa04 f402 	lsl.w	r4, r4, r2
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x260>
 8000f16:	eb1c 0303 	adds.w	r3, ip, r3
 8000f1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f1e:	d22f      	bcs.n	8000f80 <__udivmoddi4+0x2b8>
 8000f20:	429e      	cmp	r6, r3
 8000f22:	d92d      	bls.n	8000f80 <__udivmoddi4+0x2b8>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4463      	add	r3, ip
 8000f28:	1b9b      	subs	r3, r3, r6
 8000f2a:	b289      	uxth	r1, r1
 8000f2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f30:	fb07 3316 	mls	r3, r7, r6, r3
 8000f34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f38:	fb06 f30e 	mul.w	r3, r6, lr
 8000f3c:	428b      	cmp	r3, r1
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x28a>
 8000f40:	eb1c 0101 	adds.w	r1, ip, r1
 8000f44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f48:	d216      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d914      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4e:	3e02      	subs	r6, #2
 8000f50:	4461      	add	r1, ip
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f58:	e738      	b.n	8000dcc <__udivmoddi4+0x104>
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e705      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e3      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6f8      	b.n	8000d5a <__udivmoddi4+0x92>
 8000f68:	454b      	cmp	r3, r9
 8000f6a:	d2a9      	bcs.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7a3      	b.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f78:	4646      	mov	r6, r8
 8000f7a:	e7ea      	b.n	8000f52 <__udivmoddi4+0x28a>
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	e794      	b.n	8000eaa <__udivmoddi4+0x1e2>
 8000f80:	4640      	mov	r0, r8
 8000f82:	e7d1      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f84:	46d0      	mov	r8, sl
 8000f86:	e77b      	b.n	8000e80 <__udivmoddi4+0x1b8>
 8000f88:	3b02      	subs	r3, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	e732      	b.n	8000df4 <__udivmoddi4+0x12c>
 8000f8e:	4630      	mov	r0, r6
 8000f90:	e709      	b.n	8000da6 <__udivmoddi4+0xde>
 8000f92:	4464      	add	r4, ip
 8000f94:	3802      	subs	r0, #2
 8000f96:	e742      	b.n	8000e1e <__udivmoddi4+0x156>

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//overwrite of printf to write on USART
int _write(int file, char *data, int len) {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b086      	sub	sp, #24
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	60f8      	str	r0, [r7, #12]
 8000fa4:	60b9      	str	r1, [r7, #8]
 8000fa6:	607a      	str	r2, [r7, #4]
	if ((file != STDOUT_FILENO) && (file != STDERR_FILENO)) {
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	d00a      	beq.n	8000fc4 <_write+0x28>
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	2b02      	cmp	r3, #2
 8000fb2:	d007      	beq.n	8000fc4 <_write+0x28>
		errno = EBADF;
 8000fb4:	f006 fbf8 	bl	80077a8 <__errno>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2209      	movs	r2, #9
 8000fbc:	601a      	str	r2, [r3, #0]
		return -1;
 8000fbe:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc2:	e00f      	b.n	8000fe4 <_write+0x48>
	}

	// arbitrary timeout 1000
	HAL_StatusTypeDef status = HAL_UART_Transmit(&huart2, (uint8_t*) data, len,
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	b29a      	uxth	r2, r3
 8000fc8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fcc:	68b9      	ldr	r1, [r7, #8]
 8000fce:	4807      	ldr	r0, [pc, #28]	; (8000fec <_write+0x50>)
 8000fd0:	f006 f857 	bl	8007082 <HAL_UART_Transmit>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	75fb      	strb	r3, [r7, #23]
			1000);

	// return # of bytes written - as best we can tell
	return (status == HAL_OK ? len : 0);
 8000fd8:	7dfb      	ldrb	r3, [r7, #23]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d101      	bne.n	8000fe2 <_write+0x46>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	e000      	b.n	8000fe4 <_write+0x48>
 8000fe2:	2300      	movs	r3, #0
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3718      	adds	r7, #24
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	20001a4c 	.word	0x20001a4c

08000ff0 <update_ypast>:

// upddate ypast matrix
void update_ypast(double val){
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	ed87 0b00 	vstr	d0, [r7]
    ypast[2][0] = ypast[1][0];
 8000ffa:	4b0b      	ldr	r3, [pc, #44]	; (8001028 <update_ypast+0x38>)
 8000ffc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001000:	4909      	ldr	r1, [pc, #36]	; (8001028 <update_ypast+0x38>)
 8001002:	e9c1 2304 	strd	r2, r3, [r1, #16]
    ypast[1][0] = ypast[0][0];
 8001006:	4b08      	ldr	r3, [pc, #32]	; (8001028 <update_ypast+0x38>)
 8001008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800100c:	4906      	ldr	r1, [pc, #24]	; (8001028 <update_ypast+0x38>)
 800100e:	e9c1 2302 	strd	r2, r3, [r1, #8]
    ypast[0][0] = val;
 8001012:	4905      	ldr	r1, [pc, #20]	; (8001028 <update_ypast+0x38>)
 8001014:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001018:	e9c1 2300 	strd	r2, r3, [r1]
}
 800101c:	bf00      	nop
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	20001a98 	.word	0x20001a98

0800102c <setPulseFromDutyValue>:

// set PWM
void setPulseFromDutyValue(double dutyVal) {
 800102c:	b5b0      	push	{r4, r5, r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	ed87 0b00 	vstr	d0, [r7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET); // enable the motor driver
 8001036:	2201      	movs	r2, #1
 8001038:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800103c:	4877      	ldr	r0, [pc, #476]	; (800121c <setPulseFromDutyValue+0x1f0>)
 800103e:	f004 fc43 	bl	80058c8 <HAL_GPIO_WritePin>

	uint16_t channelToModulate;
	uint16_t channelToStop;

	if (dutyVal > 0) {
 8001042:	f04f 0200 	mov.w	r2, #0
 8001046:	f04f 0300 	mov.w	r3, #0
 800104a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800104e:	f7ff fd6b 	bl	8000b28 <__aeabi_dcmpgt>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d004      	beq.n	8001062 <setPulseFromDutyValue+0x36>
		channelToModulate = TIM_CHANNEL_1;
 8001058:	2300      	movs	r3, #0
 800105a:	81fb      	strh	r3, [r7, #14]
		channelToStop = TIM_CHANNEL_2;
 800105c:	2304      	movs	r3, #4
 800105e:	81bb      	strh	r3, [r7, #12]
 8001060:	e003      	b.n	800106a <setPulseFromDutyValue+0x3e>
	} else {
		channelToModulate = TIM_CHANNEL_2;
 8001062:	2304      	movs	r3, #4
 8001064:	81fb      	strh	r3, [r7, #14]
		channelToStop = TIM_CHANNEL_1;
 8001066:	2300      	movs	r3, #0
 8001068:	81bb      	strh	r3, [r7, #12]
	}
	__HAL_TIM_SET_COMPARE(&htim3, channelToStop, 0);
 800106a:	89bb      	ldrh	r3, [r7, #12]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d104      	bne.n	800107a <setPulseFromDutyValue+0x4e>
 8001070:	4b6b      	ldr	r3, [pc, #428]	; (8001220 <setPulseFromDutyValue+0x1f4>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	2200      	movs	r2, #0
 8001076:	635a      	str	r2, [r3, #52]	; 0x34
 8001078:	e013      	b.n	80010a2 <setPulseFromDutyValue+0x76>
 800107a:	89bb      	ldrh	r3, [r7, #12]
 800107c:	2b04      	cmp	r3, #4
 800107e:	d104      	bne.n	800108a <setPulseFromDutyValue+0x5e>
 8001080:	4b67      	ldr	r3, [pc, #412]	; (8001220 <setPulseFromDutyValue+0x1f4>)
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	2300      	movs	r3, #0
 8001086:	6393      	str	r3, [r2, #56]	; 0x38
 8001088:	e00b      	b.n	80010a2 <setPulseFromDutyValue+0x76>
 800108a:	89bb      	ldrh	r3, [r7, #12]
 800108c:	2b08      	cmp	r3, #8
 800108e:	d104      	bne.n	800109a <setPulseFromDutyValue+0x6e>
 8001090:	4b63      	ldr	r3, [pc, #396]	; (8001220 <setPulseFromDutyValue+0x1f4>)
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	2300      	movs	r3, #0
 8001096:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001098:	e003      	b.n	80010a2 <setPulseFromDutyValue+0x76>
 800109a:	4b61      	ldr	r3, [pc, #388]	; (8001220 <setPulseFromDutyValue+0x1f4>)
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	2300      	movs	r3, #0
 80010a0:	6413      	str	r3, [r2, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(&htim3, channelToModulate, (abs(dutyVal) * ((double )htim3.Init.Period)) / 100); //cast integer value to double to correctly perform division between decimal numbers
 80010a2:	89fb      	ldrh	r3, [r7, #14]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d12b      	bne.n	8001100 <setPulseFromDutyValue+0xd4>
 80010a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80010ac:	f7ff fd5c 	bl	8000b68 <__aeabi_d2iz>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	bfb8      	it	lt
 80010b6:	425b      	neglt	r3, r3
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff fa3b 	bl	8000534 <__aeabi_i2d>
 80010be:	4604      	mov	r4, r0
 80010c0:	460d      	mov	r5, r1
 80010c2:	4b57      	ldr	r3, [pc, #348]	; (8001220 <setPulseFromDutyValue+0x1f4>)
 80010c4:	68db      	ldr	r3, [r3, #12]
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff fa24 	bl	8000514 <__aeabi_ui2d>
 80010cc:	4602      	mov	r2, r0
 80010ce:	460b      	mov	r3, r1
 80010d0:	4620      	mov	r0, r4
 80010d2:	4629      	mov	r1, r5
 80010d4:	f7ff fa98 	bl	8000608 <__aeabi_dmul>
 80010d8:	4602      	mov	r2, r0
 80010da:	460b      	mov	r3, r1
 80010dc:	4610      	mov	r0, r2
 80010de:	4619      	mov	r1, r3
 80010e0:	f04f 0200 	mov.w	r2, #0
 80010e4:	4b4f      	ldr	r3, [pc, #316]	; (8001224 <setPulseFromDutyValue+0x1f8>)
 80010e6:	f7ff fbb9 	bl	800085c <__aeabi_ddiv>
 80010ea:	4602      	mov	r2, r0
 80010ec:	460b      	mov	r3, r1
 80010ee:	494c      	ldr	r1, [pc, #304]	; (8001220 <setPulseFromDutyValue+0x1f4>)
 80010f0:	680c      	ldr	r4, [r1, #0]
 80010f2:	4610      	mov	r0, r2
 80010f4:	4619      	mov	r1, r3
 80010f6:	f7ff fd5f 	bl	8000bb8 <__aeabi_d2uiz>
 80010fa:	4603      	mov	r3, r0
 80010fc:	6363      	str	r3, [r4, #52]	; 0x34
}
 80010fe:	e088      	b.n	8001212 <setPulseFromDutyValue+0x1e6>
	__HAL_TIM_SET_COMPARE(&htim3, channelToModulate, (abs(dutyVal) * ((double )htim3.Init.Period)) / 100); //cast integer value to double to correctly perform division between decimal numbers
 8001100:	89fb      	ldrh	r3, [r7, #14]
 8001102:	2b04      	cmp	r3, #4
 8001104:	d12b      	bne.n	800115e <setPulseFromDutyValue+0x132>
 8001106:	e9d7 0100 	ldrd	r0, r1, [r7]
 800110a:	f7ff fd2d 	bl	8000b68 <__aeabi_d2iz>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	bfb8      	it	lt
 8001114:	425b      	neglt	r3, r3
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff fa0c 	bl	8000534 <__aeabi_i2d>
 800111c:	4604      	mov	r4, r0
 800111e:	460d      	mov	r5, r1
 8001120:	4b3f      	ldr	r3, [pc, #252]	; (8001220 <setPulseFromDutyValue+0x1f4>)
 8001122:	68db      	ldr	r3, [r3, #12]
 8001124:	4618      	mov	r0, r3
 8001126:	f7ff f9f5 	bl	8000514 <__aeabi_ui2d>
 800112a:	4602      	mov	r2, r0
 800112c:	460b      	mov	r3, r1
 800112e:	4620      	mov	r0, r4
 8001130:	4629      	mov	r1, r5
 8001132:	f7ff fa69 	bl	8000608 <__aeabi_dmul>
 8001136:	4602      	mov	r2, r0
 8001138:	460b      	mov	r3, r1
 800113a:	4610      	mov	r0, r2
 800113c:	4619      	mov	r1, r3
 800113e:	f04f 0200 	mov.w	r2, #0
 8001142:	4b38      	ldr	r3, [pc, #224]	; (8001224 <setPulseFromDutyValue+0x1f8>)
 8001144:	f7ff fb8a 	bl	800085c <__aeabi_ddiv>
 8001148:	4602      	mov	r2, r0
 800114a:	460b      	mov	r3, r1
 800114c:	4934      	ldr	r1, [pc, #208]	; (8001220 <setPulseFromDutyValue+0x1f4>)
 800114e:	680c      	ldr	r4, [r1, #0]
 8001150:	4610      	mov	r0, r2
 8001152:	4619      	mov	r1, r3
 8001154:	f7ff fd30 	bl	8000bb8 <__aeabi_d2uiz>
 8001158:	4603      	mov	r3, r0
 800115a:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800115c:	e059      	b.n	8001212 <setPulseFromDutyValue+0x1e6>
	__HAL_TIM_SET_COMPARE(&htim3, channelToModulate, (abs(dutyVal) * ((double )htim3.Init.Period)) / 100); //cast integer value to double to correctly perform division between decimal numbers
 800115e:	89fb      	ldrh	r3, [r7, #14]
 8001160:	2b08      	cmp	r3, #8
 8001162:	d12b      	bne.n	80011bc <setPulseFromDutyValue+0x190>
 8001164:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001168:	f7ff fcfe 	bl	8000b68 <__aeabi_d2iz>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	bfb8      	it	lt
 8001172:	425b      	neglt	r3, r3
 8001174:	4618      	mov	r0, r3
 8001176:	f7ff f9dd 	bl	8000534 <__aeabi_i2d>
 800117a:	4604      	mov	r4, r0
 800117c:	460d      	mov	r5, r1
 800117e:	4b28      	ldr	r3, [pc, #160]	; (8001220 <setPulseFromDutyValue+0x1f4>)
 8001180:	68db      	ldr	r3, [r3, #12]
 8001182:	4618      	mov	r0, r3
 8001184:	f7ff f9c6 	bl	8000514 <__aeabi_ui2d>
 8001188:	4602      	mov	r2, r0
 800118a:	460b      	mov	r3, r1
 800118c:	4620      	mov	r0, r4
 800118e:	4629      	mov	r1, r5
 8001190:	f7ff fa3a 	bl	8000608 <__aeabi_dmul>
 8001194:	4602      	mov	r2, r0
 8001196:	460b      	mov	r3, r1
 8001198:	4610      	mov	r0, r2
 800119a:	4619      	mov	r1, r3
 800119c:	f04f 0200 	mov.w	r2, #0
 80011a0:	4b20      	ldr	r3, [pc, #128]	; (8001224 <setPulseFromDutyValue+0x1f8>)
 80011a2:	f7ff fb5b 	bl	800085c <__aeabi_ddiv>
 80011a6:	4602      	mov	r2, r0
 80011a8:	460b      	mov	r3, r1
 80011aa:	491d      	ldr	r1, [pc, #116]	; (8001220 <setPulseFromDutyValue+0x1f4>)
 80011ac:	680c      	ldr	r4, [r1, #0]
 80011ae:	4610      	mov	r0, r2
 80011b0:	4619      	mov	r1, r3
 80011b2:	f7ff fd01 	bl	8000bb8 <__aeabi_d2uiz>
 80011b6:	4603      	mov	r3, r0
 80011b8:	63e3      	str	r3, [r4, #60]	; 0x3c
}
 80011ba:	e02a      	b.n	8001212 <setPulseFromDutyValue+0x1e6>
	__HAL_TIM_SET_COMPARE(&htim3, channelToModulate, (abs(dutyVal) * ((double )htim3.Init.Period)) / 100); //cast integer value to double to correctly perform division between decimal numbers
 80011bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80011c0:	f7ff fcd2 	bl	8000b68 <__aeabi_d2iz>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	bfb8      	it	lt
 80011ca:	425b      	neglt	r3, r3
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff f9b1 	bl	8000534 <__aeabi_i2d>
 80011d2:	4604      	mov	r4, r0
 80011d4:	460d      	mov	r5, r1
 80011d6:	4b12      	ldr	r3, [pc, #72]	; (8001220 <setPulseFromDutyValue+0x1f4>)
 80011d8:	68db      	ldr	r3, [r3, #12]
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff f99a 	bl	8000514 <__aeabi_ui2d>
 80011e0:	4602      	mov	r2, r0
 80011e2:	460b      	mov	r3, r1
 80011e4:	4620      	mov	r0, r4
 80011e6:	4629      	mov	r1, r5
 80011e8:	f7ff fa0e 	bl	8000608 <__aeabi_dmul>
 80011ec:	4602      	mov	r2, r0
 80011ee:	460b      	mov	r3, r1
 80011f0:	4610      	mov	r0, r2
 80011f2:	4619      	mov	r1, r3
 80011f4:	f04f 0200 	mov.w	r2, #0
 80011f8:	4b0a      	ldr	r3, [pc, #40]	; (8001224 <setPulseFromDutyValue+0x1f8>)
 80011fa:	f7ff fb2f 	bl	800085c <__aeabi_ddiv>
 80011fe:	4602      	mov	r2, r0
 8001200:	460b      	mov	r3, r1
 8001202:	4907      	ldr	r1, [pc, #28]	; (8001220 <setPulseFromDutyValue+0x1f4>)
 8001204:	680c      	ldr	r4, [r1, #0]
 8001206:	4610      	mov	r0, r2
 8001208:	4619      	mov	r1, r3
 800120a:	f7ff fcd5 	bl	8000bb8 <__aeabi_d2uiz>
 800120e:	4603      	mov	r3, r0
 8001210:	6423      	str	r3, [r4, #64]	; 0x40
}
 8001212:	bf00      	nop
 8001214:	3710      	adds	r7, #16
 8001216:	46bd      	mov	sp, r7
 8001218:	bdb0      	pop	{r4, r5, r7, pc}
 800121a:	bf00      	nop
 800121c:	40020000 	.word	0x40020000
 8001220:	20001a04 	.word	0x20001a04
 8001224:	40590000 	.word	0x40590000

08001228 <getSpeedByDelta>:

// get speed by ticks
double getSpeedByDelta(double ticksDelta, double Ts) {
 8001228:	b5b0      	push	{r4, r5, r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	ed87 0b02 	vstr	d0, [r7, #8]
 8001232:	ed87 1b00 	vstr	d1, [r7]
	return ticksDelta * 60 / (3591.84 * Ts);
 8001236:	f04f 0200 	mov.w	r2, #0
 800123a:	4b13      	ldr	r3, [pc, #76]	; (8001288 <getSpeedByDelta+0x60>)
 800123c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001240:	f7ff f9e2 	bl	8000608 <__aeabi_dmul>
 8001244:	4602      	mov	r2, r0
 8001246:	460b      	mov	r3, r1
 8001248:	4614      	mov	r4, r2
 800124a:	461d      	mov	r5, r3
 800124c:	a30c      	add	r3, pc, #48	; (adr r3, 8001280 <getSpeedByDelta+0x58>)
 800124e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001252:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001256:	f7ff f9d7 	bl	8000608 <__aeabi_dmul>
 800125a:	4602      	mov	r2, r0
 800125c:	460b      	mov	r3, r1
 800125e:	4620      	mov	r0, r4
 8001260:	4629      	mov	r1, r5
 8001262:	f7ff fafb 	bl	800085c <__aeabi_ddiv>
 8001266:	4602      	mov	r2, r0
 8001268:	460b      	mov	r3, r1
 800126a:	ec43 2b17 	vmov	d7, r2, r3
}
 800126e:	eeb0 0a47 	vmov.f32	s0, s14
 8001272:	eef0 0a67 	vmov.f32	s1, s15
 8001276:	3710      	adds	r7, #16
 8001278:	46bd      	mov	sp, r7
 800127a:	bdb0      	pop	{r4, r5, r7, pc}
 800127c:	f3af 8000 	nop.w
 8001280:	147ae148 	.word	0x147ae148
 8001284:	40ac0fae 	.word	0x40ac0fae
 8001288:	404e0000 	.word	0x404e0000
 800128c:	00000000 	.word	0x00000000

08001290 <getTicksDelta>:

// get ticks in the delta time
double getTicksDelta(double currentTicks, double lastTicks, double Ts) {
 8001290:	b5b0      	push	{r4, r5, r7, lr}
 8001292:	b088      	sub	sp, #32
 8001294:	af00      	add	r7, sp, #0
 8001296:	ed87 0b04 	vstr	d0, [r7, #16]
 800129a:	ed87 1b02 	vstr	d1, [r7, #8]
 800129e:	ed87 2b00 	vstr	d2, [r7]
	double delta;

	if (abs(currentTicks - lastTicks) <= ceil(8400 * Ts))
 80012a2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80012a6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80012aa:	f7fe fff5 	bl	8000298 <__aeabi_dsub>
 80012ae:	4602      	mov	r2, r0
 80012b0:	460b      	mov	r3, r1
 80012b2:	4610      	mov	r0, r2
 80012b4:	4619      	mov	r1, r3
 80012b6:	f7ff fc57 	bl	8000b68 <__aeabi_d2iz>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	bfb8      	it	lt
 80012c0:	425b      	neglt	r3, r3
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff f936 	bl	8000534 <__aeabi_i2d>
 80012c8:	4604      	mov	r4, r0
 80012ca:	460d      	mov	r5, r1
 80012cc:	a33a      	add	r3, pc, #232	; (adr r3, 80013b8 <getTicksDelta+0x128>)
 80012ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80012d6:	f7ff f997 	bl	8000608 <__aeabi_dmul>
 80012da:	4602      	mov	r2, r0
 80012dc:	460b      	mov	r3, r1
 80012de:	ec43 2b17 	vmov	d7, r2, r3
 80012e2:	eeb0 0a47 	vmov.f32	s0, s14
 80012e6:	eef0 0a67 	vmov.f32	s1, s15
 80012ea:	f008 ffa1 	bl	800a230 <ceil>
 80012ee:	ec53 2b10 	vmov	r2, r3, d0
 80012f2:	4620      	mov	r0, r4
 80012f4:	4629      	mov	r1, r5
 80012f6:	f7ff fc03 	bl	8000b00 <__aeabi_dcmple>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d00a      	beq.n	8001316 <getTicksDelta+0x86>
		delta = currentTicks - lastTicks;
 8001300:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001304:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001308:	f7fe ffc6 	bl	8000298 <__aeabi_dsub>
 800130c:	4602      	mov	r2, r0
 800130e:	460b      	mov	r3, r1
 8001310:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8001314:	e041      	b.n	800139a <getTicksDelta+0x10a>
	else {
		if (lastTicks > currentTicks)
 8001316:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800131a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800131e:	f7ff fc03 	bl	8000b28 <__aeabi_dcmpgt>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d01c      	beq.n	8001362 <getTicksDelta+0xd2>
			delta = currentTicks + pow(2, 16) - 1 - lastTicks;
 8001328:	f04f 0200 	mov.w	r2, #0
 800132c:	4b20      	ldr	r3, [pc, #128]	; (80013b0 <getTicksDelta+0x120>)
 800132e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001332:	f7fe ffb3 	bl	800029c <__adddf3>
 8001336:	4602      	mov	r2, r0
 8001338:	460b      	mov	r3, r1
 800133a:	4610      	mov	r0, r2
 800133c:	4619      	mov	r1, r3
 800133e:	f04f 0200 	mov.w	r2, #0
 8001342:	4b1c      	ldr	r3, [pc, #112]	; (80013b4 <getTicksDelta+0x124>)
 8001344:	f7fe ffa8 	bl	8000298 <__aeabi_dsub>
 8001348:	4602      	mov	r2, r0
 800134a:	460b      	mov	r3, r1
 800134c:	4610      	mov	r0, r2
 800134e:	4619      	mov	r1, r3
 8001350:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001354:	f7fe ffa0 	bl	8000298 <__aeabi_dsub>
 8001358:	4602      	mov	r2, r0
 800135a:	460b      	mov	r3, r1
 800135c:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8001360:	e01b      	b.n	800139a <getTicksDelta+0x10a>
		else
			delta = currentTicks - pow(2, 16) + 1 - lastTicks;
 8001362:	f04f 0200 	mov.w	r2, #0
 8001366:	4b12      	ldr	r3, [pc, #72]	; (80013b0 <getTicksDelta+0x120>)
 8001368:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800136c:	f7fe ff94 	bl	8000298 <__aeabi_dsub>
 8001370:	4602      	mov	r2, r0
 8001372:	460b      	mov	r3, r1
 8001374:	4610      	mov	r0, r2
 8001376:	4619      	mov	r1, r3
 8001378:	f04f 0200 	mov.w	r2, #0
 800137c:	4b0d      	ldr	r3, [pc, #52]	; (80013b4 <getTicksDelta+0x124>)
 800137e:	f7fe ff8d 	bl	800029c <__adddf3>
 8001382:	4602      	mov	r2, r0
 8001384:	460b      	mov	r3, r1
 8001386:	4610      	mov	r0, r2
 8001388:	4619      	mov	r1, r3
 800138a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800138e:	f7fe ff83 	bl	8000298 <__aeabi_dsub>
 8001392:	4602      	mov	r2, r0
 8001394:	460b      	mov	r3, r1
 8001396:	e9c7 2306 	strd	r2, r3, [r7, #24]
	}
	return delta;
 800139a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800139e:	ec43 2b17 	vmov	d7, r2, r3
}
 80013a2:	eeb0 0a47 	vmov.f32	s0, s14
 80013a6:	eef0 0a67 	vmov.f32	s1, s15
 80013aa:	3720      	adds	r7, #32
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bdb0      	pop	{r4, r5, r7, pc}
 80013b0:	40f00000 	.word	0x40f00000
 80013b4:	3ff00000 	.word	0x3ff00000
 80013b8:	00000000 	.word	0x00000000
 80013bc:	40c06800 	.word	0x40c06800

080013c0 <matsum>:

// matrix sum
void matsum(int row, int col, double mat1[row][col], double mat2[row][col], double result[row][col]){
 80013c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80013c4:	b08d      	sub	sp, #52	; 0x34
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	6178      	str	r0, [r7, #20]
 80013ca:	6139      	str	r1, [r7, #16]
 80013cc:	60fa      	str	r2, [r7, #12]
 80013ce:	60bb      	str	r3, [r7, #8]
 80013d0:	693e      	ldr	r6, [r7, #16]
 80013d2:	1e73      	subs	r3, r6, #1
 80013d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013d6:	4632      	mov	r2, r6
 80013d8:	2300      	movs	r3, #0
 80013da:	4692      	mov	sl, r2
 80013dc:	469b      	mov	fp, r3
 80013de:	f04f 0200 	mov.w	r2, #0
 80013e2:	f04f 0300 	mov.w	r3, #0
 80013e6:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80013ea:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80013ee:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80013f2:	693a      	ldr	r2, [r7, #16]
 80013f4:	607a      	str	r2, [r7, #4]
 80013f6:	1e53      	subs	r3, r2, #1
 80013f8:	623b      	str	r3, [r7, #32]
 80013fa:	2300      	movs	r3, #0
 80013fc:	4690      	mov	r8, r2
 80013fe:	4699      	mov	r9, r3
 8001400:	f04f 0200 	mov.w	r2, #0
 8001404:	f04f 0300 	mov.w	r3, #0
 8001408:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800140c:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001410:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001414:	693a      	ldr	r2, [r7, #16]
 8001416:	603a      	str	r2, [r7, #0]
 8001418:	1e53      	subs	r3, r2, #1
 800141a:	61fb      	str	r3, [r7, #28]
 800141c:	2300      	movs	r3, #0
 800141e:	4614      	mov	r4, r2
 8001420:	461d      	mov	r5, r3
 8001422:	f04f 0200 	mov.w	r2, #0
 8001426:	f04f 0300 	mov.w	r3, #0
 800142a:	01ab      	lsls	r3, r5, #6
 800142c:	ea43 6394 	orr.w	r3, r3, r4, lsr #26
 8001430:	01a2      	lsls	r2, r4, #6
   //pre-checks
   assert(row > 0);
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	2b00      	cmp	r3, #0
 8001436:	dc06      	bgt.n	8001446 <matsum+0x86>
 8001438:	4b29      	ldr	r3, [pc, #164]	; (80014e0 <matsum+0x120>)
 800143a:	4a2a      	ldr	r2, [pc, #168]	; (80014e4 <matsum+0x124>)
 800143c:	f240 1115 	movw	r1, #277	; 0x115
 8001440:	4829      	ldr	r0, [pc, #164]	; (80014e8 <matsum+0x128>)
 8001442:	f006 f993 	bl	800776c <__assert_func>
   assert(col > 0);
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	2b00      	cmp	r3, #0
 800144a:	dc06      	bgt.n	800145a <matsum+0x9a>
 800144c:	4b27      	ldr	r3, [pc, #156]	; (80014ec <matsum+0x12c>)
 800144e:	4a25      	ldr	r2, [pc, #148]	; (80014e4 <matsum+0x124>)
 8001450:	f44f 718b 	mov.w	r1, #278	; 0x116
 8001454:	4824      	ldr	r0, [pc, #144]	; (80014e8 <matsum+0x128>)
 8001456:	f006 f989 	bl	800776c <__assert_func>

   //function
   for(int i = 0; i<row; i++){
 800145a:	2300      	movs	r3, #0
 800145c:	627b      	str	r3, [r7, #36]	; 0x24
 800145e:	e034      	b.n	80014ca <matsum+0x10a>
      for(int j = 0; j<col; j++){
 8001460:	2300      	movs	r3, #0
 8001462:	62bb      	str	r3, [r7, #40]	; 0x28
 8001464:	e02a      	b.n	80014bc <matsum+0xfc>
         result[i][j] = mat1[i][j] + mat2[i][j];
 8001466:	4632      	mov	r2, r6
 8001468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146a:	fb02 f303 	mul.w	r3, r2, r3
 800146e:	00db      	lsls	r3, r3, #3
 8001470:	68fa      	ldr	r2, [r7, #12]
 8001472:	441a      	add	r2, r3
 8001474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001476:	00db      	lsls	r3, r3, #3
 8001478:	4413      	add	r3, r2
 800147a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800147e:	687a      	ldr	r2, [r7, #4]
 8001480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001482:	fb02 f303 	mul.w	r3, r2, r3
 8001486:	00db      	lsls	r3, r3, #3
 8001488:	68ba      	ldr	r2, [r7, #8]
 800148a:	441a      	add	r2, r3
 800148c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800148e:	00db      	lsls	r3, r3, #3
 8001490:	4413      	add	r3, r2
 8001492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001496:	683d      	ldr	r5, [r7, #0]
 8001498:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800149a:	fb05 f404 	mul.w	r4, r5, r4
 800149e:	00e4      	lsls	r4, r4, #3
 80014a0:	6dbd      	ldr	r5, [r7, #88]	; 0x58
 80014a2:	442c      	add	r4, r5
 80014a4:	f7fe fefa 	bl	800029c <__adddf3>
 80014a8:	4602      	mov	r2, r0
 80014aa:	460b      	mov	r3, r1
 80014ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80014ae:	00c9      	lsls	r1, r1, #3
 80014b0:	4421      	add	r1, r4
 80014b2:	e9c1 2300 	strd	r2, r3, [r1]
      for(int j = 0; j<col; j++){
 80014b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014b8:	3301      	adds	r3, #1
 80014ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80014bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	dbd0      	blt.n	8001466 <matsum+0xa6>
   for(int i = 0; i<row; i++){
 80014c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c6:	3301      	adds	r3, #1
 80014c8:	627b      	str	r3, [r7, #36]	; 0x24
 80014ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	429a      	cmp	r2, r3
 80014d0:	dbc6      	blt.n	8001460 <matsum+0xa0>
      }
   }
}
 80014d2:	bf00      	nop
 80014d4:	bf00      	nop
 80014d6:	3734      	adds	r7, #52	; 0x34
 80014d8:	46bd      	mov	sp, r7
 80014da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80014de:	bf00      	nop
 80014e0:	0800a350 	.word	0x0800a350
 80014e4:	0800a520 	.word	0x0800a520
 80014e8:	0800a358 	.word	0x0800a358
 80014ec:	0800a36c 	.word	0x0800a36c

080014f0 <scalprod>:

// matrix * scalar product
void scalprod(int row, int col, double scalar, double mat[row][col], double result[row][col]){
 80014f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80014f4:	b08d      	sub	sp, #52	; 0x34
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	61f8      	str	r0, [r7, #28]
 80014fa:	61b9      	str	r1, [r7, #24]
 80014fc:	ed87 0b04 	vstr	d0, [r7, #16]
 8001500:	60fa      	str	r2, [r7, #12]
 8001502:	60bb      	str	r3, [r7, #8]
 8001504:	69be      	ldr	r6, [r7, #24]
 8001506:	1e73      	subs	r3, r6, #1
 8001508:	627b      	str	r3, [r7, #36]	; 0x24
 800150a:	4632      	mov	r2, r6
 800150c:	2300      	movs	r3, #0
 800150e:	4690      	mov	r8, r2
 8001510:	4699      	mov	r9, r3
 8001512:	f04f 0200 	mov.w	r2, #0
 8001516:	f04f 0300 	mov.w	r3, #0
 800151a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800151e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001522:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001526:	69ba      	ldr	r2, [r7, #24]
 8001528:	607a      	str	r2, [r7, #4]
 800152a:	1e53      	subs	r3, r2, #1
 800152c:	623b      	str	r3, [r7, #32]
 800152e:	2300      	movs	r3, #0
 8001530:	4614      	mov	r4, r2
 8001532:	461d      	mov	r5, r3
 8001534:	f04f 0200 	mov.w	r2, #0
 8001538:	f04f 0300 	mov.w	r3, #0
 800153c:	01ab      	lsls	r3, r5, #6
 800153e:	ea43 6394 	orr.w	r3, r3, r4, lsr #26
 8001542:	01a2      	lsls	r2, r4, #6
   //pre-checks
   assert(row > 0);
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	2b00      	cmp	r3, #0
 8001548:	dc06      	bgt.n	8001558 <scalprod+0x68>
 800154a:	4b24      	ldr	r3, [pc, #144]	; (80015dc <scalprod+0xec>)
 800154c:	4a24      	ldr	r2, [pc, #144]	; (80015e0 <scalprod+0xf0>)
 800154e:	f240 1123 	movw	r1, #291	; 0x123
 8001552:	4824      	ldr	r0, [pc, #144]	; (80015e4 <scalprod+0xf4>)
 8001554:	f006 f90a 	bl	800776c <__assert_func>
   assert(col > 0);
 8001558:	69bb      	ldr	r3, [r7, #24]
 800155a:	2b00      	cmp	r3, #0
 800155c:	dc06      	bgt.n	800156c <scalprod+0x7c>
 800155e:	4b22      	ldr	r3, [pc, #136]	; (80015e8 <scalprod+0xf8>)
 8001560:	4a1f      	ldr	r2, [pc, #124]	; (80015e0 <scalprod+0xf0>)
 8001562:	f44f 7192 	mov.w	r1, #292	; 0x124
 8001566:	481f      	ldr	r0, [pc, #124]	; (80015e4 <scalprod+0xf4>)
 8001568:	f006 f900 	bl	800776c <__assert_func>

   //function
   for(int i = 0; i<row; i++){
 800156c:	2300      	movs	r3, #0
 800156e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001570:	e02a      	b.n	80015c8 <scalprod+0xd8>
      for(int j = 0; j<col; j++){
 8001572:	2300      	movs	r3, #0
 8001574:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001576:	e020      	b.n	80015ba <scalprod+0xca>
         result[i][j] = mat[i][j] * scalar;
 8001578:	4632      	mov	r2, r6
 800157a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800157c:	fb02 f303 	mul.w	r3, r2, r3
 8001580:	00db      	lsls	r3, r3, #3
 8001582:	68fa      	ldr	r2, [r7, #12]
 8001584:	441a      	add	r2, r3
 8001586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001588:	00db      	lsls	r3, r3, #3
 800158a:	4413      	add	r3, r2
 800158c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001590:	687a      	ldr	r2, [r7, #4]
 8001592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001594:	fb02 f303 	mul.w	r3, r2, r3
 8001598:	00db      	lsls	r3, r3, #3
 800159a:	68ba      	ldr	r2, [r7, #8]
 800159c:	18d4      	adds	r4, r2, r3
 800159e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80015a2:	f7ff f831 	bl	8000608 <__aeabi_dmul>
 80015a6:	4602      	mov	r2, r0
 80015a8:	460b      	mov	r3, r1
 80015aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80015ac:	00c9      	lsls	r1, r1, #3
 80015ae:	4421      	add	r1, r4
 80015b0:	e9c1 2300 	strd	r2, r3, [r1]
      for(int j = 0; j<col; j++){
 80015b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015b6:	3301      	adds	r3, #1
 80015b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015bc:	69bb      	ldr	r3, [r7, #24]
 80015be:	429a      	cmp	r2, r3
 80015c0:	dbda      	blt.n	8001578 <scalprod+0x88>
   for(int i = 0; i<row; i++){
 80015c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015c4:	3301      	adds	r3, #1
 80015c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80015c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	429a      	cmp	r2, r3
 80015ce:	dbd0      	blt.n	8001572 <scalprod+0x82>
      }
   }
}
 80015d0:	bf00      	nop
 80015d2:	bf00      	nop
 80015d4:	3734      	adds	r7, #52	; 0x34
 80015d6:	46bd      	mov	sp, r7
 80015d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80015dc:	0800a350 	.word	0x0800a350
 80015e0:	0800a528 	.word	0x0800a528
 80015e4:	0800a358 	.word	0x0800a358
 80015e8:	0800a36c 	.word	0x0800a36c

080015ec <matprod>:

//matrix product
void matprod(int row1,int col1,int row2,int col2, double mat1[row1][col1], double mat2[row2][col2], double result[row1][col2]){
 80015ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80015f0:	b08f      	sub	sp, #60	; 0x3c
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	6178      	str	r0, [r7, #20]
 80015f6:	6139      	str	r1, [r7, #16]
 80015f8:	60fa      	str	r2, [r7, #12]
 80015fa:	60bb      	str	r3, [r7, #8]
 80015fc:	693e      	ldr	r6, [r7, #16]
 80015fe:	1e73      	subs	r3, r6, #1
 8001600:	637b      	str	r3, [r7, #52]	; 0x34
 8001602:	4632      	mov	r2, r6
 8001604:	2300      	movs	r3, #0
 8001606:	4692      	mov	sl, r2
 8001608:	469b      	mov	fp, r3
 800160a:	f04f 0200 	mov.w	r2, #0
 800160e:	f04f 0300 	mov.w	r3, #0
 8001612:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001616:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800161a:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800161e:	68ba      	ldr	r2, [r7, #8]
 8001620:	607a      	str	r2, [r7, #4]
 8001622:	1e53      	subs	r3, r2, #1
 8001624:	623b      	str	r3, [r7, #32]
 8001626:	2300      	movs	r3, #0
 8001628:	4690      	mov	r8, r2
 800162a:	4699      	mov	r9, r3
 800162c:	f04f 0200 	mov.w	r2, #0
 8001630:	f04f 0300 	mov.w	r3, #0
 8001634:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001638:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800163c:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001640:	68ba      	ldr	r2, [r7, #8]
 8001642:	603a      	str	r2, [r7, #0]
 8001644:	1e53      	subs	r3, r2, #1
 8001646:	61fb      	str	r3, [r7, #28]
 8001648:	2300      	movs	r3, #0
 800164a:	4614      	mov	r4, r2
 800164c:	461d      	mov	r5, r3
 800164e:	f04f 0200 	mov.w	r2, #0
 8001652:	f04f 0300 	mov.w	r3, #0
 8001656:	01ab      	lsls	r3, r5, #6
 8001658:	ea43 6394 	orr.w	r3, r3, r4, lsr #26
 800165c:	01a2      	lsls	r2, r4, #6
   //pre-checks
   assert(row1 > 0);
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	2b00      	cmp	r3, #0
 8001662:	dc06      	bgt.n	8001672 <matprod+0x86>
 8001664:	4b4a      	ldr	r3, [pc, #296]	; (8001790 <matprod+0x1a4>)
 8001666:	4a4b      	ldr	r2, [pc, #300]	; (8001794 <matprod+0x1a8>)
 8001668:	f240 1131 	movw	r1, #305	; 0x131
 800166c:	484a      	ldr	r0, [pc, #296]	; (8001798 <matprod+0x1ac>)
 800166e:	f006 f87d 	bl	800776c <__assert_func>
   assert(col1 > 0);
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	2b00      	cmp	r3, #0
 8001676:	dc06      	bgt.n	8001686 <matprod+0x9a>
 8001678:	4b48      	ldr	r3, [pc, #288]	; (800179c <matprod+0x1b0>)
 800167a:	4a46      	ldr	r2, [pc, #280]	; (8001794 <matprod+0x1a8>)
 800167c:	f44f 7199 	mov.w	r1, #306	; 0x132
 8001680:	4845      	ldr	r0, [pc, #276]	; (8001798 <matprod+0x1ac>)
 8001682:	f006 f873 	bl	800776c <__assert_func>
   assert(row2 > 0);
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	2b00      	cmp	r3, #0
 800168a:	dc06      	bgt.n	800169a <matprod+0xae>
 800168c:	4b44      	ldr	r3, [pc, #272]	; (80017a0 <matprod+0x1b4>)
 800168e:	4a41      	ldr	r2, [pc, #260]	; (8001794 <matprod+0x1a8>)
 8001690:	f240 1133 	movw	r1, #307	; 0x133
 8001694:	4840      	ldr	r0, [pc, #256]	; (8001798 <matprod+0x1ac>)
 8001696:	f006 f869 	bl	800776c <__assert_func>
   assert(col2 > 0);
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	2b00      	cmp	r3, #0
 800169e:	dc06      	bgt.n	80016ae <matprod+0xc2>
 80016a0:	4b40      	ldr	r3, [pc, #256]	; (80017a4 <matprod+0x1b8>)
 80016a2:	4a3c      	ldr	r2, [pc, #240]	; (8001794 <matprod+0x1a8>)
 80016a4:	f44f 719a 	mov.w	r1, #308	; 0x134
 80016a8:	483b      	ldr	r0, [pc, #236]	; (8001798 <matprod+0x1ac>)
 80016aa:	f006 f85f 	bl	800776c <__assert_func>
   assert(col1 == row2);
 80016ae:	693a      	ldr	r2, [r7, #16]
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	429a      	cmp	r2, r3
 80016b4:	d006      	beq.n	80016c4 <matprod+0xd8>
 80016b6:	4b3c      	ldr	r3, [pc, #240]	; (80017a8 <matprod+0x1bc>)
 80016b8:	4a36      	ldr	r2, [pc, #216]	; (8001794 <matprod+0x1a8>)
 80016ba:	f240 1135 	movw	r1, #309	; 0x135
 80016be:	4836      	ldr	r0, [pc, #216]	; (8001798 <matprod+0x1ac>)
 80016c0:	f006 f854 	bl	800776c <__assert_func>

   //function
   for(int i = 0; i < row1; ++i){
 80016c4:	2300      	movs	r3, #0
 80016c6:	627b      	str	r3, [r7, #36]	; 0x24
 80016c8:	e058      	b.n	800177c <matprod+0x190>
      for(int j = 0; j < col2; ++j) {
 80016ca:	2300      	movs	r3, #0
 80016cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80016ce:	e04e      	b.n	800176e <matprod+0x182>
         int x = 0;
 80016d0:	2300      	movs	r3, #0
 80016d2:	62fb      	str	r3, [r7, #44]	; 0x2c
         for(int k = 0; k < row2; ++k){
 80016d4:	2300      	movs	r3, #0
 80016d6:	633b      	str	r3, [r7, #48]	; 0x30
 80016d8:	e031      	b.n	800173e <matprod+0x152>
            x += mat1[i][k] * mat2[k][j];
 80016da:	4632      	mov	r2, r6
 80016dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016de:	fb02 f303 	mul.w	r3, r2, r3
 80016e2:	00db      	lsls	r3, r3, #3
 80016e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80016e6:	441a      	add	r2, r3
 80016e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016ea:	00db      	lsls	r3, r3, #3
 80016ec:	4413      	add	r3, r2
 80016ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016f6:	fb02 f303 	mul.w	r3, r2, r3
 80016fa:	00db      	lsls	r3, r3, #3
 80016fc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80016fe:	441a      	add	r2, r3
 8001700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001702:	00db      	lsls	r3, r3, #3
 8001704:	4413      	add	r3, r2
 8001706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800170a:	f7fe ff7d 	bl	8000608 <__aeabi_dmul>
 800170e:	4602      	mov	r2, r0
 8001710:	460b      	mov	r3, r1
 8001712:	4614      	mov	r4, r2
 8001714:	461d      	mov	r5, r3
 8001716:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001718:	f7fe ff0c 	bl	8000534 <__aeabi_i2d>
 800171c:	4602      	mov	r2, r0
 800171e:	460b      	mov	r3, r1
 8001720:	4620      	mov	r0, r4
 8001722:	4629      	mov	r1, r5
 8001724:	f7fe fdba 	bl	800029c <__adddf3>
 8001728:	4602      	mov	r2, r0
 800172a:	460b      	mov	r3, r1
 800172c:	4610      	mov	r0, r2
 800172e:	4619      	mov	r1, r3
 8001730:	f7ff fa1a 	bl	8000b68 <__aeabi_d2iz>
 8001734:	4603      	mov	r3, r0
 8001736:	62fb      	str	r3, [r7, #44]	; 0x2c
         for(int k = 0; k < row2; ++k){
 8001738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800173a:	3301      	adds	r3, #1
 800173c:	633b      	str	r3, [r7, #48]	; 0x30
 800173e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	429a      	cmp	r2, r3
 8001744:	dbc9      	blt.n	80016da <matprod+0xee>
         }
         result[i][j] = x;
 8001746:	683a      	ldr	r2, [r7, #0]
 8001748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174a:	fb02 f303 	mul.w	r3, r2, r3
 800174e:	00db      	lsls	r3, r3, #3
 8001750:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001752:	18d4      	adds	r4, r2, r3
 8001754:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001756:	f7fe feed 	bl	8000534 <__aeabi_i2d>
 800175a:	4602      	mov	r2, r0
 800175c:	460b      	mov	r3, r1
 800175e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001760:	00c9      	lsls	r1, r1, #3
 8001762:	4421      	add	r1, r4
 8001764:	e9c1 2300 	strd	r2, r3, [r1]
      for(int j = 0; j < col2; ++j) {
 8001768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800176a:	3301      	adds	r3, #1
 800176c:	62bb      	str	r3, [r7, #40]	; 0x28
 800176e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	429a      	cmp	r2, r3
 8001774:	dbac      	blt.n	80016d0 <matprod+0xe4>
   for(int i = 0; i < row1; ++i){
 8001776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001778:	3301      	adds	r3, #1
 800177a:	627b      	str	r3, [r7, #36]	; 0x24
 800177c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	429a      	cmp	r2, r3
 8001782:	dba2      	blt.n	80016ca <matprod+0xde>
      }
   }
}
 8001784:	bf00      	nop
 8001786:	bf00      	nop
 8001788:	373c      	adds	r7, #60	; 0x3c
 800178a:	46bd      	mov	sp, r7
 800178c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001790:	0800a374 	.word	0x0800a374
 8001794:	0800a534 	.word	0x0800a534
 8001798:	0800a358 	.word	0x0800a358
 800179c:	0800a380 	.word	0x0800a380
 80017a0:	0800a38c 	.word	0x0800a38c
 80017a4:	0800a398 	.word	0x0800a398
 80017a8:	0800a3a4 	.word	0x0800a3a4

080017ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	ed2d 8b04 	vpush	{d8-d9}
 80017b2:	f5ad 7d78 	sub.w	sp, sp, #992	; 0x3e0
 80017b6:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017b8:	f003 fdaa 	bl	8005310 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017bc:	f000 fa74 	bl	8001ca8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017c0:	f000 fbe2 	bl	8001f88 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80017c4:	f000 fbb6 	bl	8001f34 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80017c8:	f000 fb32 	bl	8001e30 <MX_TIM3_Init>
  MX_TIM1_Init();
 80017cc:	f000 fad8 	bl	8001d80 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80017d0:	2100      	movs	r1, #0
 80017d2:	48bc      	ldr	r0, [pc, #752]	; (8001ac4 <main+0x318>)
 80017d4:	f004 fdee 	bl	80063b4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80017d8:	2104      	movs	r1, #4
 80017da:	48ba      	ldr	r0, [pc, #744]	; (8001ac4 <main+0x318>)
 80017dc:	f004 fdea 	bl	80063b4 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start(&htim1);
 80017e0:	48b9      	ldr	r0, [pc, #740]	; (8001ac8 <main+0x31c>)
 80017e2:	f004 fd33 	bl	800624c <HAL_TIM_Base_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int rfut = rfut_array[0];
 80017e6:	4bb9      	ldr	r3, [pc, #740]	; (8001acc <main+0x320>)
 80017e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ec:	4610      	mov	r0, r2
 80017ee:	4619      	mov	r1, r3
 80017f0:	f7ff f9ba 	bl	8000b68 <__aeabi_d2iz>
 80017f4:	4603      	mov	r3, r0
 80017f6:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
  while (1)
    {
      /* USER CODE END WHILE */

      /* USER CODE BEGIN 3 */
  	  startTime = (double) HAL_GetTick();
 80017fa:	f003 fdef 	bl	80053dc <HAL_GetTick>
 80017fe:	4603      	mov	r3, r0
 8001800:	4618      	mov	r0, r3
 8001802:	f7fe fe87 	bl	8000514 <__aeabi_ui2d>
 8001806:	4602      	mov	r2, r0
 8001808:	460b      	mov	r3, r1
 800180a:	49b1      	ldr	r1, [pc, #708]	; (8001ad0 <main+0x324>)
 800180c:	e9c1 2300 	strd	r2, r3, [r1]

  	  //code to change the reference every 2.5 seconds
  	  if(counterOfIterations >= 50){
 8001810:	4bb0      	ldr	r3, [pc, #704]	; (8001ad4 <main+0x328>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2b31      	cmp	r3, #49	; 0x31
 8001816:	dd1f      	ble.n	8001858 <main+0xac>
  		 reference_index++;
 8001818:	4baf      	ldr	r3, [pc, #700]	; (8001ad8 <main+0x32c>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	3301      	adds	r3, #1
 800181e:	4aae      	ldr	r2, [pc, #696]	; (8001ad8 <main+0x32c>)
 8001820:	6013      	str	r3, [r2, #0]
  		 counterOfIterations = 0;
 8001822:	4bac      	ldr	r3, [pc, #688]	; (8001ad4 <main+0x328>)
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]
		 rfut = rfut_array[(reference_index) % 9];
 8001828:	4bab      	ldr	r3, [pc, #684]	; (8001ad8 <main+0x32c>)
 800182a:	6819      	ldr	r1, [r3, #0]
 800182c:	4bab      	ldr	r3, [pc, #684]	; (8001adc <main+0x330>)
 800182e:	fb83 2301 	smull	r2, r3, r3, r1
 8001832:	105a      	asrs	r2, r3, #1
 8001834:	17cb      	asrs	r3, r1, #31
 8001836:	1ad2      	subs	r2, r2, r3
 8001838:	4613      	mov	r3, r2
 800183a:	00db      	lsls	r3, r3, #3
 800183c:	4413      	add	r3, r2
 800183e:	1aca      	subs	r2, r1, r3
 8001840:	49a2      	ldr	r1, [pc, #648]	; (8001acc <main+0x320>)
 8001842:	00d3      	lsls	r3, r2, #3
 8001844:	440b      	add	r3, r1
 8001846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800184a:	4610      	mov	r0, r2
 800184c:	4619      	mov	r1, r3
 800184e:	f7ff f98b 	bl	8000b68 <__aeabi_d2iz>
 8001852:	4603      	mov	r3, r0
 8001854:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
  	  }

  	  printf(" Required speed: %d RPM\n\r", rfut);
 8001858:	f8d7 13cc 	ldr.w	r1, [r7, #972]	; 0x3cc
 800185c:	48a0      	ldr	r0, [pc, #640]	; (8001ae0 <main+0x334>)
 800185e:	f006 fdab 	bl	80083b8 <iprintf>

  	  //take current value of ticks, calculate speed, update ypast matrix
  	  currentTicks = (double) __HAL_TIM_GET_COUNTER(&htim1);
 8001862:	4b99      	ldr	r3, [pc, #612]	; (8001ac8 <main+0x31c>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001868:	4618      	mov	r0, r3
 800186a:	f7fe fe53 	bl	8000514 <__aeabi_ui2d>
 800186e:	4602      	mov	r2, r0
 8001870:	460b      	mov	r3, r1
 8001872:	499c      	ldr	r1, [pc, #624]	; (8001ae4 <main+0x338>)
 8001874:	e9c1 2300 	strd	r2, r3, [r1]
  	  double speed = getSpeedByDelta(getTicksDelta(currentTicks, lastTicks, deltaTime/1000), deltaTime/1000);
 8001878:	4b9a      	ldr	r3, [pc, #616]	; (8001ae4 <main+0x338>)
 800187a:	ed93 8b00 	vldr	d8, [r3]
 800187e:	4b9a      	ldr	r3, [pc, #616]	; (8001ae8 <main+0x33c>)
 8001880:	ed93 9b00 	vldr	d9, [r3]
 8001884:	4b99      	ldr	r3, [pc, #612]	; (8001aec <main+0x340>)
 8001886:	e9d3 0100 	ldrd	r0, r1, [r3]
 800188a:	f04f 0200 	mov.w	r2, #0
 800188e:	4b98      	ldr	r3, [pc, #608]	; (8001af0 <main+0x344>)
 8001890:	f7fe ffe4 	bl	800085c <__aeabi_ddiv>
 8001894:	4602      	mov	r2, r0
 8001896:	460b      	mov	r3, r1
 8001898:	ec43 2b17 	vmov	d7, r2, r3
 800189c:	eeb0 2a47 	vmov.f32	s4, s14
 80018a0:	eef0 2a67 	vmov.f32	s5, s15
 80018a4:	eeb0 1a49 	vmov.f32	s2, s18
 80018a8:	eef0 1a69 	vmov.f32	s3, s19
 80018ac:	eeb0 0a48 	vmov.f32	s0, s16
 80018b0:	eef0 0a68 	vmov.f32	s1, s17
 80018b4:	f7ff fcec 	bl	8001290 <getTicksDelta>
 80018b8:	eeb0 8a40 	vmov.f32	s16, s0
 80018bc:	eef0 8a60 	vmov.f32	s17, s1
 80018c0:	4b8a      	ldr	r3, [pc, #552]	; (8001aec <main+0x340>)
 80018c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018c6:	f04f 0200 	mov.w	r2, #0
 80018ca:	4b89      	ldr	r3, [pc, #548]	; (8001af0 <main+0x344>)
 80018cc:	f7fe ffc6 	bl	800085c <__aeabi_ddiv>
 80018d0:	4602      	mov	r2, r0
 80018d2:	460b      	mov	r3, r1
 80018d4:	ec43 2b17 	vmov	d7, r2, r3
 80018d8:	eeb0 1a47 	vmov.f32	s2, s14
 80018dc:	eef0 1a67 	vmov.f32	s3, s15
 80018e0:	eeb0 0a48 	vmov.f32	s0, s16
 80018e4:	eef0 0a68 	vmov.f32	s1, s17
 80018e8:	f7ff fc9e 	bl	8001228 <getSpeedByDelta>
 80018ec:	ed87 0bee 	vstr	d0, [r7, #952]	; 0x3b8
  	  printf(" Actual speed: %3.2f RPM\n\r", speed);
 80018f0:	e9d7 23ee 	ldrd	r2, r3, [r7, #952]	; 0x3b8
 80018f4:	487f      	ldr	r0, [pc, #508]	; (8001af4 <main+0x348>)
 80018f6:	f006 fd5f 	bl	80083b8 <iprintf>
  	  update_ypast(speed);
 80018fa:	ed97 0bee 	vldr	d0, [r7, #952]	; 0x3b8
 80018fe:	f7ff fb77 	bl	8000ff0 <update_ypast>

  	  //solve the MPC problem

  	  //du*lastU
  	  double p1[28][1];
  	  scalprod(28, 1, lastU, du, p1);
 8001902:	4b7d      	ldr	r3, [pc, #500]	; (8001af8 <main+0x34c>)
 8001904:	ed93 7b00 	vldr	d7, [r3]
 8001908:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800190c:	4a7b      	ldr	r2, [pc, #492]	; (8001afc <main+0x350>)
 800190e:	eeb0 0a47 	vmov.f32	s0, s14
 8001912:	eef0 0a67 	vmov.f32	s1, s15
 8001916:	2101      	movs	r1, #1
 8001918:	201c      	movs	r0, #28
 800191a:	f7ff fde9 	bl	80014f0 <scalprod>

  	  //ddu*Dupast
  	  double p2[28][1];
  	  scalprod(28,1,dupast,ddu,p2);
 800191e:	4b78      	ldr	r3, [pc, #480]	; (8001b00 <main+0x354>)
 8001920:	ed93 7b00 	vldr	d7, [r3]
 8001924:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001928:	4a76      	ldr	r2, [pc, #472]	; (8001b04 <main+0x358>)
 800192a:	eeb0 0a47 	vmov.f32	s0, s14
 800192e:	eef0 0a67 	vmov.f32	s1, s15
 8001932:	2101      	movs	r1, #1
 8001934:	201c      	movs	r0, #28
 8001936:	f7ff fddb 	bl	80014f0 <scalprod>

  	  //dy*ypast
  	  double p3[28][1];
  	  matprod(28,3,3,1,dy,ypast,p3);
 800193a:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800193e:	9302      	str	r3, [sp, #8]
 8001940:	4b71      	ldr	r3, [pc, #452]	; (8001b08 <main+0x35c>)
 8001942:	9301      	str	r3, [sp, #4]
 8001944:	4b71      	ldr	r3, [pc, #452]	; (8001b0c <main+0x360>)
 8001946:	9300      	str	r3, [sp, #0]
 8001948:	2301      	movs	r3, #1
 800194a:	2203      	movs	r2, #3
 800194c:	2103      	movs	r1, #3
 800194e:	201c      	movs	r0, #28
 8001950:	f7ff fe4c 	bl	80015ec <matprod>

  	  //dt = dd+du*lastU+ddu*Dupast+dy*ypast;
  	  double dt[28][1];
  	  matsum(28,1,p1,p2,dt);
 8001954:	f507 7184 	add.w	r1, r7, #264	; 0x108
 8001958:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800195c:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8001960:	9300      	str	r3, [sp, #0]
 8001962:	460b      	mov	r3, r1
 8001964:	2101      	movs	r1, #1
 8001966:	201c      	movs	r0, #28
 8001968:	f7ff fd2a 	bl	80013c0 <matsum>
  	  matsum(28,1,dt,p3,dt);
 800196c:	f507 71f4 	add.w	r1, r7, #488	; 0x1e8
 8001970:	f507 7232 	add.w	r2, r7, #712	; 0x2c8
 8001974:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8001978:	9300      	str	r3, [sp, #0]
 800197a:	460b      	mov	r3, r1
 800197c:	2101      	movs	r1, #1
 800197e:	201c      	movs	r0, #28
 8001980:	f7ff fd1e 	bl	80013c0 <matsum>
  	  matsum(28,1,dt,dd,dt);
 8001984:	f507 7232 	add.w	r2, r7, #712	; 0x2c8
 8001988:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 800198c:	9300      	str	r3, [sp, #0]
 800198e:	4b60      	ldr	r3, [pc, #384]	; (8001b10 <main+0x364>)
 8001990:	2101      	movs	r1, #1
 8001992:	201c      	movs	r0, #28
 8001994:	f7ff fd14 	bl	80013c0 <matsum>

  	  //f=X*[Dupast;ypast;rfut];
  	  double p4[5][1] = {{dupast},
 8001998:	4b59      	ldr	r3, [pc, #356]	; (8001b00 <main+0x354>)
 800199a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800199e:	f507 7174 	add.w	r1, r7, #976	; 0x3d0
 80019a2:	f5a1 7174 	sub.w	r1, r1, #976	; 0x3d0
 80019a6:	e9c1 2300 	strd	r2, r3, [r1]
  	  			  {ypast[0][0]},
 80019aa:	4b57      	ldr	r3, [pc, #348]	; (8001b08 <main+0x35c>)
 80019ac:	e9d3 2300 	ldrd	r2, r3, [r3]
  	  double p4[5][1] = {{dupast},
 80019b0:	f507 7174 	add.w	r1, r7, #976	; 0x3d0
 80019b4:	f5a1 7174 	sub.w	r1, r1, #976	; 0x3d0
 80019b8:	e9c1 2302 	strd	r2, r3, [r1, #8]
  	  			  {ypast[1][0]},
 80019bc:	4b52      	ldr	r3, [pc, #328]	; (8001b08 <main+0x35c>)
 80019be:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
  	  double p4[5][1] = {{dupast},
 80019c2:	f507 7174 	add.w	r1, r7, #976	; 0x3d0
 80019c6:	f5a1 7174 	sub.w	r1, r1, #976	; 0x3d0
 80019ca:	e9c1 2304 	strd	r2, r3, [r1, #16]
  	  			  {ypast[2][0]},
 80019ce:	4b4e      	ldr	r3, [pc, #312]	; (8001b08 <main+0x35c>)
 80019d0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
  	  double p4[5][1] = {{dupast},
 80019d4:	f507 7174 	add.w	r1, r7, #976	; 0x3d0
 80019d8:	f5a1 7174 	sub.w	r1, r1, #976	; 0x3d0
 80019dc:	e9c1 2306 	strd	r2, r3, [r1, #24]
 80019e0:	f8d7 03cc 	ldr.w	r0, [r7, #972]	; 0x3cc
 80019e4:	f7fe fda6 	bl	8000534 <__aeabi_i2d>
 80019e8:	4602      	mov	r2, r0
 80019ea:	460b      	mov	r3, r1
 80019ec:	f507 7174 	add.w	r1, r7, #976	; 0x3d0
 80019f0:	f5a1 7174 	sub.w	r1, r1, #976	; 0x3d0
 80019f4:	e9c1 2308 	strd	r2, r3, [r1, #32]
  	  					{rfut}};

  	  double f[2][1] = {{0}, {0}};
 80019f8:	f04f 0200 	mov.w	r2, #0
 80019fc:	f04f 0300 	mov.w	r3, #0
 8001a00:	e9c7 23ea 	strd	r2, r3, [r7, #936]	; 0x3a8
 8001a04:	f04f 0200 	mov.w	r2, #0
 8001a08:	f04f 0300 	mov.w	r3, #0
 8001a0c:	e9c7 23ec 	strd	r2, r3, [r7, #944]	; 0x3b0
  	  matprod(2,5,5,1,X,p4,f);
 8001a10:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8001a14:	9302      	str	r3, [sp, #8]
 8001a16:	463b      	mov	r3, r7
 8001a18:	9301      	str	r3, [sp, #4]
 8001a1a:	4b3e      	ldr	r3, [pc, #248]	; (8001b14 <main+0x368>)
 8001a1c:	9300      	str	r3, [sp, #0]
 8001a1e:	2301      	movs	r3, #1
 8001a20:	2205      	movs	r2, #5
 8001a22:	2105      	movs	r1, #5
 8001a24:	2002      	movs	r0, #2
 8001a26:	f7ff fde1 	bl	80015ec <matprod>

  	  //update the problem
  	  osqp_update_lin_cost(&workspace, (c_float *) f);
 8001a2a:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8001a2e:	4619      	mov	r1, r3
 8001a30:	4839      	ldr	r0, [pc, #228]	; (8001b18 <main+0x36c>)
 8001a32:	f003 f829 	bl	8004a88 <osqp_update_lin_cost>
  	  osqp_update_upper_bound(&workspace, (c_float *) dt);
 8001a36:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	4836      	ldr	r0, [pc, #216]	; (8001b18 <main+0x36c>)
 8001a3e:	f003 f877 	bl	8004b30 <osqp_update_upper_bound>

  	  //solve the problem
  	  osqp_solve(&workspace);
 8001a42:	4835      	ldr	r0, [pc, #212]	; (8001b18 <main+0x36c>)
 8001a44:	f002 ff22 	bl	800488c <osqp_solve>

  	  //take the solution
  	  double u = (double)(&workspace)->solution->x[0] + lastU;
 8001a48:	4b33      	ldr	r3, [pc, #204]	; (8001b18 <main+0x36c>)
 8001a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a52:	4b29      	ldr	r3, [pc, #164]	; (8001af8 <main+0x34c>)
 8001a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a58:	f7fe fc20 	bl	800029c <__adddf3>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	460b      	mov	r3, r1
 8001a60:	e9c7 23f0 	strd	r2, r3, [r7, #960]	; 0x3c0
  	  printf(" u from OSQP: %3.2f V\n\r", u);
 8001a64:	e9d7 23f0 	ldrd	r2, r3, [r7, #960]	; 0x3c0
 8001a68:	482c      	ldr	r0, [pc, #176]	; (8001b1c <main+0x370>)
 8001a6a:	f006 fca5 	bl	80083b8 <iprintf>

  	  //check bounds
  	  if(u > umax){
 8001a6e:	4b2c      	ldr	r3, [pc, #176]	; (8001b20 <main+0x374>)
 8001a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a74:	e9d7 01f0 	ldrd	r0, r1, [r7, #960]	; 0x3c0
 8001a78:	f7ff f856 	bl	8000b28 <__aeabi_dcmpgt>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d004      	beq.n	8001a8c <main+0x2e0>
  	  	u = umax;
 8001a82:	4b27      	ldr	r3, [pc, #156]	; (8001b20 <main+0x374>)
 8001a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a88:	e9c7 23f0 	strd	r2, r3, [r7, #960]	; 0x3c0
  	  }
  	  if(u < umin){
 8001a8c:	4b25      	ldr	r3, [pc, #148]	; (8001b24 <main+0x378>)
 8001a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a92:	e9d7 01f0 	ldrd	r0, r1, [r7, #960]	; 0x3c0
 8001a96:	f7ff f829 	bl	8000aec <__aeabi_dcmplt>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d004      	beq.n	8001aaa <main+0x2fe>
  	  	u = umin;
 8001aa0:	4b20      	ldr	r3, [pc, #128]	; (8001b24 <main+0x378>)
 8001aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa6:	e9c7 23f0 	strd	r2, r3, [r7, #960]	; 0x3c0
  	  }
  	  if(u - lastU > Dumax){
 8001aaa:	4b13      	ldr	r3, [pc, #76]	; (8001af8 <main+0x34c>)
 8001aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ab0:	e9d7 01f0 	ldrd	r0, r1, [r7, #960]	; 0x3c0
 8001ab4:	f7fe fbf0 	bl	8000298 <__aeabi_dsub>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	460b      	mov	r3, r1
 8001abc:	4610      	mov	r0, r2
 8001abe:	4619      	mov	r1, r3
 8001ac0:	e032      	b.n	8001b28 <main+0x37c>
 8001ac2:	bf00      	nop
 8001ac4:	20001a04 	.word	0x20001a04
 8001ac8:	200019bc 	.word	0x200019bc
 8001acc:	200005b0 	.word	0x200005b0
 8001ad0:	20001ac8 	.word	0x20001ac8
 8001ad4:	20001ad8 	.word	0x20001ad8
 8001ad8:	20001adc 	.word	0x20001adc
 8001adc:	38e38e39 	.word	0x38e38e39
 8001ae0:	0800a3b4 	.word	0x0800a3b4
 8001ae4:	20001ac0 	.word	0x20001ac0
 8001ae8:	20001ab8 	.word	0x20001ab8
 8001aec:	20001ad0 	.word	0x20001ad0
 8001af0:	408f4000 	.word	0x408f4000
 8001af4:	0800a3d0 	.word	0x0800a3d0
 8001af8:	20001ab0 	.word	0x20001ab0
 8001afc:	20000228 	.word	0x20000228
 8001b00:	20001a90 	.word	0x20001a90
 8001b04:	20000148 	.word	0x20000148
 8001b08:	20001a98 	.word	0x20001a98
 8001b0c:	20000308 	.word	0x20000308
 8001b10:	20000068 	.word	0x20000068
 8001b14:	20000018 	.word	0x20000018
 8001b18:	20001760 	.word	0x20001760
 8001b1c:	0800a3ec 	.word	0x0800a3ec
 8001b20:	20000008 	.word	0x20000008
 8001b24:	20000010 	.word	0x20000010
 8001b28:	4b50      	ldr	r3, [pc, #320]	; (8001c6c <main+0x4c0>)
 8001b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b2e:	f7fe fffb 	bl	8000b28 <__aeabi_dcmpgt>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d00b      	beq.n	8001b50 <main+0x3a4>
  	  	u = lastU + Dumax;
 8001b38:	4b4d      	ldr	r3, [pc, #308]	; (8001c70 <main+0x4c4>)
 8001b3a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b3e:	4b4b      	ldr	r3, [pc, #300]	; (8001c6c <main+0x4c0>)
 8001b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b44:	f7fe fbaa 	bl	800029c <__adddf3>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	460b      	mov	r3, r1
 8001b4c:	e9c7 23f0 	strd	r2, r3, [r7, #960]	; 0x3c0
  	  }

  	  //apply u
  	  setPulseFromDutyValue(u * 100 / 12);
 8001b50:	f04f 0200 	mov.w	r2, #0
 8001b54:	4b47      	ldr	r3, [pc, #284]	; (8001c74 <main+0x4c8>)
 8001b56:	e9d7 01f0 	ldrd	r0, r1, [r7, #960]	; 0x3c0
 8001b5a:	f7fe fd55 	bl	8000608 <__aeabi_dmul>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	460b      	mov	r3, r1
 8001b62:	4610      	mov	r0, r2
 8001b64:	4619      	mov	r1, r3
 8001b66:	f04f 0200 	mov.w	r2, #0
 8001b6a:	4b43      	ldr	r3, [pc, #268]	; (8001c78 <main+0x4cc>)
 8001b6c:	f7fe fe76 	bl	800085c <__aeabi_ddiv>
 8001b70:	4602      	mov	r2, r0
 8001b72:	460b      	mov	r3, r1
 8001b74:	ec43 2b17 	vmov	d7, r2, r3
 8001b78:	eeb0 0a47 	vmov.f32	s0, s14
 8001b7c:	eef0 0a67 	vmov.f32	s1, s15
 8001b80:	f7ff fa54 	bl	800102c <setPulseFromDutyValue>
  	  printf(" u applied: %3.2f V\n\r", u);
 8001b84:	e9d7 23f0 	ldrd	r2, r3, [r7, #960]	; 0x3c0
 8001b88:	483c      	ldr	r0, [pc, #240]	; (8001c7c <main+0x4d0>)
 8001b8a:	f006 fc15 	bl	80083b8 <iprintf>

  	  //calculate the osqp execution time
  	  deltaTime = (double) HAL_GetTick() - startTime; //end time - startTime
 8001b8e:	f003 fc25 	bl	80053dc <HAL_GetTick>
 8001b92:	4603      	mov	r3, r0
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7fe fcbd 	bl	8000514 <__aeabi_ui2d>
 8001b9a:	4b39      	ldr	r3, [pc, #228]	; (8001c80 <main+0x4d4>)
 8001b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba0:	f7fe fb7a 	bl	8000298 <__aeabi_dsub>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	4936      	ldr	r1, [pc, #216]	; (8001c84 <main+0x4d8>)
 8001baa:	e9c1 2300 	strd	r2, r3, [r1]
  	  printf(" OSQP exec time: %3.0f ms \n\r", deltaTime);
 8001bae:	4b35      	ldr	r3, [pc, #212]	; (8001c84 <main+0x4d8>)
 8001bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bb4:	4834      	ldr	r0, [pc, #208]	; (8001c88 <main+0x4dc>)
 8001bb6:	f006 fbff 	bl	80083b8 <iprintf>

  	  //update values for next iteration
  	  dupast = u - lastU;
 8001bba:	4b2d      	ldr	r3, [pc, #180]	; (8001c70 <main+0x4c4>)
 8001bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bc0:	e9d7 01f0 	ldrd	r0, r1, [r7, #960]	; 0x3c0
 8001bc4:	f7fe fb68 	bl	8000298 <__aeabi_dsub>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	460b      	mov	r3, r1
 8001bcc:	492f      	ldr	r1, [pc, #188]	; (8001c8c <main+0x4e0>)
 8001bce:	e9c1 2300 	strd	r2, r3, [r1]
  	  lastU = u;
 8001bd2:	4927      	ldr	r1, [pc, #156]	; (8001c70 <main+0x4c4>)
 8001bd4:	e9d7 23f0 	ldrd	r2, r3, [r7, #960]	; 0x3c0
 8001bd8:	e9c1 2300 	strd	r2, r3, [r1]

  	  // wait that the iteration takes 50 ms to respect the sample time
  	  while(deltaTime < Ts*1000){
 8001bdc:	e00f      	b.n	8001bfe <main+0x452>
  		  //idle
  		  deltaTime = (double) HAL_GetTick() - startTime;
 8001bde:	f003 fbfd 	bl	80053dc <HAL_GetTick>
 8001be2:	4603      	mov	r3, r0
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7fe fc95 	bl	8000514 <__aeabi_ui2d>
 8001bea:	4b25      	ldr	r3, [pc, #148]	; (8001c80 <main+0x4d4>)
 8001bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bf0:	f7fe fb52 	bl	8000298 <__aeabi_dsub>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	460b      	mov	r3, r1
 8001bf8:	4922      	ldr	r1, [pc, #136]	; (8001c84 <main+0x4d8>)
 8001bfa:	e9c1 2300 	strd	r2, r3, [r1]
  	  while(deltaTime < Ts*1000){
 8001bfe:	4b24      	ldr	r3, [pc, #144]	; (8001c90 <main+0x4e4>)
 8001c00:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c04:	f04f 0200 	mov.w	r2, #0
 8001c08:	4b22      	ldr	r3, [pc, #136]	; (8001c94 <main+0x4e8>)
 8001c0a:	f7fe fcfd 	bl	8000608 <__aeabi_dmul>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	460b      	mov	r3, r1
 8001c12:	4610      	mov	r0, r2
 8001c14:	4619      	mov	r1, r3
 8001c16:	4b1b      	ldr	r3, [pc, #108]	; (8001c84 <main+0x4d8>)
 8001c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c1c:	f7fe ff84 	bl	8000b28 <__aeabi_dcmpgt>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d1db      	bne.n	8001bde <main+0x432>
  	  }

  	  //update for next iteration
  	  lastTicks = currentTicks;
 8001c26:	4b1c      	ldr	r3, [pc, #112]	; (8001c98 <main+0x4ec>)
 8001c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c2c:	491b      	ldr	r1, [pc, #108]	; (8001c9c <main+0x4f0>)
 8001c2e:	e9c1 2300 	strd	r2, r3, [r1]
  	  counterOfIterations++;
 8001c32:	4b1b      	ldr	r3, [pc, #108]	; (8001ca0 <main+0x4f4>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	3301      	adds	r3, #1
 8001c38:	4a19      	ldr	r2, [pc, #100]	; (8001ca0 <main+0x4f4>)
 8001c3a:	6013      	str	r3, [r2, #0]

  	  //useful to check if the execution took too much time and exceeded Ts
  	  deltaTime = (double) HAL_GetTick() - startTime; //execution time
 8001c3c:	f003 fbce 	bl	80053dc <HAL_GetTick>
 8001c40:	4603      	mov	r3, r0
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7fe fc66 	bl	8000514 <__aeabi_ui2d>
 8001c48:	4b0d      	ldr	r3, [pc, #52]	; (8001c80 <main+0x4d4>)
 8001c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c4e:	f7fe fb23 	bl	8000298 <__aeabi_dsub>
 8001c52:	4602      	mov	r2, r0
 8001c54:	460b      	mov	r3, r1
 8001c56:	490b      	ldr	r1, [pc, #44]	; (8001c84 <main+0x4d8>)
 8001c58:	e9c1 2300 	strd	r2, r3, [r1]
  	  printf(" Total exec time: %3.0f ms \n\n\r", deltaTime);
 8001c5c:	4b09      	ldr	r3, [pc, #36]	; (8001c84 <main+0x4d8>)
 8001c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c62:	4810      	ldr	r0, [pc, #64]	; (8001ca4 <main+0x4f8>)
 8001c64:	f006 fba8 	bl	80083b8 <iprintf>
    {
 8001c68:	e5c7      	b.n	80017fa <main+0x4e>
 8001c6a:	bf00      	nop
 8001c6c:	20000000 	.word	0x20000000
 8001c70:	20001ab0 	.word	0x20001ab0
 8001c74:	40590000 	.word	0x40590000
 8001c78:	40280000 	.word	0x40280000
 8001c7c:	0800a404 	.word	0x0800a404
 8001c80:	20001ac8 	.word	0x20001ac8
 8001c84:	20001ad0 	.word	0x20001ad0
 8001c88:	0800a41c 	.word	0x0800a41c
 8001c8c:	20001a90 	.word	0x20001a90
 8001c90:	200005a8 	.word	0x200005a8
 8001c94:	408f4000 	.word	0x408f4000
 8001c98:	20001ac0 	.word	0x20001ac0
 8001c9c:	20001ab8 	.word	0x20001ab8
 8001ca0:	20001ad8 	.word	0x20001ad8
 8001ca4:	0800a43c 	.word	0x0800a43c

08001ca8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b094      	sub	sp, #80	; 0x50
 8001cac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cae:	f107 0320 	add.w	r3, r7, #32
 8001cb2:	2230      	movs	r2, #48	; 0x30
 8001cb4:	2100      	movs	r1, #0
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f005 fdb2 	bl	8007820 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cbc:	f107 030c 	add.w	r3, r7, #12
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	601a      	str	r2, [r3, #0]
 8001cc4:	605a      	str	r2, [r3, #4]
 8001cc6:	609a      	str	r2, [r3, #8]
 8001cc8:	60da      	str	r2, [r3, #12]
 8001cca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ccc:	2300      	movs	r3, #0
 8001cce:	60bb      	str	r3, [r7, #8]
 8001cd0:	4b29      	ldr	r3, [pc, #164]	; (8001d78 <SystemClock_Config+0xd0>)
 8001cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd4:	4a28      	ldr	r2, [pc, #160]	; (8001d78 <SystemClock_Config+0xd0>)
 8001cd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cda:	6413      	str	r3, [r2, #64]	; 0x40
 8001cdc:	4b26      	ldr	r3, [pc, #152]	; (8001d78 <SystemClock_Config+0xd0>)
 8001cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ce4:	60bb      	str	r3, [r7, #8]
 8001ce6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ce8:	2300      	movs	r3, #0
 8001cea:	607b      	str	r3, [r7, #4]
 8001cec:	4b23      	ldr	r3, [pc, #140]	; (8001d7c <SystemClock_Config+0xd4>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001cf4:	4a21      	ldr	r2, [pc, #132]	; (8001d7c <SystemClock_Config+0xd4>)
 8001cf6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cfa:	6013      	str	r3, [r2, #0]
 8001cfc:	4b1f      	ldr	r3, [pc, #124]	; (8001d7c <SystemClock_Config+0xd4>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001d04:	607b      	str	r3, [r7, #4]
 8001d06:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d08:	2302      	movs	r3, #2
 8001d0a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d10:	2310      	movs	r3, #16
 8001d12:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d14:	2302      	movs	r3, #2
 8001d16:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001d1c:	2310      	movs	r3, #16
 8001d1e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001d20:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001d24:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001d26:	2304      	movs	r3, #4
 8001d28:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001d2a:	2304      	movs	r3, #4
 8001d2c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d2e:	f107 0320 	add.w	r3, r7, #32
 8001d32:	4618      	mov	r0, r3
 8001d34:	f003 fde2 	bl	80058fc <HAL_RCC_OscConfig>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001d3e:	f000 f967 	bl	8002010 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d42:	230f      	movs	r3, #15
 8001d44:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d46:	2302      	movs	r3, #2
 8001d48:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d52:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d54:	2300      	movs	r3, #0
 8001d56:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d58:	f107 030c 	add.w	r3, r7, #12
 8001d5c:	2102      	movs	r1, #2
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f004 f844 	bl	8005dec <HAL_RCC_ClockConfig>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001d6a:	f000 f951 	bl	8002010 <Error_Handler>
  }
}
 8001d6e:	bf00      	nop
 8001d70:	3750      	adds	r7, #80	; 0x50
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	40023800 	.word	0x40023800
 8001d7c:	40007000 	.word	0x40007000

08001d80 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b08c      	sub	sp, #48	; 0x30
 8001d84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001d86:	f107 030c 	add.w	r3, r7, #12
 8001d8a:	2224      	movs	r2, #36	; 0x24
 8001d8c:	2100      	movs	r1, #0
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f005 fd46 	bl	8007820 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d94:	1d3b      	adds	r3, r7, #4
 8001d96:	2200      	movs	r2, #0
 8001d98:	601a      	str	r2, [r3, #0]
 8001d9a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001d9c:	4b22      	ldr	r3, [pc, #136]	; (8001e28 <MX_TIM1_Init+0xa8>)
 8001d9e:	4a23      	ldr	r2, [pc, #140]	; (8001e2c <MX_TIM1_Init+0xac>)
 8001da0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001da2:	4b21      	ldr	r3, [pc, #132]	; (8001e28 <MX_TIM1_Init+0xa8>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001da8:	4b1f      	ldr	r3, [pc, #124]	; (8001e28 <MX_TIM1_Init+0xa8>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001dae:	4b1e      	ldr	r3, [pc, #120]	; (8001e28 <MX_TIM1_Init+0xa8>)
 8001db0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001db4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001db6:	4b1c      	ldr	r3, [pc, #112]	; (8001e28 <MX_TIM1_Init+0xa8>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001dbc:	4b1a      	ldr	r3, [pc, #104]	; (8001e28 <MX_TIM1_Init+0xa8>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dc2:	4b19      	ldr	r3, [pc, #100]	; (8001e28 <MX_TIM1_Init+0xa8>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001de0:	2301      	movs	r3, #1
 8001de2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001de4:	2300      	movs	r3, #0
 8001de6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001de8:	2300      	movs	r3, #0
 8001dea:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001dec:	f107 030c 	add.w	r3, r7, #12
 8001df0:	4619      	mov	r1, r3
 8001df2:	480d      	ldr	r0, [pc, #52]	; (8001e28 <MX_TIM1_Init+0xa8>)
 8001df4:	f004 fb8e 	bl	8006514 <HAL_TIM_Encoder_Init>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001dfe:	f000 f907 	bl	8002010 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e02:	2300      	movs	r3, #0
 8001e04:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e06:	2300      	movs	r3, #0
 8001e08:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e0a:	1d3b      	adds	r3, r7, #4
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	4806      	ldr	r0, [pc, #24]	; (8001e28 <MX_TIM1_Init+0xa8>)
 8001e10:	f005 f87c 	bl	8006f0c <HAL_TIMEx_MasterConfigSynchronization>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001e1a:	f000 f8f9 	bl	8002010 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001e1e:	bf00      	nop
 8001e20:	3730      	adds	r7, #48	; 0x30
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	200019bc 	.word	0x200019bc
 8001e2c:	40010000 	.word	0x40010000

08001e30 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b08e      	sub	sp, #56	; 0x38
 8001e34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	601a      	str	r2, [r3, #0]
 8001e3e:	605a      	str	r2, [r3, #4]
 8001e40:	609a      	str	r2, [r3, #8]
 8001e42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e44:	f107 0320 	add.w	r3, r7, #32
 8001e48:	2200      	movs	r2, #0
 8001e4a:	601a      	str	r2, [r3, #0]
 8001e4c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e4e:	1d3b      	adds	r3, r7, #4
 8001e50:	2200      	movs	r2, #0
 8001e52:	601a      	str	r2, [r3, #0]
 8001e54:	605a      	str	r2, [r3, #4]
 8001e56:	609a      	str	r2, [r3, #8]
 8001e58:	60da      	str	r2, [r3, #12]
 8001e5a:	611a      	str	r2, [r3, #16]
 8001e5c:	615a      	str	r2, [r3, #20]
 8001e5e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001e60:	4b32      	ldr	r3, [pc, #200]	; (8001f2c <MX_TIM3_Init+0xfc>)
 8001e62:	4a33      	ldr	r2, [pc, #204]	; (8001f30 <MX_TIM3_Init+0x100>)
 8001e64:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84 - 1;
 8001e66:	4b31      	ldr	r3, [pc, #196]	; (8001f2c <MX_TIM3_Init+0xfc>)
 8001e68:	2253      	movs	r2, #83	; 0x53
 8001e6a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e6c:	4b2f      	ldr	r3, [pc, #188]	; (8001f2c <MX_TIM3_Init+0xfc>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 500 - 1;
 8001e72:	4b2e      	ldr	r3, [pc, #184]	; (8001f2c <MX_TIM3_Init+0xfc>)
 8001e74:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001e78:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e7a:	4b2c      	ldr	r3, [pc, #176]	; (8001f2c <MX_TIM3_Init+0xfc>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e80:	4b2a      	ldr	r3, [pc, #168]	; (8001f2c <MX_TIM3_Init+0xfc>)
 8001e82:	2280      	movs	r2, #128	; 0x80
 8001e84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001e86:	4829      	ldr	r0, [pc, #164]	; (8001f2c <MX_TIM3_Init+0xfc>)
 8001e88:	f004 f990 	bl	80061ac <HAL_TIM_Base_Init>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001e92:	f000 f8bd 	bl	8002010 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e9a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001e9c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	4822      	ldr	r0, [pc, #136]	; (8001f2c <MX_TIM3_Init+0xfc>)
 8001ea4:	f004 fc9e 	bl	80067e4 <HAL_TIM_ConfigClockSource>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001eae:	f000 f8af 	bl	8002010 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001eb2:	481e      	ldr	r0, [pc, #120]	; (8001f2c <MX_TIM3_Init+0xfc>)
 8001eb4:	f004 fa24 	bl	8006300 <HAL_TIM_PWM_Init>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001ebe:	f000 f8a7 	bl	8002010 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001eca:	f107 0320 	add.w	r3, r7, #32
 8001ece:	4619      	mov	r1, r3
 8001ed0:	4816      	ldr	r0, [pc, #88]	; (8001f2c <MX_TIM3_Init+0xfc>)
 8001ed2:	f005 f81b 	bl	8006f0c <HAL_TIMEx_MasterConfigSynchronization>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001edc:	f000 f898 	bl	8002010 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ee0:	2360      	movs	r3, #96	; 0x60
 8001ee2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001eec:	2300      	movs	r3, #0
 8001eee:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ef0:	1d3b      	adds	r3, r7, #4
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	480d      	ldr	r0, [pc, #52]	; (8001f2c <MX_TIM3_Init+0xfc>)
 8001ef8:	f004 fbb2 	bl	8006660 <HAL_TIM_PWM_ConfigChannel>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001f02:	f000 f885 	bl	8002010 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f06:	1d3b      	adds	r3, r7, #4
 8001f08:	2204      	movs	r2, #4
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	4807      	ldr	r0, [pc, #28]	; (8001f2c <MX_TIM3_Init+0xfc>)
 8001f0e:	f004 fba7 	bl	8006660 <HAL_TIM_PWM_ConfigChannel>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d001      	beq.n	8001f1c <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001f18:	f000 f87a 	bl	8002010 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001f1c:	4803      	ldr	r0, [pc, #12]	; (8001f2c <MX_TIM3_Init+0xfc>)
 8001f1e:	f000 f90f 	bl	8002140 <HAL_TIM_MspPostInit>

}
 8001f22:	bf00      	nop
 8001f24:	3738      	adds	r7, #56	; 0x38
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	20001a04 	.word	0x20001a04
 8001f30:	40000400 	.word	0x40000400

08001f34 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f38:	4b11      	ldr	r3, [pc, #68]	; (8001f80 <MX_USART2_UART_Init+0x4c>)
 8001f3a:	4a12      	ldr	r2, [pc, #72]	; (8001f84 <MX_USART2_UART_Init+0x50>)
 8001f3c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f3e:	4b10      	ldr	r3, [pc, #64]	; (8001f80 <MX_USART2_UART_Init+0x4c>)
 8001f40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f44:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f46:	4b0e      	ldr	r3, [pc, #56]	; (8001f80 <MX_USART2_UART_Init+0x4c>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f4c:	4b0c      	ldr	r3, [pc, #48]	; (8001f80 <MX_USART2_UART_Init+0x4c>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f52:	4b0b      	ldr	r3, [pc, #44]	; (8001f80 <MX_USART2_UART_Init+0x4c>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f58:	4b09      	ldr	r3, [pc, #36]	; (8001f80 <MX_USART2_UART_Init+0x4c>)
 8001f5a:	220c      	movs	r2, #12
 8001f5c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f5e:	4b08      	ldr	r3, [pc, #32]	; (8001f80 <MX_USART2_UART_Init+0x4c>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f64:	4b06      	ldr	r3, [pc, #24]	; (8001f80 <MX_USART2_UART_Init+0x4c>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f6a:	4805      	ldr	r0, [pc, #20]	; (8001f80 <MX_USART2_UART_Init+0x4c>)
 8001f6c:	f005 f83c 	bl	8006fe8 <HAL_UART_Init>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001f76:	f000 f84b 	bl	8002010 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f7a:	bf00      	nop
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	20001a4c 	.word	0x20001a4c
 8001f84:	40004400 	.word	0x40004400

08001f88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b088      	sub	sp, #32
 8001f8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f8e:	f107 030c 	add.w	r3, r7, #12
 8001f92:	2200      	movs	r2, #0
 8001f94:	601a      	str	r2, [r3, #0]
 8001f96:	605a      	str	r2, [r3, #4]
 8001f98:	609a      	str	r2, [r3, #8]
 8001f9a:	60da      	str	r2, [r3, #12]
 8001f9c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	60bb      	str	r3, [r7, #8]
 8001fa2:	4b19      	ldr	r3, [pc, #100]	; (8002008 <MX_GPIO_Init+0x80>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa6:	4a18      	ldr	r2, [pc, #96]	; (8002008 <MX_GPIO_Init+0x80>)
 8001fa8:	f043 0301 	orr.w	r3, r3, #1
 8001fac:	6313      	str	r3, [r2, #48]	; 0x30
 8001fae:	4b16      	ldr	r3, [pc, #88]	; (8002008 <MX_GPIO_Init+0x80>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	60bb      	str	r3, [r7, #8]
 8001fb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fba:	2300      	movs	r3, #0
 8001fbc:	607b      	str	r3, [r7, #4]
 8001fbe:	4b12      	ldr	r3, [pc, #72]	; (8002008 <MX_GPIO_Init+0x80>)
 8001fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc2:	4a11      	ldr	r2, [pc, #68]	; (8002008 <MX_GPIO_Init+0x80>)
 8001fc4:	f043 0302 	orr.w	r3, r3, #2
 8001fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fca:	4b0f      	ldr	r3, [pc, #60]	; (8002008 <MX_GPIO_Init+0x80>)
 8001fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fce:	f003 0302 	and.w	r3, r3, #2
 8001fd2:	607b      	str	r3, [r7, #4]
 8001fd4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fdc:	480b      	ldr	r0, [pc, #44]	; (800200c <MX_GPIO_Init+0x84>)
 8001fde:	f003 fc73 	bl	80058c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001fe2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fe6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fec:	2300      	movs	r3, #0
 8001fee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ff4:	f107 030c 	add.w	r3, r7, #12
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	4804      	ldr	r0, [pc, #16]	; (800200c <MX_GPIO_Init+0x84>)
 8001ffc:	f003 fae0 	bl	80055c0 <HAL_GPIO_Init>
}
 8002000:	bf00      	nop
 8002002:	3720      	adds	r7, #32
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	40023800 	.word	0x40023800
 800200c:	40020000 	.word	0x40020000

08002010 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002014:	b672      	cpsid	i
}
 8002016:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002018:	e7fe      	b.n	8002018 <Error_Handler+0x8>
	...

0800201c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002022:	2300      	movs	r3, #0
 8002024:	607b      	str	r3, [r7, #4]
 8002026:	4b10      	ldr	r3, [pc, #64]	; (8002068 <HAL_MspInit+0x4c>)
 8002028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800202a:	4a0f      	ldr	r2, [pc, #60]	; (8002068 <HAL_MspInit+0x4c>)
 800202c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002030:	6453      	str	r3, [r2, #68]	; 0x44
 8002032:	4b0d      	ldr	r3, [pc, #52]	; (8002068 <HAL_MspInit+0x4c>)
 8002034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002036:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800203a:	607b      	str	r3, [r7, #4]
 800203c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800203e:	2300      	movs	r3, #0
 8002040:	603b      	str	r3, [r7, #0]
 8002042:	4b09      	ldr	r3, [pc, #36]	; (8002068 <HAL_MspInit+0x4c>)
 8002044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002046:	4a08      	ldr	r2, [pc, #32]	; (8002068 <HAL_MspInit+0x4c>)
 8002048:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800204c:	6413      	str	r3, [r2, #64]	; 0x40
 800204e:	4b06      	ldr	r3, [pc, #24]	; (8002068 <HAL_MspInit+0x4c>)
 8002050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002052:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002056:	603b      	str	r3, [r7, #0]
 8002058:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800205a:	bf00      	nop
 800205c:	370c      	adds	r7, #12
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	40023800 	.word	0x40023800

0800206c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b08a      	sub	sp, #40	; 0x28
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002074:	f107 0314 	add.w	r3, r7, #20
 8002078:	2200      	movs	r2, #0
 800207a:	601a      	str	r2, [r3, #0]
 800207c:	605a      	str	r2, [r3, #4]
 800207e:	609a      	str	r2, [r3, #8]
 8002080:	60da      	str	r2, [r3, #12]
 8002082:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a19      	ldr	r2, [pc, #100]	; (80020f0 <HAL_TIM_Encoder_MspInit+0x84>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d12c      	bne.n	80020e8 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800208e:	2300      	movs	r3, #0
 8002090:	613b      	str	r3, [r7, #16]
 8002092:	4b18      	ldr	r3, [pc, #96]	; (80020f4 <HAL_TIM_Encoder_MspInit+0x88>)
 8002094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002096:	4a17      	ldr	r2, [pc, #92]	; (80020f4 <HAL_TIM_Encoder_MspInit+0x88>)
 8002098:	f043 0301 	orr.w	r3, r3, #1
 800209c:	6453      	str	r3, [r2, #68]	; 0x44
 800209e:	4b15      	ldr	r3, [pc, #84]	; (80020f4 <HAL_TIM_Encoder_MspInit+0x88>)
 80020a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a2:	f003 0301 	and.w	r3, r3, #1
 80020a6:	613b      	str	r3, [r7, #16]
 80020a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020aa:	2300      	movs	r3, #0
 80020ac:	60fb      	str	r3, [r7, #12]
 80020ae:	4b11      	ldr	r3, [pc, #68]	; (80020f4 <HAL_TIM_Encoder_MspInit+0x88>)
 80020b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b2:	4a10      	ldr	r2, [pc, #64]	; (80020f4 <HAL_TIM_Encoder_MspInit+0x88>)
 80020b4:	f043 0301 	orr.w	r3, r3, #1
 80020b8:	6313      	str	r3, [r2, #48]	; 0x30
 80020ba:	4b0e      	ldr	r3, [pc, #56]	; (80020f4 <HAL_TIM_Encoder_MspInit+0x88>)
 80020bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020be:	f003 0301 	and.w	r3, r3, #1
 80020c2:	60fb      	str	r3, [r7, #12]
 80020c4:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80020c6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80020ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020cc:	2302      	movs	r3, #2
 80020ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d0:	2300      	movs	r3, #0
 80020d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d4:	2300      	movs	r3, #0
 80020d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80020d8:	2301      	movs	r3, #1
 80020da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020dc:	f107 0314 	add.w	r3, r7, #20
 80020e0:	4619      	mov	r1, r3
 80020e2:	4805      	ldr	r0, [pc, #20]	; (80020f8 <HAL_TIM_Encoder_MspInit+0x8c>)
 80020e4:	f003 fa6c 	bl	80055c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80020e8:	bf00      	nop
 80020ea:	3728      	adds	r7, #40	; 0x28
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	40010000 	.word	0x40010000
 80020f4:	40023800 	.word	0x40023800
 80020f8:	40020000 	.word	0x40020000

080020fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b085      	sub	sp, #20
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a0b      	ldr	r2, [pc, #44]	; (8002138 <HAL_TIM_Base_MspInit+0x3c>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d10d      	bne.n	800212a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800210e:	2300      	movs	r3, #0
 8002110:	60fb      	str	r3, [r7, #12]
 8002112:	4b0a      	ldr	r3, [pc, #40]	; (800213c <HAL_TIM_Base_MspInit+0x40>)
 8002114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002116:	4a09      	ldr	r2, [pc, #36]	; (800213c <HAL_TIM_Base_MspInit+0x40>)
 8002118:	f043 0302 	orr.w	r3, r3, #2
 800211c:	6413      	str	r3, [r2, #64]	; 0x40
 800211e:	4b07      	ldr	r3, [pc, #28]	; (800213c <HAL_TIM_Base_MspInit+0x40>)
 8002120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002122:	f003 0302 	and.w	r3, r3, #2
 8002126:	60fb      	str	r3, [r7, #12]
 8002128:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800212a:	bf00      	nop
 800212c:	3714      	adds	r7, #20
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	40000400 	.word	0x40000400
 800213c:	40023800 	.word	0x40023800

08002140 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b088      	sub	sp, #32
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002148:	f107 030c 	add.w	r3, r7, #12
 800214c:	2200      	movs	r2, #0
 800214e:	601a      	str	r2, [r3, #0]
 8002150:	605a      	str	r2, [r3, #4]
 8002152:	609a      	str	r2, [r3, #8]
 8002154:	60da      	str	r2, [r3, #12]
 8002156:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a12      	ldr	r2, [pc, #72]	; (80021a8 <HAL_TIM_MspPostInit+0x68>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d11d      	bne.n	800219e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002162:	2300      	movs	r3, #0
 8002164:	60bb      	str	r3, [r7, #8]
 8002166:	4b11      	ldr	r3, [pc, #68]	; (80021ac <HAL_TIM_MspPostInit+0x6c>)
 8002168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216a:	4a10      	ldr	r2, [pc, #64]	; (80021ac <HAL_TIM_MspPostInit+0x6c>)
 800216c:	f043 0302 	orr.w	r3, r3, #2
 8002170:	6313      	str	r3, [r2, #48]	; 0x30
 8002172:	4b0e      	ldr	r3, [pc, #56]	; (80021ac <HAL_TIM_MspPostInit+0x6c>)
 8002174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002176:	f003 0302 	and.w	r3, r3, #2
 800217a:	60bb      	str	r3, [r7, #8]
 800217c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800217e:	2330      	movs	r3, #48	; 0x30
 8002180:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002182:	2302      	movs	r3, #2
 8002184:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002186:	2300      	movs	r3, #0
 8002188:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800218a:	2300      	movs	r3, #0
 800218c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800218e:	2302      	movs	r3, #2
 8002190:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002192:	f107 030c 	add.w	r3, r7, #12
 8002196:	4619      	mov	r1, r3
 8002198:	4805      	ldr	r0, [pc, #20]	; (80021b0 <HAL_TIM_MspPostInit+0x70>)
 800219a:	f003 fa11 	bl	80055c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800219e:	bf00      	nop
 80021a0:	3720      	adds	r7, #32
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	40000400 	.word	0x40000400
 80021ac:	40023800 	.word	0x40023800
 80021b0:	40020400 	.word	0x40020400

080021b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b08a      	sub	sp, #40	; 0x28
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021bc:	f107 0314 	add.w	r3, r7, #20
 80021c0:	2200      	movs	r2, #0
 80021c2:	601a      	str	r2, [r3, #0]
 80021c4:	605a      	str	r2, [r3, #4]
 80021c6:	609a      	str	r2, [r3, #8]
 80021c8:	60da      	str	r2, [r3, #12]
 80021ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a19      	ldr	r2, [pc, #100]	; (8002238 <HAL_UART_MspInit+0x84>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d12b      	bne.n	800222e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80021d6:	2300      	movs	r3, #0
 80021d8:	613b      	str	r3, [r7, #16]
 80021da:	4b18      	ldr	r3, [pc, #96]	; (800223c <HAL_UART_MspInit+0x88>)
 80021dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021de:	4a17      	ldr	r2, [pc, #92]	; (800223c <HAL_UART_MspInit+0x88>)
 80021e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021e4:	6413      	str	r3, [r2, #64]	; 0x40
 80021e6:	4b15      	ldr	r3, [pc, #84]	; (800223c <HAL_UART_MspInit+0x88>)
 80021e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ee:	613b      	str	r3, [r7, #16]
 80021f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021f2:	2300      	movs	r3, #0
 80021f4:	60fb      	str	r3, [r7, #12]
 80021f6:	4b11      	ldr	r3, [pc, #68]	; (800223c <HAL_UART_MspInit+0x88>)
 80021f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fa:	4a10      	ldr	r2, [pc, #64]	; (800223c <HAL_UART_MspInit+0x88>)
 80021fc:	f043 0301 	orr.w	r3, r3, #1
 8002200:	6313      	str	r3, [r2, #48]	; 0x30
 8002202:	4b0e      	ldr	r3, [pc, #56]	; (800223c <HAL_UART_MspInit+0x88>)
 8002204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002206:	f003 0301 	and.w	r3, r3, #1
 800220a:	60fb      	str	r3, [r7, #12]
 800220c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800220e:	230c      	movs	r3, #12
 8002210:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002212:	2302      	movs	r3, #2
 8002214:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002216:	2300      	movs	r3, #0
 8002218:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800221a:	2303      	movs	r3, #3
 800221c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800221e:	2307      	movs	r3, #7
 8002220:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002222:	f107 0314 	add.w	r3, r7, #20
 8002226:	4619      	mov	r1, r3
 8002228:	4805      	ldr	r0, [pc, #20]	; (8002240 <HAL_UART_MspInit+0x8c>)
 800222a:	f003 f9c9 	bl	80055c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800222e:	bf00      	nop
 8002230:	3728      	adds	r7, #40	; 0x28
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	40004400 	.word	0x40004400
 800223c:	40023800 	.word	0x40023800
 8002240:	40020000 	.word	0x40020000

08002244 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002248:	e7fe      	b.n	8002248 <NMI_Handler+0x4>

0800224a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800224a:	b480      	push	{r7}
 800224c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800224e:	e7fe      	b.n	800224e <HardFault_Handler+0x4>

08002250 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002254:	e7fe      	b.n	8002254 <MemManage_Handler+0x4>

08002256 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002256:	b480      	push	{r7}
 8002258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800225a:	e7fe      	b.n	800225a <BusFault_Handler+0x4>

0800225c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002260:	e7fe      	b.n	8002260 <UsageFault_Handler+0x4>

08002262 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002262:	b480      	push	{r7}
 8002264:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002266:	bf00      	nop
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002274:	bf00      	nop
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr

0800227e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800227e:	b480      	push	{r7}
 8002280:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002282:	bf00      	nop
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr

0800228c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002290:	f003 f890 	bl	80053b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002294:	bf00      	nop
 8002296:	bd80      	pop	{r7, pc}

08002298 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0
	return 1;
 800229c:	2301      	movs	r3, #1
}
 800229e:	4618      	mov	r0, r3
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <_kill>:

int _kill(int pid, int sig)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80022b2:	f005 fa79 	bl	80077a8 <__errno>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2216      	movs	r2, #22
 80022ba:	601a      	str	r2, [r3, #0]
	return -1;
 80022bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3708      	adds	r7, #8
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <_exit>:

void _exit (int status)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80022d0:	f04f 31ff 	mov.w	r1, #4294967295
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	f7ff ffe7 	bl	80022a8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80022da:	e7fe      	b.n	80022da <_exit+0x12>

080022dc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b086      	sub	sp, #24
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	60f8      	str	r0, [r7, #12]
 80022e4:	60b9      	str	r1, [r7, #8]
 80022e6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022e8:	2300      	movs	r3, #0
 80022ea:	617b      	str	r3, [r7, #20]
 80022ec:	e00a      	b.n	8002304 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80022ee:	f3af 8000 	nop.w
 80022f2:	4601      	mov	r1, r0
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	1c5a      	adds	r2, r3, #1
 80022f8:	60ba      	str	r2, [r7, #8]
 80022fa:	b2ca      	uxtb	r2, r1
 80022fc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	3301      	adds	r3, #1
 8002302:	617b      	str	r3, [r7, #20]
 8002304:	697a      	ldr	r2, [r7, #20]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	429a      	cmp	r2, r3
 800230a:	dbf0      	blt.n	80022ee <_read+0x12>
	}

return len;
 800230c:	687b      	ldr	r3, [r7, #4]
}
 800230e:	4618      	mov	r0, r3
 8002310:	3718      	adds	r7, #24
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}

08002316 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002316:	b480      	push	{r7}
 8002318:	b083      	sub	sp, #12
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
	return -1;
 800231e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002322:	4618      	mov	r0, r3
 8002324:	370c      	adds	r7, #12
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr

0800232e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800232e:	b480      	push	{r7}
 8002330:	b083      	sub	sp, #12
 8002332:	af00      	add	r7, sp, #0
 8002334:	6078      	str	r0, [r7, #4]
 8002336:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800233e:	605a      	str	r2, [r3, #4]
	return 0;
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	370c      	adds	r7, #12
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr

0800234e <_isatty>:

int _isatty(int file)
{
 800234e:	b480      	push	{r7}
 8002350:	b083      	sub	sp, #12
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
	return 1;
 8002356:	2301      	movs	r3, #1
}
 8002358:	4618      	mov	r0, r3
 800235a:	370c      	adds	r7, #12
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002364:	b480      	push	{r7}
 8002366:	b085      	sub	sp, #20
 8002368:	af00      	add	r7, sp, #0
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	607a      	str	r2, [r7, #4]
	return 0;
 8002370:	2300      	movs	r3, #0
}
 8002372:	4618      	mov	r0, r3
 8002374:	3714      	adds	r7, #20
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
	...

08002380 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b086      	sub	sp, #24
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002388:	4a14      	ldr	r2, [pc, #80]	; (80023dc <_sbrk+0x5c>)
 800238a:	4b15      	ldr	r3, [pc, #84]	; (80023e0 <_sbrk+0x60>)
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002394:	4b13      	ldr	r3, [pc, #76]	; (80023e4 <_sbrk+0x64>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d102      	bne.n	80023a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800239c:	4b11      	ldr	r3, [pc, #68]	; (80023e4 <_sbrk+0x64>)
 800239e:	4a12      	ldr	r2, [pc, #72]	; (80023e8 <_sbrk+0x68>)
 80023a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023a2:	4b10      	ldr	r3, [pc, #64]	; (80023e4 <_sbrk+0x64>)
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4413      	add	r3, r2
 80023aa:	693a      	ldr	r2, [r7, #16]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d207      	bcs.n	80023c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023b0:	f005 f9fa 	bl	80077a8 <__errno>
 80023b4:	4603      	mov	r3, r0
 80023b6:	220c      	movs	r2, #12
 80023b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023ba:	f04f 33ff 	mov.w	r3, #4294967295
 80023be:	e009      	b.n	80023d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023c0:	4b08      	ldr	r3, [pc, #32]	; (80023e4 <_sbrk+0x64>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023c6:	4b07      	ldr	r3, [pc, #28]	; (80023e4 <_sbrk+0x64>)
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4413      	add	r3, r2
 80023ce:	4a05      	ldr	r2, [pc, #20]	; (80023e4 <_sbrk+0x64>)
 80023d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023d2:	68fb      	ldr	r3, [r7, #12]
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3718      	adds	r7, #24
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	20018000 	.word	0x20018000
 80023e0:	00000400 	.word	0x00000400
 80023e4:	20001ae0 	.word	0x20001ae0
 80023e8:	20002580 	.word	0x20002580

080023ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023f0:	4b06      	ldr	r3, [pc, #24]	; (800240c <SystemInit+0x20>)
 80023f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023f6:	4a05      	ldr	r2, [pc, #20]	; (800240c <SystemInit+0x20>)
 80023f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002400:	bf00      	nop
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	e000ed00 	.word	0xe000ed00

08002410 <swap_vectors>:
}

#endif // EMBEDDED != 1


void swap_vectors(c_float **a, c_float **b) {
 8002410:	b480      	push	{r7}
 8002412:	b085      	sub	sp, #20
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	6039      	str	r1, [r7, #0]
  c_float *temp;

  temp = *b;
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	60fb      	str	r3, [r7, #12]
  *b   = *a;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	601a      	str	r2, [r3, #0]
  *a   = temp;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	68fa      	ldr	r2, [r7, #12]
 800242c:	601a      	str	r2, [r3, #0]
}
 800242e:	bf00      	nop
 8002430:	3714      	adds	r7, #20
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
 800243a:	0000      	movs	r0, r0
 800243c:	0000      	movs	r0, r0
	...

08002440 <cold_start>:

void cold_start(OSQPWorkspace *work) {
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  vec_set_scalar(work->x, 0., work->data->n);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6919      	ldr	r1, [r3, #16]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002454:	ed9f 0b10 	vldr	d0, [pc, #64]	; 8002498 <cold_start+0x58>
 8002458:	4608      	mov	r0, r1
 800245a:	f001 fd03 	bl	8003e64 <vec_set_scalar>
  vec_set_scalar(work->z, 0., work->data->m);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6999      	ldr	r1, [r3, #24]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800246a:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 8002498 <cold_start+0x58>
 800246e:	4608      	mov	r0, r1
 8002470:	f001 fcf8 	bl	8003e64 <vec_set_scalar>
  vec_set_scalar(work->y, 0., work->data->m);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6959      	ldr	r1, [r3, #20]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002480:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8002498 <cold_start+0x58>
 8002484:	4608      	mov	r0, r1
 8002486:	f001 fced 	bl	8003e64 <vec_set_scalar>
}
 800248a:	bf00      	nop
 800248c:	3708      	adds	r7, #8
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	f3af 8000 	nop.w
	...

080024a0 <compute_rhs>:

static void compute_rhs(OSQPWorkspace *work) {
 80024a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024a4:	b085      	sub	sp, #20
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	6078      	str	r0, [r7, #4]
  c_int i; // Index

  for (i = 0; i < work->data->n; i++) {
 80024aa:	f04f 0200 	mov.w	r2, #0
 80024ae:	f04f 0300 	mov.w	r3, #0
 80024b2:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80024b6:	e02d      	b.n	8002514 <compute_rhs+0x74>
    // Cycle over part related to x variables
    work->xz_tilde[i] = work->settings->sigma * work->x_prev[i] -
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024bc:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6a1a      	ldr	r2, [r3, #32]
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	00db      	lsls	r3, r3, #3
 80024c8:	4413      	add	r3, r2
 80024ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ce:	f7fe f89b 	bl	8000608 <__aeabi_dmul>
 80024d2:	4602      	mov	r2, r0
 80024d4:	460b      	mov	r3, r1
 80024d6:	4692      	mov	sl, r2
 80024d8:	469b      	mov	fp, r3
                        work->data->q[i];
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	699a      	ldr	r2, [r3, #24]
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	00db      	lsls	r3, r3, #3
 80024e4:	4413      	add	r3, r2
 80024e6:	e9d3 2300 	ldrd	r2, r3, [r3]
    work->xz_tilde[i] = work->settings->sigma * work->x_prev[i] -
 80024ea:	6879      	ldr	r1, [r7, #4]
 80024ec:	69c8      	ldr	r0, [r1, #28]
 80024ee:	68b9      	ldr	r1, [r7, #8]
 80024f0:	00c9      	lsls	r1, r1, #3
 80024f2:	1846      	adds	r6, r0, r1
 80024f4:	4650      	mov	r0, sl
 80024f6:	4659      	mov	r1, fp
 80024f8:	f7fd fece 	bl	8000298 <__aeabi_dsub>
 80024fc:	4602      	mov	r2, r0
 80024fe:	460b      	mov	r3, r1
 8002500:	e9c6 2300 	strd	r2, r3, [r6]
  for (i = 0; i < work->data->n; i++) {
 8002504:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002508:	f112 0801 	adds.w	r8, r2, #1
 800250c:	f143 0900 	adc.w	r9, r3, #0
 8002510:	e9c7 8902 	strd	r8, r9, [r7, #8]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800251c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002520:	4290      	cmp	r0, r2
 8002522:	eb71 0303 	sbcs.w	r3, r1, r3
 8002526:	dbc7      	blt.n	80024b8 <compute_rhs+0x18>
  }

  for (i = 0; i < work->data->m; i++) {
 8002528:	f04f 0200 	mov.w	r2, #0
 800252c:	f04f 0300 	mov.w	r3, #0
 8002530:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8002534:	e036      	b.n	80025a4 <compute_rhs+0x104>
    // Cycle over dual variable in the first step (nu)
    work->xz_tilde[i + work->data->n] = work->z_prev[i] - work->rho_inv_vec[i] *
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	00db      	lsls	r3, r3, #3
 800253e:	4413      	add	r3, r2
 8002540:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	68da      	ldr	r2, [r3, #12]
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	00db      	lsls	r3, r3, #3
 800254c:	4413      	add	r3, r2
 800254e:	e9d3 0100 	ldrd	r0, r1, [r3]
                                        work->y[i];
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	695a      	ldr	r2, [r3, #20]
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	00db      	lsls	r3, r3, #3
 800255a:	4413      	add	r3, r2
 800255c:	e9d3 2300 	ldrd	r2, r3, [r3]
    work->xz_tilde[i + work->data->n] = work->z_prev[i] - work->rho_inv_vec[i] *
 8002560:	f7fe f852 	bl	8000608 <__aeabi_dmul>
 8002564:	4602      	mov	r2, r0
 8002566:	460b      	mov	r3, r1
 8002568:	4692      	mov	sl, r2
 800256a:	469b      	mov	fp, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	69d9      	ldr	r1, [r3, #28]
 8002570:	68b8      	ldr	r0, [r7, #8]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800257a:	4613      	mov	r3, r2
 800257c:	4403      	add	r3, r0
 800257e:	00db      	lsls	r3, r3, #3
 8002580:	18ce      	adds	r6, r1, r3
 8002582:	4652      	mov	r2, sl
 8002584:	465b      	mov	r3, fp
 8002586:	4640      	mov	r0, r8
 8002588:	4649      	mov	r1, r9
 800258a:	f7fd fe85 	bl	8000298 <__aeabi_dsub>
 800258e:	4602      	mov	r2, r0
 8002590:	460b      	mov	r3, r1
 8002592:	e9c6 2300 	strd	r2, r3, [r6]
  for (i = 0; i < work->data->m; i++) {
 8002596:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800259a:	1c54      	adds	r4, r2, #1
 800259c:	f143 0500 	adc.w	r5, r3, #0
 80025a0:	e9c7 4502 	strd	r4, r5, [r7, #8]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80025ac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80025b0:	4290      	cmp	r0, r2
 80025b2:	eb71 0303 	sbcs.w	r3, r1, r3
 80025b6:	dbbe      	blt.n	8002536 <compute_rhs+0x96>
  }
}
 80025b8:	bf00      	nop
 80025ba:	bf00      	nop
 80025bc:	3714      	adds	r7, #20
 80025be:	46bd      	mov	sp, r7
 80025c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080025c4 <update_xz_tilde>:

void update_xz_tilde(OSQPWorkspace *work) {
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  // Compute right-hand side
  compute_rhs(work);
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	f7ff ff67 	bl	80024a0 <compute_rhs>

  // Solve linear system
  work->linsys_solver->solve(work->linsys_solver, work->xz_tilde);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	6850      	ldr	r0, [r2, #4]
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	69d2      	ldr	r2, [r2, #28]
 80025e0:	4611      	mov	r1, r2
 80025e2:	4798      	blx	r3
}
 80025e4:	bf00      	nop
 80025e6:	3708      	adds	r7, #8
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}

080025ec <update_x>:

void update_x(OSQPWorkspace *work) {
 80025ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025f0:	b085      	sub	sp, #20
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	6078      	str	r0, [r7, #4]
  c_int i;

  // update x
  for (i = 0; i < work->data->n; i++) {
 80025f6:	f04f 0200 	mov.w	r2, #0
 80025fa:	f04f 0300 	mov.w	r3, #0
 80025fe:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8002602:	e041      	b.n	8002688 <update_x+0x9c>
    work->x[i] = work->settings->alpha * work->xz_tilde[i] +
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002608:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	69da      	ldr	r2, [r3, #28]
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	00db      	lsls	r3, r3, #3
 8002614:	4413      	add	r3, r2
 8002616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800261a:	f7fd fff5 	bl	8000608 <__aeabi_dmul>
 800261e:	4602      	mov	r2, r0
 8002620:	460b      	mov	r3, r1
 8002622:	4692      	mov	sl, r2
 8002624:	469b      	mov	fp, r3
                 ((c_float)1.0 - work->settings->alpha) * work->x_prev[i];
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800262a:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800262e:	f04f 0000 	mov.w	r0, #0
 8002632:	4937      	ldr	r1, [pc, #220]	; (8002710 <update_x+0x124>)
 8002634:	f7fd fe30 	bl	8000298 <__aeabi_dsub>
 8002638:	4602      	mov	r2, r0
 800263a:	460b      	mov	r3, r1
 800263c:	4610      	mov	r0, r2
 800263e:	4619      	mov	r1, r3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6a1a      	ldr	r2, [r3, #32]
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	00db      	lsls	r3, r3, #3
 8002648:	4413      	add	r3, r2
 800264a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800264e:	f7fd ffdb 	bl	8000608 <__aeabi_dmul>
 8002652:	4602      	mov	r2, r0
 8002654:	460b      	mov	r3, r1
 8002656:	4610      	mov	r0, r2
 8002658:	4619      	mov	r1, r3
    work->x[i] = work->settings->alpha * work->xz_tilde[i] +
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	691a      	ldr	r2, [r3, #16]
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	00db      	lsls	r3, r3, #3
 8002662:	18d6      	adds	r6, r2, r3
 8002664:	4602      	mov	r2, r0
 8002666:	460b      	mov	r3, r1
 8002668:	4650      	mov	r0, sl
 800266a:	4659      	mov	r1, fp
 800266c:	f7fd fe16 	bl	800029c <__adddf3>
 8002670:	4602      	mov	r2, r0
 8002672:	460b      	mov	r3, r1
 8002674:	e9c6 2300 	strd	r2, r3, [r6]
  for (i = 0; i < work->data->n; i++) {
 8002678:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800267c:	f112 0801 	adds.w	r8, r2, #1
 8002680:	f143 0900 	adc.w	r9, r3, #0
 8002684:	e9c7 8902 	strd	r8, r9, [r7, #8]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002690:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002694:	4290      	cmp	r0, r2
 8002696:	eb71 0303 	sbcs.w	r3, r1, r3
 800269a:	dbb3      	blt.n	8002604 <update_x+0x18>
  }

  // update delta_x
  for (i = 0; i < work->data->n; i++) {
 800269c:	f04f 0200 	mov.w	r2, #0
 80026a0:	f04f 0300 	mov.w	r3, #0
 80026a4:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80026a8:	e022      	b.n	80026f0 <update_x+0x104>
    work->delta_x[i] = work->x[i] - work->x_prev[i];
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	691a      	ldr	r2, [r3, #16]
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	00db      	lsls	r3, r3, #3
 80026b2:	4413      	add	r3, r2
 80026b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6a1a      	ldr	r2, [r3, #32]
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	00db      	lsls	r3, r3, #3
 80026c0:	4413      	add	r3, r2
 80026c2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80026c6:	687e      	ldr	r6, [r7, #4]
 80026c8:	6bf6      	ldr	r6, [r6, #60]	; 0x3c
 80026ca:	4633      	mov	r3, r6
 80026cc:	68be      	ldr	r6, [r7, #8]
 80026ce:	00f6      	lsls	r6, r6, #3
 80026d0:	441e      	add	r6, r3
 80026d2:	4642      	mov	r2, r8
 80026d4:	464b      	mov	r3, r9
 80026d6:	f7fd fddf 	bl	8000298 <__aeabi_dsub>
 80026da:	4602      	mov	r2, r0
 80026dc:	460b      	mov	r3, r1
 80026de:	e9c6 2300 	strd	r2, r3, [r6]
  for (i = 0; i < work->data->n; i++) {
 80026e2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80026e6:	1c54      	adds	r4, r2, #1
 80026e8:	f143 0500 	adc.w	r5, r3, #0
 80026ec:	e9c7 4502 	strd	r4, r5, [r7, #8]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026f8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80026fc:	4290      	cmp	r0, r2
 80026fe:	eb71 0303 	sbcs.w	r3, r1, r3
 8002702:	dbd2      	blt.n	80026aa <update_x+0xbe>
  }
}
 8002704:	bf00      	nop
 8002706:	bf00      	nop
 8002708:	3714      	adds	r7, #20
 800270a:	46bd      	mov	sp, r7
 800270c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002710:	3ff00000 	.word	0x3ff00000

08002714 <update_z>:

void update_z(OSQPWorkspace *work) {
 8002714:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002718:	b085      	sub	sp, #20
 800271a:	af00      	add	r7, sp, #0
 800271c:	6078      	str	r0, [r7, #4]
  c_int i;

  // update z
  for (i = 0; i < work->data->m; i++) {
 800271e:	f04f 0200 	mov.w	r2, #0
 8002722:	f04f 0300 	mov.w	r3, #0
 8002726:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800272a:	e062      	b.n	80027f2 <update_z+0xde>
    work->z[i] = work->settings->alpha * work->xz_tilde[i + work->data->n] +
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002730:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	69de      	ldr	r6, [r3, #28]
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	603b      	str	r3, [r7, #0]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002744:	4613      	mov	r3, r2
 8002746:	683a      	ldr	r2, [r7, #0]
 8002748:	4413      	add	r3, r2
 800274a:	00db      	lsls	r3, r3, #3
 800274c:	4433      	add	r3, r6
 800274e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002752:	f7fd ff59 	bl	8000608 <__aeabi_dmul>
 8002756:	4602      	mov	r2, r0
 8002758:	460b      	mov	r3, r1
 800275a:	4690      	mov	r8, r2
 800275c:	4699      	mov	r9, r3
                 ((c_float)1.0 - work->settings->alpha) * work->z_prev[i] +
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002762:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8002766:	f04f 0000 	mov.w	r0, #0
 800276a:	492c      	ldr	r1, [pc, #176]	; (800281c <update_z+0x108>)
 800276c:	f7fd fd94 	bl	8000298 <__aeabi_dsub>
 8002770:	4602      	mov	r2, r0
 8002772:	460b      	mov	r3, r1
 8002774:	4610      	mov	r0, r2
 8002776:	4619      	mov	r1, r3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	00db      	lsls	r3, r3, #3
 8002780:	4413      	add	r3, r2
 8002782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002786:	f7fd ff3f 	bl	8000608 <__aeabi_dmul>
 800278a:	4602      	mov	r2, r0
 800278c:	460b      	mov	r3, r1
    work->z[i] = work->settings->alpha * work->xz_tilde[i + work->data->n] +
 800278e:	4640      	mov	r0, r8
 8002790:	4649      	mov	r1, r9
 8002792:	f7fd fd83 	bl	800029c <__adddf3>
 8002796:	4602      	mov	r2, r0
 8002798:	460b      	mov	r3, r1
 800279a:	4690      	mov	r8, r2
 800279c:	4699      	mov	r9, r3
                 work->rho_inv_vec[i] * work->y[i];
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	68da      	ldr	r2, [r3, #12]
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	00db      	lsls	r3, r3, #3
 80027a6:	4413      	add	r3, r2
 80027a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	695a      	ldr	r2, [r3, #20]
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	00db      	lsls	r3, r3, #3
 80027b4:	4413      	add	r3, r2
 80027b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ba:	f7fd ff25 	bl	8000608 <__aeabi_dmul>
 80027be:	4602      	mov	r2, r0
 80027c0:	460b      	mov	r3, r1
 80027c2:	4610      	mov	r0, r2
 80027c4:	4619      	mov	r1, r3
    work->z[i] = work->settings->alpha * work->xz_tilde[i + work->data->n] +
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	699a      	ldr	r2, [r3, #24]
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	00db      	lsls	r3, r3, #3
 80027ce:	18d6      	adds	r6, r2, r3
                 ((c_float)1.0 - work->settings->alpha) * work->z_prev[i] +
 80027d0:	4602      	mov	r2, r0
 80027d2:	460b      	mov	r3, r1
 80027d4:	4640      	mov	r0, r8
 80027d6:	4649      	mov	r1, r9
 80027d8:	f7fd fd60 	bl	800029c <__adddf3>
 80027dc:	4602      	mov	r2, r0
 80027de:	460b      	mov	r3, r1
    work->z[i] = work->settings->alpha * work->xz_tilde[i + work->data->n] +
 80027e0:	e9c6 2300 	strd	r2, r3, [r6]
  for (i = 0; i < work->data->m; i++) {
 80027e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80027e8:	1c54      	adds	r4, r2, #1
 80027ea:	f143 0500 	adc.w	r5, r3, #0
 80027ee:	e9c7 4502 	strd	r4, r5, [r7, #8]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80027fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80027fe:	4290      	cmp	r0, r2
 8002800:	eb71 0303 	sbcs.w	r3, r1, r3
 8002804:	db92      	blt.n	800272c <update_z+0x18>
  }

  // project z
  project(work, work->z);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	699b      	ldr	r3, [r3, #24]
 800280a:	4619      	mov	r1, r3
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f002 fa07 	bl	8004c20 <project>
}
 8002812:	bf00      	nop
 8002814:	3714      	adds	r7, #20
 8002816:	46bd      	mov	sp, r7
 8002818:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800281c:	3ff00000 	.word	0x3ff00000

08002820 <update_y>:

void update_y(OSQPWorkspace *work) {
 8002820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002824:	b087      	sub	sp, #28
 8002826:	af00      	add	r7, sp, #0
 8002828:	60f8      	str	r0, [r7, #12]
  c_int i; // Index

  for (i = 0; i < work->data->m; i++) {
 800282a:	f04f 0200 	mov.w	r2, #0
 800282e:	f04f 0300 	mov.w	r3, #0
 8002832:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8002836:	e080      	b.n	800293a <update_y+0x11a>
    work->delta_y[i] = work->rho_vec[i] *
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	689a      	ldr	r2, [r3, #8]
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	00db      	lsls	r3, r3, #3
 8002840:	4413      	add	r3, r2
 8002842:	e9d3 8900 	ldrd	r8, r9, [r3]
                       (work->settings->alpha *
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800284a:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
                        work->xz_tilde[i + work->data->n] +
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	69de      	ldr	r6, [r3, #28]
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	461c      	mov	r4, r3
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800285e:	4613      	mov	r3, r2
 8002860:	4622      	mov	r2, r4
 8002862:	4413      	add	r3, r2
 8002864:	00db      	lsls	r3, r3, #3
 8002866:	4433      	add	r3, r6
 8002868:	e9d3 2300 	ldrd	r2, r3, [r3]
                       (work->settings->alpha *
 800286c:	f7fd fecc 	bl	8000608 <__aeabi_dmul>
 8002870:	4602      	mov	r2, r0
 8002872:	460b      	mov	r3, r1
 8002874:	4692      	mov	sl, r2
 8002876:	469b      	mov	fp, r3
                        ((c_float)1.0 - work->settings->alpha) * work->z_prev[i] -
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800287c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8002880:	f04f 0000 	mov.w	r0, #0
 8002884:	4935      	ldr	r1, [pc, #212]	; (800295c <update_y+0x13c>)
 8002886:	f7fd fd07 	bl	8000298 <__aeabi_dsub>
 800288a:	4602      	mov	r2, r0
 800288c:	460b      	mov	r3, r1
 800288e:	4610      	mov	r0, r2
 8002890:	4619      	mov	r1, r3
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	00db      	lsls	r3, r3, #3
 800289a:	4413      	add	r3, r2
 800289c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028a0:	f7fd feb2 	bl	8000608 <__aeabi_dmul>
 80028a4:	4602      	mov	r2, r0
 80028a6:	460b      	mov	r3, r1
                        work->xz_tilde[i + work->data->n] +
 80028a8:	4650      	mov	r0, sl
 80028aa:	4659      	mov	r1, fp
 80028ac:	f7fd fcf6 	bl	800029c <__adddf3>
 80028b0:	4602      	mov	r2, r0
 80028b2:	460b      	mov	r3, r1
 80028b4:	4610      	mov	r0, r2
 80028b6:	4619      	mov	r1, r3
                        work->z[i]);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	699a      	ldr	r2, [r3, #24]
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	00db      	lsls	r3, r3, #3
 80028c0:	4413      	add	r3, r2
 80028c2:	e9d3 2300 	ldrd	r2, r3, [r3]
                        ((c_float)1.0 - work->settings->alpha) * work->z_prev[i] -
 80028c6:	f7fd fce7 	bl	8000298 <__aeabi_dsub>
 80028ca:	4602      	mov	r2, r0
 80028cc:	460b      	mov	r3, r1
 80028ce:	4610      	mov	r0, r2
 80028d0:	4619      	mov	r1, r3
    work->delta_y[i] = work->rho_vec[i] *
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	00db      	lsls	r3, r3, #3
 80028da:	18d6      	adds	r6, r2, r3
 80028dc:	4602      	mov	r2, r0
 80028de:	460b      	mov	r3, r1
 80028e0:	4640      	mov	r0, r8
 80028e2:	4649      	mov	r1, r9
 80028e4:	f7fd fe90 	bl	8000608 <__aeabi_dmul>
 80028e8:	4602      	mov	r2, r0
 80028ea:	460b      	mov	r3, r1
 80028ec:	e9c6 2300 	strd	r2, r3, [r6]
    work->y[i] += work->delta_y[i];
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	695a      	ldr	r2, [r3, #20]
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	00db      	lsls	r3, r3, #3
 80028f8:	4413      	add	r3, r2
 80028fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	00db      	lsls	r3, r3, #3
 8002906:	4413      	add	r3, r2
 8002908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800290c:	68fe      	ldr	r6, [r7, #12]
 800290e:	6976      	ldr	r6, [r6, #20]
 8002910:	4634      	mov	r4, r6
 8002912:	693e      	ldr	r6, [r7, #16]
 8002914:	00f6      	lsls	r6, r6, #3
 8002916:	4426      	add	r6, r4
 8002918:	f7fd fcc0 	bl	800029c <__adddf3>
 800291c:	4602      	mov	r2, r0
 800291e:	460b      	mov	r3, r1
 8002920:	e9c6 2300 	strd	r2, r3, [r6]
  for (i = 0; i < work->data->m; i++) {
 8002924:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002928:	1c51      	adds	r1, r2, #1
 800292a:	6039      	str	r1, [r7, #0]
 800292c:	f143 0300 	adc.w	r3, r3, #0
 8002930:	607b      	str	r3, [r7, #4]
 8002932:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002936:	e9c7 3404 	strd	r3, r4, [r7, #16]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002942:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002946:	4290      	cmp	r0, r2
 8002948:	eb71 0303 	sbcs.w	r3, r1, r3
 800294c:	f6ff af74 	blt.w	8002838 <update_y+0x18>
  }
}
 8002950:	bf00      	nop
 8002952:	bf00      	nop
 8002954:	371c      	adds	r7, #28
 8002956:	46bd      	mov	sp, r7
 8002958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800295c:	3ff00000 	.word	0x3ff00000

08002960 <compute_obj_val>:

c_float compute_obj_val(OSQPWorkspace *work, c_float *x) {
 8002960:	b5b0      	push	{r4, r5, r7, lr}
 8002962:	b084      	sub	sp, #16
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	6039      	str	r1, [r7, #0]
  c_float obj_val;

  obj_val = quad_form(work->data->P, x) +
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	691b      	ldr	r3, [r3, #16]
 8002970:	6839      	ldr	r1, [r7, #0]
 8002972:	4618      	mov	r0, r3
 8002974:	f001 fec4 	bl	8004700 <quad_form>
 8002978:	ec55 4b10 	vmov	r4, r5, d0
            vec_prod(work->data->q, x, work->data->n);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	6998      	ldr	r0, [r3, #24]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800298a:	6839      	ldr	r1, [r7, #0]
 800298c:	f001 fafa 	bl	8003f84 <vec_prod>
 8002990:	ec53 2b10 	vmov	r2, r3, d0
  obj_val = quad_form(work->data->P, x) +
 8002994:	4620      	mov	r0, r4
 8002996:	4629      	mov	r1, r5
 8002998:	f7fd fc80 	bl	800029c <__adddf3>
 800299c:	4602      	mov	r2, r0
 800299e:	460b      	mov	r3, r1
 80029a0:	e9c7 2302 	strd	r2, r3, [r7, #8]

  if (work->settings->scaling) {
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029a8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	d00b      	beq.n	80029c8 <compute_obj_val+0x68>
    obj_val *= work->scaling->cinv;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029b4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80029b8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80029bc:	f7fd fe24 	bl	8000608 <__aeabi_dmul>
 80029c0:	4602      	mov	r2, r0
 80029c2:	460b      	mov	r3, r1
 80029c4:	e9c7 2302 	strd	r2, r3, [r7, #8]
  }

  return obj_val;
 80029c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80029cc:	ec43 2b17 	vmov	d7, r2, r3
}
 80029d0:	eeb0 0a47 	vmov.f32	s0, s14
 80029d4:	eef0 0a67 	vmov.f32	s1, s15
 80029d8:	3710      	adds	r7, #16
 80029da:	46bd      	mov	sp, r7
 80029dc:	bdb0      	pop	{r4, r5, r7, pc}
	...

080029e0 <compute_pri_res>:

c_float compute_pri_res(OSQPWorkspace *work, c_float *x, c_float *z) {
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b086      	sub	sp, #24
 80029e4:	af02      	add	r7, sp, #8
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	60b9      	str	r1, [r7, #8]
 80029ea:	607a      	str	r2, [r7, #4]
  // NB: Use z_prev as working vector
  // pr = Ax - z

  mat_vec(work->data->A, x, work->Ax, 0); // Ax
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	6958      	ldr	r0, [r3, #20]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80029f6:	f04f 0200 	mov.w	r2, #0
 80029fa:	f04f 0300 	mov.w	r3, #0
 80029fe:	e9cd 2300 	strd	r2, r3, [sp]
 8002a02:	460a      	mov	r2, r1
 8002a04:	68b9      	ldr	r1, [r7, #8]
 8002a06:	f001 fb3e 	bl	8004086 <mat_vec>
  vec_add_scaled(work->z_prev, work->Ax, z, work->data->m, -1);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002a1a:	e9cd 2300 	strd	r2, r3, [sp]
 8002a1e:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8002a88 <compute_pri_res+0xa8>
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	f001 f8f8 	bl	8003c18 <vec_add_scaled>

  // If scaling active -> rescale residual
  if (work->settings->scaling && !work->settings->scaled_termination) {
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a2c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	d015      	beq.n	8002a60 <compute_pri_res+0x80>
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a38:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	d10f      	bne.n	8002a60 <compute_pri_res+0x80>
    return vec_scaled_norm_inf(work->scaling->Einv, work->z_prev, work->data->m);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a44:	69d8      	ldr	r0, [r3, #28]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002a52:	f001 f928 	bl	8003ca6 <vec_scaled_norm_inf>
 8002a56:	eeb0 7a40 	vmov.f32	s14, s0
 8002a5a:	eef0 7a60 	vmov.f32	s15, s1
 8002a5e:	e00c      	b.n	8002a7a <compute_pri_res+0x9a>
  }

  // Return norm of the residual
  return vec_norm_inf(work->z_prev, work->data->m);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002a6c:	4608      	mov	r0, r1
 8002a6e:	f001 f99b 	bl	8003da8 <vec_norm_inf>
 8002a72:	eeb0 7a40 	vmov.f32	s14, s0
 8002a76:	eef0 7a60 	vmov.f32	s15, s1
}
 8002a7a:	eeb0 0a47 	vmov.f32	s0, s14
 8002a7e:	eef0 0a67 	vmov.f32	s1, s15
 8002a82:	3710      	adds	r7, #16
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	00000000 	.word	0x00000000
 8002a8c:	bff00000 	.word	0xbff00000

08002a90 <compute_pri_tol>:

c_float compute_pri_tol(OSQPWorkspace *work, c_float eps_abs, c_float eps_rel) {
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b08a      	sub	sp, #40	; 0x28
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6178      	str	r0, [r7, #20]
 8002a98:	ed87 0b02 	vstr	d0, [r7, #8]
 8002a9c:	ed87 1b00 	vstr	d1, [r7]
  c_float max_rel_eps, temp_rel_eps;

  // max_rel_eps = max(||z||, ||A x||)
  if (work->settings->scaling && !work->settings->scaled_termination) {
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aa4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	d030      	beq.n	8002b0e <compute_pri_tol+0x7e>
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ab0:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	d12a      	bne.n	8002b0e <compute_pri_tol+0x7e>
    // ||Einv * z||
    max_rel_eps =
      vec_scaled_norm_inf(work->scaling->Einv, work->z, work->data->m);
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002abc:	69d8      	ldr	r0, [r3, #28]
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	6999      	ldr	r1, [r3, #24]
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002aca:	f001 f8ec 	bl	8003ca6 <vec_scaled_norm_inf>
 8002ace:	ed87 0b08 	vstr	d0, [r7, #32]

    // ||Einv * A * x||
    temp_rel_eps = vec_scaled_norm_inf(work->scaling->Einv,
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ad6:	69d8      	ldr	r0, [r3, #28]
                                       work->Ax,
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	6a99      	ldr	r1, [r3, #40]	; 0x28
                                       work->data->m);
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	681b      	ldr	r3, [r3, #0]
    temp_rel_eps = vec_scaled_norm_inf(work->scaling->Einv,
 8002ae0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002ae4:	f001 f8df 	bl	8003ca6 <vec_scaled_norm_inf>
 8002ae8:	ed87 0b06 	vstr	d0, [r7, #24]

    // Choose maximum
    max_rel_eps = c_max(max_rel_eps, temp_rel_eps);
 8002aec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002af0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002af4:	f7fe f818 	bl	8000b28 <__aeabi_dcmpgt>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d002      	beq.n	8002b04 <compute_pri_tol+0x74>
 8002afe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002b02:	e001      	b.n	8002b08 <compute_pri_tol+0x78>
 8002b04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b08:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8002b0c:	e025      	b.n	8002b5a <compute_pri_tol+0xca>
  } else { // No unscaling required
    // ||z||
    max_rel_eps = vec_norm_inf(work->z, work->data->m);
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	6999      	ldr	r1, [r3, #24]
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002b1a:	4608      	mov	r0, r1
 8002b1c:	f001 f944 	bl	8003da8 <vec_norm_inf>
 8002b20:	ed87 0b08 	vstr	d0, [r7, #32]

    // ||A * x||
    temp_rel_eps = vec_norm_inf(work->Ax, work->data->m);
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002b30:	4608      	mov	r0, r1
 8002b32:	f001 f939 	bl	8003da8 <vec_norm_inf>
 8002b36:	ed87 0b06 	vstr	d0, [r7, #24]

    // Choose maximum
    max_rel_eps = c_max(max_rel_eps, temp_rel_eps);
 8002b3a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b3e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002b42:	f7fd fff1 	bl	8000b28 <__aeabi_dcmpgt>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d002      	beq.n	8002b52 <compute_pri_tol+0xc2>
 8002b4c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002b50:	e001      	b.n	8002b56 <compute_pri_tol+0xc6>
 8002b52:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b56:	e9c7 2308 	strd	r2, r3, [r7, #32]
  }

  // eps_prim
  return eps_abs + eps_rel * max_rel_eps;
 8002b5a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002b5e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002b62:	f7fd fd51 	bl	8000608 <__aeabi_dmul>
 8002b66:	4602      	mov	r2, r0
 8002b68:	460b      	mov	r3, r1
 8002b6a:	4610      	mov	r0, r2
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b72:	f7fd fb93 	bl	800029c <__adddf3>
 8002b76:	4602      	mov	r2, r0
 8002b78:	460b      	mov	r3, r1
 8002b7a:	ec43 2b17 	vmov	d7, r2, r3
}
 8002b7e:	eeb0 0a47 	vmov.f32	s0, s14
 8002b82:	eef0 0a67 	vmov.f32	s1, s15
 8002b86:	3728      	adds	r7, #40	; 0x28
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	0000      	movs	r0, r0
	...

08002b90 <compute_dua_res>:

c_float compute_dua_res(OSQPWorkspace *work, c_float *x, c_float *y) {
 8002b90:	b5b0      	push	{r4, r5, r7, lr}
 8002b92:	b088      	sub	sp, #32
 8002b94:	af04      	add	r7, sp, #16
 8002b96:	60f8      	str	r0, [r7, #12]
 8002b98:	60b9      	str	r1, [r7, #8]
 8002b9a:	607a      	str	r2, [r7, #4]
  // NB: Use x_prev as temporary vector
  // NB: Only upper triangular part of P is stored.
  // dr = q + A'*y + P*x

  // dr = q
  prea_vec_copy(work->data->q, work->x_prev, work->data->n);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	6998      	ldr	r0, [r3, #24]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	6a19      	ldr	r1, [r3, #32]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bae:	f001 f9ba 	bl	8003f26 <prea_vec_copy>

  // P * x (upper triangular part)
  mat_vec(work->data->P, x, work->Px, 0);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	6918      	ldr	r0, [r3, #16]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002bbc:	f04f 0200 	mov.w	r2, #0
 8002bc0:	f04f 0300 	mov.w	r3, #0
 8002bc4:	e9cd 2300 	strd	r2, r3, [sp]
 8002bc8:	460a      	mov	r2, r1
 8002bca:	68b9      	ldr	r1, [r7, #8]
 8002bcc:	f001 fa5b 	bl	8004086 <mat_vec>

  // P' * x (lower triangular part with no diagonal)
  mat_tpose_vec(work->data->P, x, work->Px, 1, 1);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	6918      	ldr	r0, [r3, #16]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002bda:	f04f 0201 	mov.w	r2, #1
 8002bde:	f04f 0300 	mov.w	r3, #0
 8002be2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002be6:	f04f 0201 	mov.w	r2, #1
 8002bea:	f04f 0300 	mov.w	r3, #0
 8002bee:	e9cd 2300 	strd	r2, r3, [sp]
 8002bf2:	460a      	mov	r2, r1
 8002bf4:	68b9      	ldr	r1, [r7, #8]
 8002bf6:	f001 fb6e 	bl	80042d6 <mat_tpose_vec>

  // dr += P * x (full P matrix)
  vec_add_scaled(work->x_prev, work->x_prev, work->Px, work->data->n, 1);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	6a18      	ldr	r0, [r3, #32]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6a19      	ldr	r1, [r3, #32]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c0e:	e9cd 2300 	strd	r2, r3, [sp]
 8002c12:	ed9f 0b37 	vldr	d0, [pc, #220]	; 8002cf0 <compute_dua_res+0x160>
 8002c16:	4622      	mov	r2, r4
 8002c18:	f000 fffe 	bl	8003c18 <vec_add_scaled>

  // dr += A' * y
  if (work->data->m > 0) {
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002c24:	2a01      	cmp	r2, #1
 8002c26:	f173 0300 	sbcs.w	r3, r3, #0
 8002c2a:	db25      	blt.n	8002c78 <compute_dua_res+0xe8>
    mat_tpose_vec(work->data->A, y, work->Aty, 0, 0);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	6958      	ldr	r0, [r3, #20]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c36:	f04f 0200 	mov.w	r2, #0
 8002c3a:	f04f 0300 	mov.w	r3, #0
 8002c3e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002c42:	f04f 0200 	mov.w	r2, #0
 8002c46:	f04f 0300 	mov.w	r3, #0
 8002c4a:	e9cd 2300 	strd	r2, r3, [sp]
 8002c4e:	460a      	mov	r2, r1
 8002c50:	6879      	ldr	r1, [r7, #4]
 8002c52:	f001 fb40 	bl	80042d6 <mat_tpose_vec>
    vec_add_scaled(work->x_prev, work->x_prev, work->Aty, work->data->n, 1);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	6a18      	ldr	r0, [r3, #32]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6a19      	ldr	r1, [r3, #32]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c6a:	e9cd 2300 	strd	r2, r3, [sp]
 8002c6e:	ed9f 0b20 	vldr	d0, [pc, #128]	; 8002cf0 <compute_dua_res+0x160>
 8002c72:	4622      	mov	r2, r4
 8002c74:	f000 ffd0 	bl	8003c18 <vec_add_scaled>
  }

  // If scaling active -> rescale residual
  if (work->settings->scaling && !work->settings->scaled_termination) {
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c7c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	d01f      	beq.n	8002cc4 <compute_dua_res+0x134>
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c88:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	d119      	bne.n	8002cc4 <compute_dua_res+0x134>
    return work->scaling->cinv * vec_scaled_norm_inf(work->scaling->Dinv,
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c94:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c9c:	6998      	ldr	r0, [r3, #24]
                                                     work->x_prev,
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	6a19      	ldr	r1, [r3, #32]
                                                     work->data->n);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
    return work->scaling->cinv * vec_scaled_norm_inf(work->scaling->Dinv,
 8002ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002caa:	f000 fffc 	bl	8003ca6 <vec_scaled_norm_inf>
 8002cae:	ec53 2b10 	vmov	r2, r3, d0
 8002cb2:	4620      	mov	r0, r4
 8002cb4:	4629      	mov	r1, r5
 8002cb6:	f7fd fca7 	bl	8000608 <__aeabi_dmul>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	ec43 2b17 	vmov	d7, r2, r3
 8002cc2:	e00c      	b.n	8002cde <compute_dua_res+0x14e>
  }

  return vec_norm_inf(work->x_prev, work->data->n);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6a19      	ldr	r1, [r3, #32]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cd0:	4608      	mov	r0, r1
 8002cd2:	f001 f869 	bl	8003da8 <vec_norm_inf>
 8002cd6:	eeb0 7a40 	vmov.f32	s14, s0
 8002cda:	eef0 7a60 	vmov.f32	s15, s1
}
 8002cde:	eeb0 0a47 	vmov.f32	s0, s14
 8002ce2:	eef0 0a67 	vmov.f32	s1, s15
 8002ce6:	3710      	adds	r7, #16
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bdb0      	pop	{r4, r5, r7, pc}
 8002cec:	f3af 8000 	nop.w
 8002cf0:	00000000 	.word	0x00000000
 8002cf4:	3ff00000 	.word	0x3ff00000

08002cf8 <compute_dua_tol>:

c_float compute_dua_tol(OSQPWorkspace *work, c_float eps_abs, c_float eps_rel) {
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b08a      	sub	sp, #40	; 0x28
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6178      	str	r0, [r7, #20]
 8002d00:	ed87 0b02 	vstr	d0, [r7, #8]
 8002d04:	ed87 1b00 	vstr	d1, [r7]
  c_float max_rel_eps, temp_rel_eps;

  // max_rel_eps = max(||q||, ||A' y|, ||P x||)
  if (work->settings->scaling && !work->settings->scaled_termination) {
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d0c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	d05a      	beq.n	8002dca <compute_dua_tol+0xd2>
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d18:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	d154      	bne.n	8002dca <compute_dua_tol+0xd2>
    // || Dinv q||
    max_rel_eps = vec_scaled_norm_inf(work->scaling->Dinv,
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d24:	6998      	ldr	r0, [r3, #24]
                                      work->data->q,
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	6999      	ldr	r1, [r3, #24]
                                      work->data->n);
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	681b      	ldr	r3, [r3, #0]
    max_rel_eps = vec_scaled_norm_inf(work->scaling->Dinv,
 8002d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d34:	f000 ffb7 	bl	8003ca6 <vec_scaled_norm_inf>
 8002d38:	ed87 0b08 	vstr	d0, [r7, #32]

    // || Dinv A' y ||
    temp_rel_eps = vec_scaled_norm_inf(work->scaling->Dinv,
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d40:	6998      	ldr	r0, [r3, #24]
                                       work->Aty,
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	6b19      	ldr	r1, [r3, #48]	; 0x30
                                       work->data->n);
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	681b      	ldr	r3, [r3, #0]
    temp_rel_eps = vec_scaled_norm_inf(work->scaling->Dinv,
 8002d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d4e:	f000 ffaa 	bl	8003ca6 <vec_scaled_norm_inf>
 8002d52:	ed87 0b06 	vstr	d0, [r7, #24]
    max_rel_eps = c_max(max_rel_eps, temp_rel_eps);
 8002d56:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d5a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002d5e:	f7fd fee3 	bl	8000b28 <__aeabi_dcmpgt>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d002      	beq.n	8002d6e <compute_dua_tol+0x76>
 8002d68:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002d6c:	e001      	b.n	8002d72 <compute_dua_tol+0x7a>
 8002d6e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d72:	e9c7 2308 	strd	r2, r3, [r7, #32]

    // || Dinv P x||
    temp_rel_eps = vec_scaled_norm_inf(work->scaling->Dinv,
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d7a:	6998      	ldr	r0, [r3, #24]
                                       work->Px,
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
                                       work->data->n);
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	681b      	ldr	r3, [r3, #0]
    temp_rel_eps = vec_scaled_norm_inf(work->scaling->Dinv,
 8002d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d88:	f000 ff8d 	bl	8003ca6 <vec_scaled_norm_inf>
 8002d8c:	ed87 0b06 	vstr	d0, [r7, #24]
    max_rel_eps = c_max(max_rel_eps, temp_rel_eps);
 8002d90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d94:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002d98:	f7fd fec6 	bl	8000b28 <__aeabi_dcmpgt>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d002      	beq.n	8002da8 <compute_dua_tol+0xb0>
 8002da2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002da6:	e001      	b.n	8002dac <compute_dua_tol+0xb4>
 8002da8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002dac:	e9c7 2308 	strd	r2, r3, [r7, #32]

    // Multiply by cinv
    max_rel_eps *= work->scaling->cinv;
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002db4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002db8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002dbc:	f7fd fc24 	bl	8000608 <__aeabi_dmul>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	460b      	mov	r3, r1
 8002dc4:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8002dc8:	e041      	b.n	8002e4e <compute_dua_tol+0x156>
  } else { // No scaling required
    // ||q||
    max_rel_eps = vec_norm_inf(work->data->q, work->data->n);
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	6999      	ldr	r1, [r3, #24]
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dd8:	4608      	mov	r0, r1
 8002dda:	f000 ffe5 	bl	8003da8 <vec_norm_inf>
 8002dde:	ed87 0b08 	vstr	d0, [r7, #32]

    // ||A'*y||
    temp_rel_eps = vec_norm_inf(work->Aty, work->data->n);
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dee:	4608      	mov	r0, r1
 8002df0:	f000 ffda 	bl	8003da8 <vec_norm_inf>
 8002df4:	ed87 0b06 	vstr	d0, [r7, #24]
    max_rel_eps  = c_max(max_rel_eps, temp_rel_eps);
 8002df8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002dfc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002e00:	f7fd fe92 	bl	8000b28 <__aeabi_dcmpgt>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d002      	beq.n	8002e10 <compute_dua_tol+0x118>
 8002e0a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002e0e:	e001      	b.n	8002e14 <compute_dua_tol+0x11c>
 8002e10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e14:	e9c7 2308 	strd	r2, r3, [r7, #32]

    // ||P*x||
    temp_rel_eps = vec_norm_inf(work->Px, work->data->n);
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e24:	4608      	mov	r0, r1
 8002e26:	f000 ffbf 	bl	8003da8 <vec_norm_inf>
 8002e2a:	ed87 0b06 	vstr	d0, [r7, #24]
    max_rel_eps  = c_max(max_rel_eps, temp_rel_eps);
 8002e2e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e32:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002e36:	f7fd fe77 	bl	8000b28 <__aeabi_dcmpgt>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d002      	beq.n	8002e46 <compute_dua_tol+0x14e>
 8002e40:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002e44:	e001      	b.n	8002e4a <compute_dua_tol+0x152>
 8002e46:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e4a:	e9c7 2308 	strd	r2, r3, [r7, #32]
  }

  // eps_dual
  return eps_abs + eps_rel * max_rel_eps;
 8002e4e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002e52:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002e56:	f7fd fbd7 	bl	8000608 <__aeabi_dmul>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	460b      	mov	r3, r1
 8002e5e:	4610      	mov	r0, r2
 8002e60:	4619      	mov	r1, r3
 8002e62:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e66:	f7fd fa19 	bl	800029c <__adddf3>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	ec43 2b17 	vmov	d7, r2, r3
}
 8002e72:	eeb0 0a47 	vmov.f32	s0, s14
 8002e76:	eef0 0a67 	vmov.f32	s1, s15
 8002e7a:	3728      	adds	r7, #40	; 0x28
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <is_primal_infeasible>:

c_int is_primal_infeasible(OSQPWorkspace *work, c_float eps_prim_inf) {
 8002e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e84:	b091      	sub	sp, #68	; 0x44
 8002e86:	af04      	add	r7, sp, #16
 8002e88:	6178      	str	r0, [r7, #20]
 8002e8a:	ed87 0b02 	vstr	d0, [r7, #8]
  // 2) u'*max(delta_y, 0) + l'*min(delta_y, 0) < eps * ||delta_y||
  //

  c_int i; // Index for loops
  c_float norm_delta_y;
  c_float ineq_lhs = 0.0;
 8002e8e:	f04f 0200 	mov.w	r2, #0
 8002e92:	f04f 0300 	mov.w	r3, #0
 8002e96:	e9c7 2306 	strd	r2, r3, [r7, #24]

  // Project delta_y onto the polar of the recession cone of [l,u]
  for (i = 0; i < work->data->m; i++) {
 8002e9a:	f04f 0200 	mov.w	r2, #0
 8002e9e:	f04f 0300 	mov.w	r3, #0
 8002ea2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8002ea6:	e08a      	b.n	8002fbe <is_primal_infeasible+0x13e>
    if (work->data->u[i] > OSQP_INFTY * MIN_SCALING) {          // Infinite upper bound
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	6a1a      	ldr	r2, [r3, #32]
 8002eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eb0:	00db      	lsls	r3, r3, #3
 8002eb2:	4413      	add	r3, r2
 8002eb4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002eb8:	a3dd      	add	r3, pc, #884	; (adr r3, 8003230 <is_primal_infeasible+0x3b0>)
 8002eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ebe:	f7fd fe33 	bl	8000b28 <__aeabi_dcmpgt>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d03f      	beq.n	8002f48 <is_primal_infeasible+0xc8>
      if (work->data->l[i] < -OSQP_INFTY * MIN_SCALING) {       // Infinite lower bound
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	69da      	ldr	r2, [r3, #28]
 8002ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ed0:	00db      	lsls	r3, r3, #3
 8002ed2:	4413      	add	r3, r2
 8002ed4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ed8:	a3d7      	add	r3, pc, #860	; (adr r3, 8003238 <is_primal_infeasible+0x3b8>)
 8002eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ede:	f7fd fe05 	bl	8000aec <__aeabi_dcmplt>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d00b      	beq.n	8002f00 <is_primal_infeasible+0x80>
        // Both bounds infinite
        work->delta_y[i] = 0.0;
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eee:	00db      	lsls	r3, r3, #3
 8002ef0:	18d1      	adds	r1, r2, r3
 8002ef2:	f04f 0200 	mov.w	r2, #0
 8002ef6:	f04f 0300 	mov.w	r3, #0
 8002efa:	e9c1 2300 	strd	r2, r3, [r1]
 8002efe:	e056      	b.n	8002fae <is_primal_infeasible+0x12e>
      } else {
        // Only upper bound infinite
        work->delta_y[i] = c_min(work->delta_y[i], 0.0);
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f06:	00db      	lsls	r3, r3, #3
 8002f08:	4413      	add	r3, r2
 8002f0a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002f0e:	f04f 0200 	mov.w	r2, #0
 8002f12:	f04f 0300 	mov.w	r3, #0
 8002f16:	f7fd fde9 	bl	8000aec <__aeabi_dcmplt>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d007      	beq.n	8002f30 <is_primal_infeasible+0xb0>
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f26:	00db      	lsls	r3, r3, #3
 8002f28:	4413      	add	r3, r2
 8002f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f2e:	e003      	b.n	8002f38 <is_primal_infeasible+0xb8>
 8002f30:	f04f 0200 	mov.w	r2, #0
 8002f34:	f04f 0300 	mov.w	r3, #0
 8002f38:	6979      	ldr	r1, [r7, #20]
 8002f3a:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8002f3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f3e:	00c9      	lsls	r1, r1, #3
 8002f40:	4401      	add	r1, r0
 8002f42:	e9c1 2300 	strd	r2, r3, [r1]
 8002f46:	e032      	b.n	8002fae <is_primal_infeasible+0x12e>
      }
    } else if (work->data->l[i] < -OSQP_INFTY * MIN_SCALING) {  // Infinite lower bound
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	69da      	ldr	r2, [r3, #28]
 8002f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f50:	00db      	lsls	r3, r3, #3
 8002f52:	4413      	add	r3, r2
 8002f54:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002f58:	a3b7      	add	r3, pc, #732	; (adr r3, 8003238 <is_primal_infeasible+0x3b8>)
 8002f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f5e:	f7fd fdc5 	bl	8000aec <__aeabi_dcmplt>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d022      	beq.n	8002fae <is_primal_infeasible+0x12e>
      // Only lower bound infinite
      work->delta_y[i] = c_max(work->delta_y[i], 0.0);
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f6e:	00db      	lsls	r3, r3, #3
 8002f70:	4413      	add	r3, r2
 8002f72:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002f76:	f04f 0200 	mov.w	r2, #0
 8002f7a:	f04f 0300 	mov.w	r3, #0
 8002f7e:	f7fd fdd3 	bl	8000b28 <__aeabi_dcmpgt>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d007      	beq.n	8002f98 <is_primal_infeasible+0x118>
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f8e:	00db      	lsls	r3, r3, #3
 8002f90:	4413      	add	r3, r2
 8002f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f96:	e003      	b.n	8002fa0 <is_primal_infeasible+0x120>
 8002f98:	f04f 0200 	mov.w	r2, #0
 8002f9c:	f04f 0300 	mov.w	r3, #0
 8002fa0:	6979      	ldr	r1, [r7, #20]
 8002fa2:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8002fa4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002fa6:	00c9      	lsls	r1, r1, #3
 8002fa8:	4401      	add	r1, r0
 8002faa:	e9c1 2300 	strd	r2, r3, [r1]
  for (i = 0; i < work->data->m; i++) {
 8002fae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002fb2:	f112 0801 	adds.w	r8, r2, #1
 8002fb6:	f143 0900 	adc.w	r9, r3, #0
 8002fba:	e9c7 890a 	strd	r8, r9, [r7, #40]	; 0x28
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002fc6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002fca:	4290      	cmp	r0, r2
 8002fcc:	eb71 0303 	sbcs.w	r3, r1, r3
 8002fd0:	f6ff af6a 	blt.w	8002ea8 <is_primal_infeasible+0x28>
    }
  }

  // Compute infinity norm of delta_y (unscale if necessary)
  if (work->settings->scaling && !work->settings->scaled_termination) {
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fd8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	d021      	beq.n	8003024 <is_primal_infeasible+0x1a4>
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fe4:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	d11b      	bne.n	8003024 <is_primal_infeasible+0x1a4>
    // Use work->Adelta_x as temporary vector
    vec_ew_prod(work->scaling->E, work->delta_y, work->Adelta_x, work->data->m);
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ff0:	68d8      	ldr	r0, [r3, #12]
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	6c5e      	ldr	r6, [r3, #68]	; 0x44
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003002:	e9cd 2300 	strd	r2, r3, [sp]
 8003006:	4632      	mov	r2, r6
 8003008:	f001 f802 	bl	8004010 <vec_ew_prod>
    norm_delta_y = vec_norm_inf(work->Adelta_x, work->data->m);
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003018:	4608      	mov	r0, r1
 800301a:	f000 fec5 	bl	8003da8 <vec_norm_inf>
 800301e:	ed87 0b08 	vstr	d0, [r7, #32]
 8003022:	e00a      	b.n	800303a <is_primal_infeasible+0x1ba>
  } else {
    norm_delta_y = vec_norm_inf(work->delta_y, work->data->m);
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003030:	4608      	mov	r0, r1
 8003032:	f000 feb9 	bl	8003da8 <vec_norm_inf>
 8003036:	ed87 0b08 	vstr	d0, [r7, #32]
  }

  if (norm_delta_y > OSQP_DIVISION_TOL) {
 800303a:	a381      	add	r3, pc, #516	; (adr r3, 8003240 <is_primal_infeasible+0x3c0>)
 800303c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003040:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003044:	f7fd fd70 	bl	8000b28 <__aeabi_dcmpgt>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	f000 80e1 	beq.w	8003212 <is_primal_infeasible+0x392>

    for (i = 0; i < work->data->m; i++) {
 8003050:	f04f 0200 	mov.w	r2, #0
 8003054:	f04f 0300 	mov.w	r3, #0
 8003058:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800305c:	e06a      	b.n	8003134 <is_primal_infeasible+0x2b4>
      ineq_lhs += work->data->u[i] * c_max(work->delta_y[i], 0) + \
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	6a1a      	ldr	r2, [r3, #32]
 8003064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003066:	00db      	lsls	r3, r3, #3
 8003068:	4413      	add	r3, r2
 800306a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003074:	00db      	lsls	r3, r3, #3
 8003076:	4413      	add	r3, r2
 8003078:	e9d3 0100 	ldrd	r0, r1, [r3]
 800307c:	f04f 0200 	mov.w	r2, #0
 8003080:	f04f 0300 	mov.w	r3, #0
 8003084:	f7fd fd50 	bl	8000b28 <__aeabi_dcmpgt>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d007      	beq.n	800309e <is_primal_infeasible+0x21e>
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003094:	00db      	lsls	r3, r3, #3
 8003096:	4413      	add	r3, r2
 8003098:	e9d3 0100 	ldrd	r0, r1, [r3]
 800309c:	e003      	b.n	80030a6 <is_primal_infeasible+0x226>
 800309e:	f04f 0000 	mov.w	r0, #0
 80030a2:	f04f 0100 	mov.w	r1, #0
 80030a6:	4642      	mov	r2, r8
 80030a8:	464b      	mov	r3, r9
 80030aa:	f7fd faad 	bl	8000608 <__aeabi_dmul>
 80030ae:	4602      	mov	r2, r0
 80030b0:	460b      	mov	r3, r1
 80030b2:	e9c7 2300 	strd	r2, r3, [r7]
                  work->data->l[i] * c_min(work->delta_y[i], 0);
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	69da      	ldr	r2, [r3, #28]
 80030bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030be:	00db      	lsls	r3, r3, #3
 80030c0:	4413      	add	r3, r2
 80030c2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030cc:	00db      	lsls	r3, r3, #3
 80030ce:	4413      	add	r3, r2
 80030d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80030d4:	f04f 0200 	mov.w	r2, #0
 80030d8:	f04f 0300 	mov.w	r3, #0
 80030dc:	f7fd fd06 	bl	8000aec <__aeabi_dcmplt>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d007      	beq.n	80030f6 <is_primal_infeasible+0x276>
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ec:	00db      	lsls	r3, r3, #3
 80030ee:	4413      	add	r3, r2
 80030f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80030f4:	e003      	b.n	80030fe <is_primal_infeasible+0x27e>
 80030f6:	f04f 0000 	mov.w	r0, #0
 80030fa:	f04f 0100 	mov.w	r1, #0
 80030fe:	4642      	mov	r2, r8
 8003100:	464b      	mov	r3, r9
 8003102:	f7fd fa81 	bl	8000608 <__aeabi_dmul>
 8003106:	4602      	mov	r2, r0
 8003108:	460b      	mov	r3, r1
      ineq_lhs += work->data->u[i] * c_max(work->delta_y[i], 0) + \
 800310a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800310e:	f7fd f8c5 	bl	800029c <__adddf3>
 8003112:	4602      	mov	r2, r0
 8003114:	460b      	mov	r3, r1
 8003116:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800311a:	f7fd f8bf 	bl	800029c <__adddf3>
 800311e:	4602      	mov	r2, r0
 8003120:	460b      	mov	r3, r1
 8003122:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for (i = 0; i < work->data->m; i++) {
 8003126:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800312a:	1c54      	adds	r4, r2, #1
 800312c:	f143 0500 	adc.w	r5, r3, #0
 8003130:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800313c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003140:	4290      	cmp	r0, r2
 8003142:	eb71 0303 	sbcs.w	r3, r1, r3
 8003146:	db8a      	blt.n	800305e <is_primal_infeasible+0x1de>
    }

    // Check if the condition is satisfied: ineq_lhs < -eps
    if (ineq_lhs < eps_prim_inf * norm_delta_y) {
 8003148:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800314c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003150:	f7fd fa5a 	bl	8000608 <__aeabi_dmul>
 8003154:	4602      	mov	r2, r0
 8003156:	460b      	mov	r3, r1
 8003158:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800315c:	f7fd fcc6 	bl	8000aec <__aeabi_dcmplt>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d055      	beq.n	8003212 <is_primal_infeasible+0x392>
      // Compute and return ||A'delta_y|| < eps_prim_inf
      mat_tpose_vec(work->data->A, work->delta_y, work->Atdelta_y, 0, 0);
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	6958      	ldr	r0, [r3, #20]
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8003174:	f04f 0200 	mov.w	r2, #0
 8003178:	f04f 0300 	mov.w	r3, #0
 800317c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003180:	f04f 0200 	mov.w	r2, #0
 8003184:	f04f 0300 	mov.w	r3, #0
 8003188:	e9cd 2300 	strd	r2, r3, [sp]
 800318c:	4622      	mov	r2, r4
 800318e:	f001 f8a2 	bl	80042d6 <mat_tpose_vec>

      // Unscale if necessary
      if (work->settings->scaling && !work->settings->scaled_termination) {
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003196:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800319a:	4313      	orrs	r3, r2
 800319c:	d015      	beq.n	80031ca <is_primal_infeasible+0x34a>
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031a2:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80031a6:	4313      	orrs	r3, r2
 80031a8:	d10f      	bne.n	80031ca <is_primal_infeasible+0x34a>
        vec_ew_prod(work->scaling->Dinv,
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ae:	6998      	ldr	r0, [r3, #24]
                    work->Atdelta_y,
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	6b99      	ldr	r1, [r3, #56]	; 0x38
        vec_ew_prod(work->scaling->Dinv,
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	6b9c      	ldr	r4, [r3, #56]	; 0x38
                    work->Atdelta_y,
                    work->data->n);
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	681b      	ldr	r3, [r3, #0]
        vec_ew_prod(work->scaling->Dinv,
 80031bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031c0:	e9cd 2300 	strd	r2, r3, [sp]
 80031c4:	4622      	mov	r2, r4
 80031c6:	f000 ff23 	bl	8004010 <vec_ew_prod>
      }

      return vec_norm_inf(work->Atdelta_y, work->data->n) < eps_prim_inf * norm_delta_y;
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031d6:	4608      	mov	r0, r1
 80031d8:	f000 fde6 	bl	8003da8 <vec_norm_inf>
 80031dc:	ec55 4b10 	vmov	r4, r5, d0
 80031e0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80031e4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80031e8:	f7fd fa0e 	bl	8000608 <__aeabi_dmul>
 80031ec:	4602      	mov	r2, r0
 80031ee:	460b      	mov	r3, r1
 80031f0:	2101      	movs	r1, #1
 80031f2:	460e      	mov	r6, r1
 80031f4:	4620      	mov	r0, r4
 80031f6:	4629      	mov	r1, r5
 80031f8:	f7fd fc78 	bl	8000aec <__aeabi_dcmplt>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d101      	bne.n	8003206 <is_primal_infeasible+0x386>
 8003202:	2300      	movs	r3, #0
 8003204:	461e      	mov	r6, r3
 8003206:	b2f3      	uxtb	r3, r6
 8003208:	b2db      	uxtb	r3, r3
 800320a:	2200      	movs	r2, #0
 800320c:	469a      	mov	sl, r3
 800320e:	4693      	mov	fp, r2
 8003210:	e003      	b.n	800321a <is_primal_infeasible+0x39a>
    }
  }

  // Conditions not satisfied -> not primal infeasible
  return 0;
 8003212:	f04f 0a00 	mov.w	sl, #0
 8003216:	f04f 0b00 	mov.w	fp, #0
}
 800321a:	4652      	mov	r2, sl
 800321c:	465b      	mov	r3, fp
 800321e:	4610      	mov	r0, r2
 8003220:	4619      	mov	r1, r3
 8003222:	3734      	adds	r7, #52	; 0x34
 8003224:	46bd      	mov	sp, r7
 8003226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800322a:	bf00      	nop
 800322c:	f3af 8000 	nop.w
 8003230:	b7320335 	.word	0xb7320335
 8003234:	4554adf4 	.word	0x4554adf4
 8003238:	b7320335 	.word	0xb7320335
 800323c:	c554adf4 	.word	0xc554adf4
 8003240:	feebc29f 	.word	0xfeebc29f
 8003244:	39b4484b 	.word	0x39b4484b

08003248 <is_dual_infeasible>:

c_int is_dual_infeasible(OSQPWorkspace *work, c_float eps_dual_inf) {
 8003248:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800324c:	b091      	sub	sp, #68	; 0x44
 800324e:	af04      	add	r7, sp, #16
 8003250:	6178      	str	r0, [r7, #20]
 8003252:	ed87 0b02 	vstr	d0, [r7, #8]
  c_int   i; // Index for loops
  c_float norm_delta_x;
  c_float cost_scaling;

  // Compute norm of delta_x
  if (work->settings->scaling && !work->settings->scaled_termination) { // Unscale
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800325a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800325e:	4313      	orrs	r3, r2
 8003260:	d019      	beq.n	8003296 <is_dual_infeasible+0x4e>
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003266:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800326a:	4313      	orrs	r3, r2
 800326c:	d113      	bne.n	8003296 <is_dual_infeasible+0x4e>
                                                                        // if
                                                                        // necessary
    norm_delta_x = vec_scaled_norm_inf(work->scaling->D,
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003272:	6898      	ldr	r0, [r3, #8]
                                       work->delta_x,
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
                                       work->data->n);
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	681b      	ldr	r3, [r3, #0]
    norm_delta_x = vec_scaled_norm_inf(work->scaling->D,
 800327c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003280:	f000 fd11 	bl	8003ca6 <vec_scaled_norm_inf>
 8003284:	ed87 0b08 	vstr	d0, [r7, #32]
    cost_scaling = work->scaling->c;
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800328c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003290:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8003294:	e00f      	b.n	80032b6 <is_dual_infeasible+0x6e>
  } else {
    norm_delta_x = vec_norm_inf(work->delta_x, work->data->n);
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032a2:	4608      	mov	r0, r1
 80032a4:	f000 fd80 	bl	8003da8 <vec_norm_inf>
 80032a8:	ed87 0b08 	vstr	d0, [r7, #32]
    cost_scaling = 1.0;
 80032ac:	f04f 0200 	mov.w	r2, #0
 80032b0:	4ba7      	ldr	r3, [pc, #668]	; (8003550 <is_dual_infeasible+0x308>)
 80032b2:	e9c7 2306 	strd	r2, r3, [r7, #24]
  }

  // Prevent 0 division || delta_x || > 0
  if (norm_delta_x > OSQP_DIVISION_TOL) {
 80032b6:	a3a0      	add	r3, pc, #640	; (adr r3, 8003538 <is_dual_infeasible+0x2f0>)
 80032b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032bc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80032c0:	f7fd fc32 	bl	8000b28 <__aeabi_dcmpgt>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	f000 812a 	beq.w	8003520 <is_dual_infeasible+0x2d8>
    // Normalize delta_x by its norm

    /* vec_mult_scalar(work->delta_x, 1./norm_delta_x, work->data->n); */

    // Check first if q'*delta_x < 0
    if (vec_prod(work->data->q, work->delta_x, work->data->n) <
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	6998      	ldr	r0, [r3, #24]
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032de:	f000 fe51 	bl	8003f84 <vec_prod>
 80032e2:	ec59 8b10 	vmov	r8, r9, d0
        cost_scaling * eps_dual_inf * norm_delta_x) {
 80032e6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80032ea:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80032ee:	f7fd f98b 	bl	8000608 <__aeabi_dmul>
 80032f2:	4602      	mov	r2, r0
 80032f4:	460b      	mov	r3, r1
 80032f6:	4610      	mov	r0, r2
 80032f8:	4619      	mov	r1, r3
 80032fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80032fe:	f7fd f983 	bl	8000608 <__aeabi_dmul>
 8003302:	4602      	mov	r2, r0
 8003304:	460b      	mov	r3, r1
    if (vec_prod(work->data->q, work->delta_x, work->data->n) <
 8003306:	4640      	mov	r0, r8
 8003308:	4649      	mov	r1, r9
 800330a:	f7fd fbef 	bl	8000aec <__aeabi_dcmplt>
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	f000 8105 	beq.w	8003520 <is_dual_infeasible+0x2d8>
      // Compute product P * delta_x (NB: P is store in upper triangular form)
      mat_vec(work->data->P, work->delta_x, work->Pdelta_x, 0);
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	6918      	ldr	r0, [r3, #16]
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	6c1e      	ldr	r6, [r3, #64]	; 0x40
 8003324:	f04f 0200 	mov.w	r2, #0
 8003328:	f04f 0300 	mov.w	r3, #0
 800332c:	e9cd 2300 	strd	r2, r3, [sp]
 8003330:	4632      	mov	r2, r6
 8003332:	f000 fea8 	bl	8004086 <mat_vec>
      mat_tpose_vec(work->data->P, work->delta_x, work->Pdelta_x, 1, 1);
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	6918      	ldr	r0, [r3, #16]
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	6c1e      	ldr	r6, [r3, #64]	; 0x40
 8003344:	f04f 0201 	mov.w	r2, #1
 8003348:	f04f 0300 	mov.w	r3, #0
 800334c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003350:	f04f 0201 	mov.w	r2, #1
 8003354:	f04f 0300 	mov.w	r3, #0
 8003358:	e9cd 2300 	strd	r2, r3, [sp]
 800335c:	4632      	mov	r2, r6
 800335e:	f000 ffba 	bl	80042d6 <mat_tpose_vec>

      // Scale if necessary
      if (work->settings->scaling && !work->settings->scaled_termination) {
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003366:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800336a:	4313      	orrs	r3, r2
 800336c:	d015      	beq.n	800339a <is_dual_infeasible+0x152>
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003372:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8003376:	4313      	orrs	r3, r2
 8003378:	d10f      	bne.n	800339a <is_dual_infeasible+0x152>
        vec_ew_prod(work->scaling->Dinv,
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800337e:	6998      	ldr	r0, [r3, #24]
                    work->Pdelta_x,
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	6c19      	ldr	r1, [r3, #64]	; 0x40
        vec_ew_prod(work->scaling->Dinv,
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	6c1e      	ldr	r6, [r3, #64]	; 0x40
                    work->Pdelta_x,
                    work->data->n);
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	681b      	ldr	r3, [r3, #0]
        vec_ew_prod(work->scaling->Dinv,
 800338c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003390:	e9cd 2300 	strd	r2, r3, [sp]
 8003394:	4632      	mov	r2, r6
 8003396:	f000 fe3b 	bl	8004010 <vec_ew_prod>
      }

      // Check if || P * delta_x || = 0
      if (vec_norm_inf(work->Pdelta_x, work->data->n) <
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033a6:	4608      	mov	r0, r1
 80033a8:	f000 fcfe 	bl	8003da8 <vec_norm_inf>
 80033ac:	ec59 8b10 	vmov	r8, r9, d0
          cost_scaling * eps_dual_inf * norm_delta_x) {
 80033b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80033b4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80033b8:	f7fd f926 	bl	8000608 <__aeabi_dmul>
 80033bc:	4602      	mov	r2, r0
 80033be:	460b      	mov	r3, r1
 80033c0:	4610      	mov	r0, r2
 80033c2:	4619      	mov	r1, r3
 80033c4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80033c8:	f7fd f91e 	bl	8000608 <__aeabi_dmul>
 80033cc:	4602      	mov	r2, r0
 80033ce:	460b      	mov	r3, r1
      if (vec_norm_inf(work->Pdelta_x, work->data->n) <
 80033d0:	4640      	mov	r0, r8
 80033d2:	4649      	mov	r1, r9
 80033d4:	f7fd fb8a 	bl	8000aec <__aeabi_dcmplt>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	f000 80a0 	beq.w	8003520 <is_dual_infeasible+0x2d8>
        // Compute A * delta_x
        mat_vec(work->data->A, work->delta_x, work->Adelta_x, 0);
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	6958      	ldr	r0, [r3, #20]
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	6c5e      	ldr	r6, [r3, #68]	; 0x44
 80033ee:	f04f 0200 	mov.w	r2, #0
 80033f2:	f04f 0300 	mov.w	r3, #0
 80033f6:	e9cd 2300 	strd	r2, r3, [sp]
 80033fa:	4632      	mov	r2, r6
 80033fc:	f000 fe43 	bl	8004086 <mat_vec>

        // Scale if necessary
        if (work->settings->scaling && !work->settings->scaled_termination) {
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003404:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003408:	4313      	orrs	r3, r2
 800340a:	d015      	beq.n	8003438 <is_dual_infeasible+0x1f0>
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003410:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8003414:	4313      	orrs	r3, r2
 8003416:	d10f      	bne.n	8003438 <is_dual_infeasible+0x1f0>
          vec_ew_prod(work->scaling->Einv,
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800341c:	69d8      	ldr	r0, [r3, #28]
                      work->Adelta_x,
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	6c59      	ldr	r1, [r3, #68]	; 0x44
          vec_ew_prod(work->scaling->Einv,
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	6c5e      	ldr	r6, [r3, #68]	; 0x44
                      work->Adelta_x,
                      work->data->m);
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	681b      	ldr	r3, [r3, #0]
          vec_ew_prod(work->scaling->Einv,
 800342a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800342e:	e9cd 2300 	strd	r2, r3, [sp]
 8003432:	4632      	mov	r2, r6
 8003434:	f000 fdec 	bl	8004010 <vec_ew_prod>
        }

        // De Morgan Law Applied to dual infeasibility conditions for A * x
        // NB: Note that MIN_SCALING is used to adjust the infinity value
        //     in case the problem is scaled.
        for (i = 0; i < work->data->m; i++) {
 8003438:	f04f 0200 	mov.w	r2, #0
 800343c:	f04f 0300 	mov.w	r3, #0
 8003440:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8003444:	e05d      	b.n	8003502 <is_dual_infeasible+0x2ba>
          if (((work->data->u[i] < OSQP_INFTY * MIN_SCALING) &&
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	6a1a      	ldr	r2, [r3, #32]
 800344c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800344e:	00db      	lsls	r3, r3, #3
 8003450:	4413      	add	r3, r2
 8003452:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003456:	a33a      	add	r3, pc, #232	; (adr r3, 8003540 <is_dual_infeasible+0x2f8>)
 8003458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800345c:	f7fd fb46 	bl	8000aec <__aeabi_dcmplt>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d015      	beq.n	8003492 <is_dual_infeasible+0x24a>
               (work->Adelta_x[i] >  eps_dual_inf * norm_delta_x)) ||
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800346a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800346c:	00db      	lsls	r3, r3, #3
 800346e:	4413      	add	r3, r2
 8003470:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003474:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003478:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800347c:	f7fd f8c4 	bl	8000608 <__aeabi_dmul>
 8003480:	4602      	mov	r2, r0
 8003482:	460b      	mov	r3, r1
          if (((work->data->u[i] < OSQP_INFTY * MIN_SCALING) &&
 8003484:	4640      	mov	r0, r8
 8003486:	4649      	mov	r1, r9
 8003488:	f7fd fb4e 	bl	8000b28 <__aeabi_dcmpgt>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d12b      	bne.n	80034ea <is_dual_infeasible+0x2a2>
              ((work->data->l[i] > -OSQP_INFTY * MIN_SCALING) &&
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	69da      	ldr	r2, [r3, #28]
 8003498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800349a:	00db      	lsls	r3, r3, #3
 800349c:	4413      	add	r3, r2
 800349e:	e9d3 0100 	ldrd	r0, r1, [r3]
               (work->Adelta_x[i] >  eps_dual_inf * norm_delta_x)) ||
 80034a2:	a329      	add	r3, pc, #164	; (adr r3, 8003548 <is_dual_infeasible+0x300>)
 80034a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034a8:	f7fd fb3e 	bl	8000b28 <__aeabi_dcmpgt>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d020      	beq.n	80034f4 <is_dual_infeasible+0x2ac>
               (work->Adelta_x[i] < -eps_dual_inf * norm_delta_x))) {
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034b8:	00db      	lsls	r3, r3, #3
 80034ba:	4413      	add	r3, r2
 80034bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	603b      	str	r3, [r7, #0]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80034ca:	607b      	str	r3, [r7, #4]
 80034cc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80034d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80034d4:	f7fd f898 	bl	8000608 <__aeabi_dmul>
 80034d8:	4602      	mov	r2, r0
 80034da:	460b      	mov	r3, r1
              ((work->data->l[i] > -OSQP_INFTY * MIN_SCALING) &&
 80034dc:	4640      	mov	r0, r8
 80034de:	4649      	mov	r1, r9
 80034e0:	f7fd fb04 	bl	8000aec <__aeabi_dcmplt>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d004      	beq.n	80034f4 <is_dual_infeasible+0x2ac>
            // At least one condition not satisfied -> not dual infeasible
            return 0;
 80034ea:	f04f 0200 	mov.w	r2, #0
 80034ee:	f04f 0300 	mov.w	r3, #0
 80034f2:	e019      	b.n	8003528 <is_dual_infeasible+0x2e0>
        for (i = 0; i < work->data->m; i++) {
 80034f4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80034f8:	1c54      	adds	r4, r2, #1
 80034fa:	f143 0500 	adc.w	r5, r3, #0
 80034fe:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800350a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800350e:	4290      	cmp	r0, r2
 8003510:	eb71 0303 	sbcs.w	r3, r1, r3
 8003514:	db97      	blt.n	8003446 <is_dual_infeasible+0x1fe>
          }
        }

        // All conditions passed -> dual infeasible
        return 1;
 8003516:	f04f 0201 	mov.w	r2, #1
 800351a:	f04f 0300 	mov.w	r3, #0
 800351e:	e003      	b.n	8003528 <is_dual_infeasible+0x2e0>
      }
    }
  }

  // Conditions not satisfied -> not dual infeasible
  return 0;
 8003520:	f04f 0200 	mov.w	r2, #0
 8003524:	f04f 0300 	mov.w	r3, #0
}
 8003528:	4610      	mov	r0, r2
 800352a:	4619      	mov	r1, r3
 800352c:	3734      	adds	r7, #52	; 0x34
 800352e:	46bd      	mov	sp, r7
 8003530:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003534:	f3af 8000 	nop.w
 8003538:	feebc29f 	.word	0xfeebc29f
 800353c:	39b4484b 	.word	0x39b4484b
 8003540:	b7320335 	.word	0xb7320335
 8003544:	4554adf4 	.word	0x4554adf4
 8003548:	b7320335 	.word	0xb7320335
 800354c:	c554adf4 	.word	0xc554adf4
 8003550:	3ff00000 	.word	0x3ff00000

08003554 <has_solution>:

c_int has_solution(OSQPInfo * info){
 8003554:	b4b0      	push	{r4, r5, r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]

  return ((info->status_val != OSQP_PRIMAL_INFEASIBLE) &&
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
      (info->status_val != OSQP_PRIMAL_INFEASIBLE_INACCURATE) &&
      (info->status_val != OSQP_DUAL_INFEASIBLE) &&
      (info->status_val != OSQP_DUAL_INFEASIBLE_INACCURATE) &&
 8003562:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003566:	bf08      	it	eq
 8003568:	f112 0f03 	cmneq.w	r2, #3
 800356c:	d01f      	beq.n	80035ae <has_solution+0x5a>
      (info->status_val != OSQP_PRIMAL_INFEASIBLE_INACCURATE) &&
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
  return ((info->status_val != OSQP_PRIMAL_INFEASIBLE) &&
 8003574:	1ed1      	subs	r1, r2, #3
 8003576:	430b      	orrs	r3, r1
 8003578:	d019      	beq.n	80035ae <has_solution+0x5a>
      (info->status_val != OSQP_DUAL_INFEASIBLE) &&
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
      (info->status_val != OSQP_PRIMAL_INFEASIBLE_INACCURATE) &&
 8003580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003584:	bf08      	it	eq
 8003586:	f112 0f04 	cmneq.w	r2, #4
 800358a:	d010      	beq.n	80035ae <has_solution+0x5a>
      (info->status_val != OSQP_DUAL_INFEASIBLE_INACCURATE) &&
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
      (info->status_val != OSQP_DUAL_INFEASIBLE) &&
 8003592:	1f11      	subs	r1, r2, #4
 8003594:	430b      	orrs	r3, r1
 8003596:	d00a      	beq.n	80035ae <has_solution+0x5a>
      (info->status_val != OSQP_NON_CVX));
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
      (info->status_val != OSQP_DUAL_INFEASIBLE_INACCURATE) &&
 800359e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035a2:	bf08      	it	eq
 80035a4:	f112 0f07 	cmneq.w	r2, #7
 80035a8:	d001      	beq.n	80035ae <has_solution+0x5a>
 80035aa:	2301      	movs	r3, #1
 80035ac:	e000      	b.n	80035b0 <has_solution+0x5c>
 80035ae:	2300      	movs	r3, #0
 80035b0:	17da      	asrs	r2, r3, #31
 80035b2:	461c      	mov	r4, r3
 80035b4:	4615      	mov	r5, r2
 80035b6:	4622      	mov	r2, r4
 80035b8:	462b      	mov	r3, r5

}
 80035ba:	4610      	mov	r0, r2
 80035bc:	4619      	mov	r1, r3
 80035be:	370c      	adds	r7, #12
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bcb0      	pop	{r4, r5, r7}
 80035c4:	4770      	bx	lr
	...

080035c8 <store_solution>:

void store_solution(OSQPWorkspace *work) {
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b082      	sub	sp, #8
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
#ifndef EMBEDDED
  c_float norm_vec;
#endif /* ifndef EMBEDDED */

  if (has_solution(work->info)) {
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035d4:	4618      	mov	r0, r3
 80035d6:	f7ff ffbd 	bl	8003554 <has_solution>
 80035da:	4602      	mov	r2, r0
 80035dc:	460b      	mov	r3, r1
 80035de:	4313      	orrs	r3, r2
 80035e0:	d01f      	beq.n	8003622 <store_solution+0x5a>
    prea_vec_copy(work->x, work->solution->x, work->data->n); // primal
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6918      	ldr	r0, [r3, #16]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ea:	6819      	ldr	r1, [r3, #0]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035f4:	f000 fc97 	bl	8003f26 <prea_vec_copy>
    prea_vec_copy(work->y, work->solution->y, work->data->m); // dual
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6958      	ldr	r0, [r3, #20]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003600:	6859      	ldr	r1, [r3, #4]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800360a:	f000 fc8c 	bl	8003f26 <prea_vec_copy>

    // Unscale solution if scaling has been performed
    if (work->settings->scaling)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003612:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003616:	4313      	orrs	r3, r2
 8003618:	d01e      	beq.n	8003658 <store_solution+0x90>
      unscale_solution(work);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f001 fdea 	bl	80051f4 <unscale_solution>
#endif /* ifndef EMBEDDED */

    // Cold start iterates to 0 for next runs (they cannot start from NaN)
    cold_start(work);
  }
}
 8003620:	e01a      	b.n	8003658 <store_solution+0x90>
    vec_set_scalar(work->solution->x, OSQP_NAN, work->data->n);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003626:	6819      	ldr	r1, [r3, #0]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003630:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 8003660 <store_solution+0x98>
 8003634:	4608      	mov	r0, r1
 8003636:	f000 fc15 	bl	8003e64 <vec_set_scalar>
    vec_set_scalar(work->solution->y, OSQP_NAN, work->data->m);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800363e:	6859      	ldr	r1, [r3, #4]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003648:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8003660 <store_solution+0x98>
 800364c:	4608      	mov	r0, r1
 800364e:	f000 fc09 	bl	8003e64 <vec_set_scalar>
    cold_start(work);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f7fe fef4 	bl	8002440 <cold_start>
}
 8003658:	bf00      	nop
 800365a:	3708      	adds	r7, #8
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}
 8003660:	00000000 	.word	0x00000000
 8003664:	41dff000 	.word	0x41dff000

08003668 <update_info>:

void update_info(OSQPWorkspace *work,
                 c_int          iter,
                 c_int          compute_objective,
                 c_int          polish) {
 8003668:	b580      	push	{r7, lr}
 800366a:	b08a      	sub	sp, #40	; 0x28
 800366c:	af00      	add	r7, sp, #0
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	e9c7 2300 	strd	r2, r3, [r7]
# ifdef PROFILING
    run_time = &work->info->polish_time;
# endif /* ifdef PROFILING */
  } else {
#endif // EMBEDDED
  x                = work->x;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	691b      	ldr	r3, [r3, #16]
 8003678:	627b      	str	r3, [r7, #36]	; 0x24
  y                = work->y;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	695b      	ldr	r3, [r3, #20]
 800367e:	623b      	str	r3, [r7, #32]
  z                = work->z;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	699b      	ldr	r3, [r3, #24]
 8003684:	61fb      	str	r3, [r7, #28]
  obj_val          = &work->info->obj_val;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800368a:	3330      	adds	r3, #48	; 0x30
 800368c:	61bb      	str	r3, [r7, #24]
  pri_res          = &work->info->pri_res;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003692:	3338      	adds	r3, #56	; 0x38
 8003694:	617b      	str	r3, [r7, #20]
  dua_res          = &work->info->dua_res;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800369a:	3340      	adds	r3, #64	; 0x40
 800369c:	613b      	str	r3, [r7, #16]
  work->info->iter = iter; // Update iteration number
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6e19      	ldr	r1, [r3, #96]	; 0x60
 80036a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80036a6:	e9c1 2300 	strd	r2, r3, [r1]

#endif /* ifndef EMBEDDED */


  // Compute the objective if needed
  if (compute_objective) {
 80036aa:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80036ae:	4313      	orrs	r3, r2
 80036b0:	d00a      	beq.n	80036c8 <update_info+0x60>
    *obj_val = compute_obj_val(work, x);
 80036b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036b4:	68f8      	ldr	r0, [r7, #12]
 80036b6:	f7ff f953 	bl	8002960 <compute_obj_val>
 80036ba:	eeb0 7a40 	vmov.f32	s14, s0
 80036be:	eef0 7a60 	vmov.f32	s15, s1
 80036c2:	69bb      	ldr	r3, [r7, #24]
 80036c4:	ed83 7b00 	vstr	d7, [r3]
  }

  // Compute primal residual
  if (work->data->m == 0) {
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	d107      	bne.n	80036e4 <update_info+0x7c>
    // No constraints -> Always primal feasible
    *pri_res = 0.;
 80036d4:	6979      	ldr	r1, [r7, #20]
 80036d6:	f04f 0200 	mov.w	r2, #0
 80036da:	f04f 0300 	mov.w	r3, #0
 80036de:	e9c1 2300 	strd	r2, r3, [r1]
 80036e2:	e00b      	b.n	80036fc <update_info+0x94>
  } else {
    *pri_res = compute_pri_res(work, x, z);
 80036e4:	69fa      	ldr	r2, [r7, #28]
 80036e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036e8:	68f8      	ldr	r0, [r7, #12]
 80036ea:	f7ff f979 	bl	80029e0 <compute_pri_res>
 80036ee:	eeb0 7a40 	vmov.f32	s14, s0
 80036f2:	eef0 7a60 	vmov.f32	s15, s1
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	ed83 7b00 	vstr	d7, [r3]
  }

  // Compute dual residual
  *dua_res = compute_dua_res(work, x, y);
 80036fc:	6a3a      	ldr	r2, [r7, #32]
 80036fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003700:	68f8      	ldr	r0, [r7, #12]
 8003702:	f7ff fa45 	bl	8002b90 <compute_dua_res>
 8003706:	eeb0 7a40 	vmov.f32	s14, s0
 800370a:	eef0 7a60 	vmov.f32	s15, s1
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	ed83 7b00 	vstr	d7, [r3]
#endif /* ifdef PROFILING */

#ifdef PRINTING
  work->summary_printed = 0; // The just updated info have not been printed
#endif /* ifdef PRINTING */
}
 8003714:	bf00      	nop
 8003716:	3728      	adds	r7, #40	; 0x28
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}

0800371c <reset_info>:


void reset_info(OSQPInfo *info) {
 800371c:	b580      	push	{r7, lr}
 800371e:	b082      	sub	sp, #8
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
# endif /* ifndef EMBEDDED */

  // NB: We do not reset the setup_time because it is performed only once
#endif /* ifdef PROFILING */

  update_status(info, OSQP_UNSOLVED); // Problem is unsolved
 8003724:	f06f 0209 	mvn.w	r2, #9
 8003728:	f04f 33ff 	mov.w	r3, #4294967295
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f000 f805 	bl	800373c <update_status>

#if EMBEDDED != 1
  info->rho_updates = 0;              // Rho updates are now 0
#endif /* if EMBEDDED != 1 */
}
 8003732:	bf00      	nop
 8003734:	3708      	adds	r7, #8
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
	...

0800373c <update_status>:

void update_status(OSQPInfo *info, c_int status_val) {
 800373c:	b580      	push	{r7, lr}
 800373e:	b084      	sub	sp, #16
 8003740:	af00      	add	r7, sp, #0
 8003742:	60f8      	str	r0, [r7, #12]
 8003744:	e9c7 2300 	strd	r2, r3, [r7]
  // Update status value
  info->status_val = status_val;
 8003748:	68f9      	ldr	r1, [r7, #12]
 800374a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800374e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

  // Update status string depending on status val
  if (status_val == OSQP_SOLVED) c_strcpy(info->status, "solved");
 8003752:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003756:	1e51      	subs	r1, r2, #1
 8003758:	430b      	orrs	r3, r1
 800375a:	d105      	bne.n	8003768 <update_status+0x2c>
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	3308      	adds	r3, #8
 8003760:	4942      	ldr	r1, [pc, #264]	; (800386c <update_status+0x130>)
 8003762:	4618      	mov	r0, r3
 8003764:	f001 fd89 	bl	800527a <c_strcpy>

  if (status_val == OSQP_SOLVED_INACCURATE) c_strcpy(info->status,
 8003768:	e9d7 2300 	ldrd	r2, r3, [r7]
 800376c:	1e91      	subs	r1, r2, #2
 800376e:	430b      	orrs	r3, r1
 8003770:	d106      	bne.n	8003780 <update_status+0x44>
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	3308      	adds	r3, #8
 8003776:	493e      	ldr	r1, [pc, #248]	; (8003870 <update_status+0x134>)
 8003778:	4618      	mov	r0, r3
 800377a:	f001 fd7e 	bl	800527a <c_strcpy>
#endif /* ifdef PROFILING */
  else if (status_val == OSQP_SIGINT) c_strcpy(info->status, "interrupted");

  else if (status_val == OSQP_NON_CVX) c_strcpy(info->status, "problem non convex");

}
 800377e:	e070      	b.n	8003862 <update_status+0x126>
  else if (status_val == OSQP_PRIMAL_INFEASIBLE) c_strcpy(info->status,
 8003780:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003788:	bf08      	it	eq
 800378a:	f112 0f03 	cmneq.w	r2, #3
 800378e:	d106      	bne.n	800379e <update_status+0x62>
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	3308      	adds	r3, #8
 8003794:	4937      	ldr	r1, [pc, #220]	; (8003874 <update_status+0x138>)
 8003796:	4618      	mov	r0, r3
 8003798:	f001 fd6f 	bl	800527a <c_strcpy>
}
 800379c:	e061      	b.n	8003862 <update_status+0x126>
  else if (status_val == OSQP_PRIMAL_INFEASIBLE_INACCURATE) c_strcpy(info->status,
 800379e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80037a2:	1ed1      	subs	r1, r2, #3
 80037a4:	430b      	orrs	r3, r1
 80037a6:	d106      	bne.n	80037b6 <update_status+0x7a>
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	3308      	adds	r3, #8
 80037ac:	4932      	ldr	r1, [pc, #200]	; (8003878 <update_status+0x13c>)
 80037ae:	4618      	mov	r0, r3
 80037b0:	f001 fd63 	bl	800527a <c_strcpy>
}
 80037b4:	e055      	b.n	8003862 <update_status+0x126>
  else if (status_val == OSQP_UNSOLVED) c_strcpy(info->status, "unsolved");
 80037b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80037ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037be:	bf08      	it	eq
 80037c0:	f112 0f0a 	cmneq.w	r2, #10
 80037c4:	d106      	bne.n	80037d4 <update_status+0x98>
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	3308      	adds	r3, #8
 80037ca:	492c      	ldr	r1, [pc, #176]	; (800387c <update_status+0x140>)
 80037cc:	4618      	mov	r0, r3
 80037ce:	f001 fd54 	bl	800527a <c_strcpy>
}
 80037d2:	e046      	b.n	8003862 <update_status+0x126>
  else if (status_val == OSQP_DUAL_INFEASIBLE) c_strcpy(info->status,
 80037d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80037d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037dc:	bf08      	it	eq
 80037de:	f112 0f04 	cmneq.w	r2, #4
 80037e2:	d106      	bne.n	80037f2 <update_status+0xb6>
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	3308      	adds	r3, #8
 80037e8:	4925      	ldr	r1, [pc, #148]	; (8003880 <update_status+0x144>)
 80037ea:	4618      	mov	r0, r3
 80037ec:	f001 fd45 	bl	800527a <c_strcpy>
}
 80037f0:	e037      	b.n	8003862 <update_status+0x126>
  else if (status_val == OSQP_DUAL_INFEASIBLE_INACCURATE) c_strcpy(info->status,
 80037f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80037f6:	1f11      	subs	r1, r2, #4
 80037f8:	430b      	orrs	r3, r1
 80037fa:	d106      	bne.n	800380a <update_status+0xce>
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	3308      	adds	r3, #8
 8003800:	4920      	ldr	r1, [pc, #128]	; (8003884 <update_status+0x148>)
 8003802:	4618      	mov	r0, r3
 8003804:	f001 fd39 	bl	800527a <c_strcpy>
}
 8003808:	e02b      	b.n	8003862 <update_status+0x126>
  else if (status_val == OSQP_MAX_ITER_REACHED) c_strcpy(info->status,
 800380a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800380e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003812:	bf08      	it	eq
 8003814:	f112 0f02 	cmneq.w	r2, #2
 8003818:	d106      	bne.n	8003828 <update_status+0xec>
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	3308      	adds	r3, #8
 800381e:	491a      	ldr	r1, [pc, #104]	; (8003888 <update_status+0x14c>)
 8003820:	4618      	mov	r0, r3
 8003822:	f001 fd2a 	bl	800527a <c_strcpy>
}
 8003826:	e01c      	b.n	8003862 <update_status+0x126>
  else if (status_val == OSQP_SIGINT) c_strcpy(info->status, "interrupted");
 8003828:	e9d7 2300 	ldrd	r2, r3, [r7]
 800382c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003830:	bf08      	it	eq
 8003832:	f112 0f05 	cmneq.w	r2, #5
 8003836:	d106      	bne.n	8003846 <update_status+0x10a>
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	3308      	adds	r3, #8
 800383c:	4913      	ldr	r1, [pc, #76]	; (800388c <update_status+0x150>)
 800383e:	4618      	mov	r0, r3
 8003840:	f001 fd1b 	bl	800527a <c_strcpy>
}
 8003844:	e00d      	b.n	8003862 <update_status+0x126>
  else if (status_val == OSQP_NON_CVX) c_strcpy(info->status, "problem non convex");
 8003846:	e9d7 2300 	ldrd	r2, r3, [r7]
 800384a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800384e:	bf08      	it	eq
 8003850:	f112 0f07 	cmneq.w	r2, #7
 8003854:	d105      	bne.n	8003862 <update_status+0x126>
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	3308      	adds	r3, #8
 800385a:	490d      	ldr	r1, [pc, #52]	; (8003890 <update_status+0x154>)
 800385c:	4618      	mov	r0, r3
 800385e:	f001 fd0c 	bl	800527a <c_strcpy>
}
 8003862:	bf00      	nop
 8003864:	3710      	adds	r7, #16
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	0800a45c 	.word	0x0800a45c
 8003870:	0800a464 	.word	0x0800a464
 8003874:	0800a478 	.word	0x0800a478
 8003878:	0800a48c 	.word	0x0800a48c
 800387c:	0800a4ac 	.word	0x0800a4ac
 8003880:	0800a4b8 	.word	0x0800a4b8
 8003884:	0800a4c8 	.word	0x0800a4c8
 8003888:	0800a4e4 	.word	0x0800a4e4
 800388c:	0800a500 	.word	0x0800a500
 8003890:	0800a50c 	.word	0x0800a50c
 8003894:	00000000 	.word	0x00000000

08003898 <check_termination>:

c_int check_termination(OSQPWorkspace *work, c_int approximate) {
 8003898:	b590      	push	{r4, r7, lr}
 800389a:	b09d      	sub	sp, #116	; 0x74
 800389c:	af02      	add	r7, sp, #8
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	e9c7 2300 	strd	r2, r3, [r7]
  c_int   exitflag;
  c_int   prim_res_check, dual_res_check, prim_inf_check, dual_inf_check;
  c_float eps_abs, eps_rel;

  // Initialize variables to 0
  exitflag       = 0;
 80038a4:	f04f 0200 	mov.w	r2, #0
 80038a8:	f04f 0300 	mov.w	r3, #0
 80038ac:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  prim_res_check = 0; dual_res_check = 0;
 80038b0:	f04f 0200 	mov.w	r2, #0
 80038b4:	f04f 0300 	mov.w	r3, #0
 80038b8:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 80038bc:	f04f 0200 	mov.w	r2, #0
 80038c0:	f04f 0300 	mov.w	r3, #0
 80038c4:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  prim_inf_check = 0; dual_inf_check = 0;
 80038c8:	f04f 0200 	mov.w	r2, #0
 80038cc:	f04f 0300 	mov.w	r3, #0
 80038d0:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 80038d4:	f04f 0200 	mov.w	r2, #0
 80038d8:	f04f 0300 	mov.w	r3, #0
 80038dc:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

  // Initialize tolerances
  eps_abs      = work->settings->eps_abs;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038e4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80038e8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  eps_rel      = work->settings->eps_rel;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038f0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80038f4:	e9c7 2308 	strd	r2, r3, [r7, #32]
  eps_prim_inf = work->settings->eps_prim_inf;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038fc:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8003900:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
  eps_dual_inf = work->settings->eps_dual_inf;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003908:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800390c:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

  // If residuals are too large, the problem is probably non convex
  if ((work->info->pri_res > OSQP_INFTY) ||
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003914:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8003918:	a3af      	add	r3, pc, #700	; (adr r3, 8003bd8 <check_termination+0x340>)
 800391a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800391e:	f7fd f903 	bl	8000b28 <__aeabi_dcmpgt>
 8003922:	4603      	mov	r3, r0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d10b      	bne.n	8003940 <check_termination+0xa8>
      (work->info->dua_res > OSQP_INFTY)){
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800392c:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
  if ((work->info->pri_res > OSQP_INFTY) ||
 8003930:	a3a9      	add	r3, pc, #676	; (adr r3, 8003bd8 <check_termination+0x340>)
 8003932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003936:	f7fd f8f7 	bl	8000b28 <__aeabi_dcmpgt>
 800393a:	4603      	mov	r3, r0
 800393c:	2b00      	cmp	r3, #0
 800393e:	d014      	beq.n	800396a <check_termination+0xd2>
    // Looks like residuals are diverging. Probably the problem is non convex!
    // Terminate and report it
    update_status(work->info, OSQP_NON_CVX);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8003944:	f06f 0206 	mvn.w	r2, #6
 8003948:	f04f 33ff 	mov.w	r3, #4294967295
 800394c:	4608      	mov	r0, r1
 800394e:	f7ff fef5 	bl	800373c <update_status>
    work->info->obj_val = OSQP_NAN;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8003956:	a3a5      	add	r3, pc, #660	; (adr r3, 8003bec <check_termination+0x354>)
 8003958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800395c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    return 1;
 8003960:	f04f 0201 	mov.w	r2, #1
 8003964:	f04f 0300 	mov.w	r3, #0
 8003968:	e131      	b.n	8003bce <check_termination+0x336>
  }

  // If approximate solution required, increase tolerances by 10
  if (approximate) {
 800396a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800396e:	4313      	orrs	r3, r2
 8003970:	d02b      	beq.n	80039ca <check_termination+0x132>
    eps_abs      *= 10;
 8003972:	f04f 0200 	mov.w	r2, #0
 8003976:	4b9c      	ldr	r3, [pc, #624]	; (8003be8 <check_termination+0x350>)
 8003978:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800397c:	f7fc fe44 	bl	8000608 <__aeabi_dmul>
 8003980:	4602      	mov	r2, r0
 8003982:	460b      	mov	r3, r1
 8003984:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    eps_rel      *= 10;
 8003988:	f04f 0200 	mov.w	r2, #0
 800398c:	4b96      	ldr	r3, [pc, #600]	; (8003be8 <check_termination+0x350>)
 800398e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003992:	f7fc fe39 	bl	8000608 <__aeabi_dmul>
 8003996:	4602      	mov	r2, r0
 8003998:	460b      	mov	r3, r1
 800399a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    eps_prim_inf *= 10;
 800399e:	f04f 0200 	mov.w	r2, #0
 80039a2:	4b91      	ldr	r3, [pc, #580]	; (8003be8 <check_termination+0x350>)
 80039a4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80039a8:	f7fc fe2e 	bl	8000608 <__aeabi_dmul>
 80039ac:	4602      	mov	r2, r0
 80039ae:	460b      	mov	r3, r1
 80039b0:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
    eps_dual_inf *= 10;
 80039b4:	f04f 0200 	mov.w	r2, #0
 80039b8:	4b8b      	ldr	r3, [pc, #556]	; (8003be8 <check_termination+0x350>)
 80039ba:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80039be:	f7fc fe23 	bl	8000608 <__aeabi_dmul>
 80039c2:	4602      	mov	r2, r0
 80039c4:	460b      	mov	r3, r1
 80039c6:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
  }

  // Check residuals
  if (work->data->m == 0) {
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	d106      	bne.n	80039e4 <check_termination+0x14c>
    prim_res_check = 1; // No constraints -> Primal feasibility always satisfied
 80039d6:	f04f 0201 	mov.w	r2, #1
 80039da:	f04f 0300 	mov.w	r3, #0
 80039de:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 80039e2:	e021      	b.n	8003a28 <check_termination+0x190>
  }
  else {
    // Compute primal tolerance
    eps_prim = compute_pri_tol(work, eps_abs, eps_rel);
 80039e4:	ed97 1b08 	vldr	d1, [r7, #32]
 80039e8:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 80039ec:	68f8      	ldr	r0, [r7, #12]
 80039ee:	f7ff f84f 	bl	8002a90 <compute_pri_tol>
 80039f2:	ed87 0b06 	vstr	d0, [r7, #24]

    // Primal feasibility check
    if (work->info->pri_res < eps_prim) {
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039fa:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80039fe:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003a02:	f7fd f891 	bl	8000b28 <__aeabi_dcmpgt>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d006      	beq.n	8003a1a <check_termination+0x182>
      prim_res_check = 1;
 8003a0c:	f04f 0201 	mov.w	r2, #1
 8003a10:	f04f 0300 	mov.w	r3, #0
 8003a14:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 8003a18:	e006      	b.n	8003a28 <check_termination+0x190>
    } else {
      // Primal infeasibility check
      prim_inf_check = is_primal_infeasible(work, eps_prim_inf);
 8003a1a:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 8003a1e:	68f8      	ldr	r0, [r7, #12]
 8003a20:	f7ff fa2e 	bl	8002e80 <is_primal_infeasible>
 8003a24:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
    }
  } // End check if m == 0

  // Compute dual tolerance
  eps_dual = compute_dua_tol(work, eps_abs, eps_rel);
 8003a28:	ed97 1b08 	vldr	d1, [r7, #32]
 8003a2c:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 8003a30:	68f8      	ldr	r0, [r7, #12]
 8003a32:	f7ff f961 	bl	8002cf8 <compute_dua_tol>
 8003a36:	ed87 0b04 	vstr	d0, [r7, #16]

  // Dual feasibility check
  if (work->info->dua_res < eps_dual) {
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a3e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8003a42:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003a46:	f7fd f86f 	bl	8000b28 <__aeabi_dcmpgt>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d006      	beq.n	8003a5e <check_termination+0x1c6>
    dual_res_check = 1;
 8003a50:	f04f 0201 	mov.w	r2, #1
 8003a54:	f04f 0300 	mov.w	r3, #0
 8003a58:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8003a5c:	e006      	b.n	8003a6c <check_termination+0x1d4>
  } else {
    // Check dual infeasibility
    dual_inf_check = is_dual_infeasible(work, eps_dual_inf);
 8003a5e:	ed97 0b16 	vldr	d0, [r7, #88]	; 0x58
 8003a62:	68f8      	ldr	r0, [r7, #12]
 8003a64:	f7ff fbf0 	bl	8003248 <is_dual_infeasible>
 8003a68:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
  }

  // Compare checks to determine solver status
  if (prim_res_check && dual_res_check) {
 8003a6c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003a70:	4313      	orrs	r3, r2
 8003a72:	d021      	beq.n	8003ab8 <check_termination+0x220>
 8003a74:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	d01d      	beq.n	8003ab8 <check_termination+0x220>
    // Update final information
    if (approximate) {
 8003a7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a80:	4313      	orrs	r3, r2
 8003a82:	d009      	beq.n	8003a98 <check_termination+0x200>
      update_status(work->info, OSQP_SOLVED_INACCURATE);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8003a88:	f04f 0202 	mov.w	r2, #2
 8003a8c:	f04f 0300 	mov.w	r3, #0
 8003a90:	4608      	mov	r0, r1
 8003a92:	f7ff fe53 	bl	800373c <update_status>
 8003a96:	e008      	b.n	8003aaa <check_termination+0x212>
    } else {
      update_status(work->info, OSQP_SOLVED);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8003a9c:	f04f 0201 	mov.w	r2, #1
 8003aa0:	f04f 0300 	mov.w	r3, #0
 8003aa4:	4608      	mov	r0, r1
 8003aa6:	f7ff fe49 	bl	800373c <update_status>
    }
    exitflag = 1;
 8003aaa:	f04f 0201 	mov.w	r2, #1
 8003aae:	f04f 0300 	mov.w	r3, #0
 8003ab2:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 8003ab6:	e088      	b.n	8003bca <check_termination+0x332>
  }
  else if (prim_inf_check) {
 8003ab8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003abc:	4313      	orrs	r3, r2
 8003abe:	d040      	beq.n	8003b42 <check_termination+0x2aa>
    // Update final information
    if (approximate) {
 8003ac0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	d009      	beq.n	8003adc <check_termination+0x244>
      update_status(work->info, OSQP_PRIMAL_INFEASIBLE_INACCURATE);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8003acc:	f04f 0203 	mov.w	r2, #3
 8003ad0:	f04f 0300 	mov.w	r3, #0
 8003ad4:	4608      	mov	r0, r1
 8003ad6:	f7ff fe31 	bl	800373c <update_status>
 8003ada:	e008      	b.n	8003aee <check_termination+0x256>
    } else {
      update_status(work->info, OSQP_PRIMAL_INFEASIBLE);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8003ae0:	f06f 0202 	mvn.w	r2, #2
 8003ae4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ae8:	4608      	mov	r0, r1
 8003aea:	f7ff fe27 	bl	800373c <update_status>
    }

    if (work->settings->scaling && !work->settings->scaled_termination) {
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003af2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	d015      	beq.n	8003b26 <check_termination+0x28e>
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003afe:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8003b02:	4313      	orrs	r3, r2
 8003b04:	d10f      	bne.n	8003b26 <check_termination+0x28e>
      // Update infeasibility certificate
      vec_ew_prod(work->scaling->E, work->delta_y, work->delta_y, work->data->m);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b0a:	68d8      	ldr	r0, [r3, #12]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003b1c:	e9cd 2300 	strd	r2, r3, [sp]
 8003b20:	4622      	mov	r2, r4
 8003b22:	f000 fa75 	bl	8004010 <vec_ew_prod>
    }
    work->info->obj_val = OSQP_INFTY;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8003b2a:	a32b      	add	r3, pc, #172	; (adr r3, 8003bd8 <check_termination+0x340>)
 8003b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b30:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    exitflag            = 1;
 8003b34:	f04f 0201 	mov.w	r2, #1
 8003b38:	f04f 0300 	mov.w	r3, #0
 8003b3c:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 8003b40:	e043      	b.n	8003bca <check_termination+0x332>
  }
  else if (dual_inf_check) {
 8003b42:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003b46:	4313      	orrs	r3, r2
 8003b48:	d03f      	beq.n	8003bca <check_termination+0x332>
    // Update final information
    if (approximate) {
 8003b4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	d009      	beq.n	8003b66 <check_termination+0x2ce>
      update_status(work->info, OSQP_DUAL_INFEASIBLE_INACCURATE);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8003b56:	f04f 0204 	mov.w	r2, #4
 8003b5a:	f04f 0300 	mov.w	r3, #0
 8003b5e:	4608      	mov	r0, r1
 8003b60:	f7ff fdec 	bl	800373c <update_status>
 8003b64:	e008      	b.n	8003b78 <check_termination+0x2e0>
    } else {
      update_status(work->info, OSQP_DUAL_INFEASIBLE);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8003b6a:	f06f 0203 	mvn.w	r2, #3
 8003b6e:	f04f 33ff 	mov.w	r3, #4294967295
 8003b72:	4608      	mov	r0, r1
 8003b74:	f7ff fde2 	bl	800373c <update_status>
    }

    if (work->settings->scaling && !work->settings->scaled_termination) {
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b7c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003b80:	4313      	orrs	r3, r2
 8003b82:	d015      	beq.n	8003bb0 <check_termination+0x318>
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b88:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	d10f      	bne.n	8003bb0 <check_termination+0x318>
      // Update infeasibility certificate
      vec_ew_prod(work->scaling->D, work->delta_x, work->delta_x, work->data->n);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b94:	6898      	ldr	r0, [r3, #8]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ba6:	e9cd 2300 	strd	r2, r3, [sp]
 8003baa:	4622      	mov	r2, r4
 8003bac:	f000 fa30 	bl	8004010 <vec_ew_prod>
    }
    work->info->obj_val = -OSQP_INFTY;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8003bb4:	a30a      	add	r3, pc, #40	; (adr r3, 8003be0 <check_termination+0x348>)
 8003bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bba:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    exitflag            = 1;
 8003bbe:	f04f 0201 	mov.w	r2, #1
 8003bc2:	f04f 0300 	mov.w	r3, #0
 8003bc6:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  }

  return exitflag;
 8003bca:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
}
 8003bce:	4610      	mov	r0, r2
 8003bd0:	4619      	mov	r1, r3
 8003bd2:	376c      	adds	r7, #108	; 0x6c
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd90      	pop	{r4, r7, pc}
 8003bd8:	39a08cea 	.word	0x39a08cea
 8003bdc:	46293e59 	.word	0x46293e59
 8003be0:	39a08cea 	.word	0x39a08cea
 8003be4:	c6293e59 	.word	0xc6293e59
 8003be8:	40240000 	.word	0x40240000
 8003bec:	00000000 	.word	0x00000000
 8003bf0:	41dff000 	.word	0x41dff000

08003bf4 <_osqp_error>:
  "Solver workspace not initialized.",
};


c_int _osqp_error(enum osqp_error_type error_code,
		 const char * function_name) {
 8003bf4:	b4b0      	push	{r4, r5, r7}
 8003bf6:	b083      	sub	sp, #12
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	6039      	str	r1, [r7, #0]
 8003bfe:	71fb      	strb	r3, [r7, #7]
# ifdef PRINTING
  c_print("ERROR in %s: %s\n", function_name, OSQP_ERROR_MESSAGE[error_code-1]);
# endif
  return (c_int)error_code;
 8003c00:	79fb      	ldrb	r3, [r7, #7]
 8003c02:	2200      	movs	r2, #0
 8003c04:	461c      	mov	r4, r3
 8003c06:	4615      	mov	r5, r2
 8003c08:	4622      	mov	r2, r4
 8003c0a:	462b      	mov	r3, r5
}
 8003c0c:	4610      	mov	r0, r2
 8003c0e:	4619      	mov	r1, r3
 8003c10:	370c      	adds	r7, #12
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bcb0      	pop	{r4, r5, r7}
 8003c16:	4770      	bx	lr

08003c18 <vec_add_scaled>:

void vec_add_scaled(c_float       *c,
                    const c_float *a,
                    const c_float *b,
                    c_int          n,
                    c_float        sc) {
 8003c18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003c1c:	b089      	sub	sp, #36	; 0x24
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	6178      	str	r0, [r7, #20]
 8003c22:	6139      	str	r1, [r7, #16]
 8003c24:	60fa      	str	r2, [r7, #12]
 8003c26:	ed87 0b00 	vstr	d0, [r7]
  c_int i;

  for (i = 0; i < n; i++) {
 8003c2a:	f04f 0200 	mov.w	r2, #0
 8003c2e:	f04f 0300 	mov.w	r3, #0
 8003c32:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8003c36:	e028      	b.n	8003c8a <vec_add_scaled+0x72>
    c[i] =  a[i] + sc * b[i];
 8003c38:	69bb      	ldr	r3, [r7, #24]
 8003c3a:	00db      	lsls	r3, r3, #3
 8003c3c:	693a      	ldr	r2, [r7, #16]
 8003c3e:	4413      	add	r3, r2
 8003c40:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003c44:	69bb      	ldr	r3, [r7, #24]
 8003c46:	00db      	lsls	r3, r3, #3
 8003c48:	68fa      	ldr	r2, [r7, #12]
 8003c4a:	4413      	add	r3, r2
 8003c4c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003c50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c54:	f7fc fcd8 	bl	8000608 <__aeabi_dmul>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	460b      	mov	r3, r1
 8003c5c:	4610      	mov	r0, r2
 8003c5e:	4619      	mov	r1, r3
 8003c60:	69bb      	ldr	r3, [r7, #24]
 8003c62:	00db      	lsls	r3, r3, #3
 8003c64:	697a      	ldr	r2, [r7, #20]
 8003c66:	18d6      	adds	r6, r2, r3
 8003c68:	4602      	mov	r2, r0
 8003c6a:	460b      	mov	r3, r1
 8003c6c:	4640      	mov	r0, r8
 8003c6e:	4649      	mov	r1, r9
 8003c70:	f7fc fb14 	bl	800029c <__adddf3>
 8003c74:	4602      	mov	r2, r0
 8003c76:	460b      	mov	r3, r1
 8003c78:	e9c6 2300 	strd	r2, r3, [r6]
  for (i = 0; i < n; i++) {
 8003c7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c80:	1c54      	adds	r4, r2, #1
 8003c82:	f143 0500 	adc.w	r5, r3, #0
 8003c86:	e9c7 4506 	strd	r4, r5, [r7, #24]
 8003c8a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003c8e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003c92:	4290      	cmp	r0, r2
 8003c94:	eb71 0303 	sbcs.w	r3, r1, r3
 8003c98:	dbce      	blt.n	8003c38 <vec_add_scaled+0x20>
  }
}
 8003c9a:	bf00      	nop
 8003c9c:	bf00      	nop
 8003c9e:	3724      	adds	r7, #36	; 0x24
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08003ca6 <vec_scaled_norm_inf>:

c_float vec_scaled_norm_inf(const c_float *S, const c_float *v, c_int l) {
 8003ca6:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003caa:	b08a      	sub	sp, #40	; 0x28
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	60f8      	str	r0, [r7, #12]
 8003cb0:	60b9      	str	r1, [r7, #8]
 8003cb2:	e9c7 2300 	strd	r2, r3, [r7]
  c_int   i;
  c_float abs_Sv_i;
  c_float max = 0.0;
 8003cb6:	f04f 0200 	mov.w	r2, #0
 8003cba:	f04f 0300 	mov.w	r3, #0
 8003cbe:	e9c7 2306 	strd	r2, r3, [r7, #24]

  for (i = 0; i < l; i++) {
 8003cc2:	f04f 0200 	mov.w	r2, #0
 8003cc6:	f04f 0300 	mov.w	r3, #0
 8003cca:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8003cce:	e057      	b.n	8003d80 <vec_scaled_norm_inf+0xda>
    abs_Sv_i = c_absval(S[i] * v[i]);
 8003cd0:	6a3b      	ldr	r3, [r7, #32]
 8003cd2:	00db      	lsls	r3, r3, #3
 8003cd4:	68fa      	ldr	r2, [r7, #12]
 8003cd6:	4413      	add	r3, r2
 8003cd8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003cdc:	6a3b      	ldr	r3, [r7, #32]
 8003cde:	00db      	lsls	r3, r3, #3
 8003ce0:	68ba      	ldr	r2, [r7, #8]
 8003ce2:	4413      	add	r3, r2
 8003ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ce8:	f7fc fc8e 	bl	8000608 <__aeabi_dmul>
 8003cec:	4602      	mov	r2, r0
 8003cee:	460b      	mov	r3, r1
 8003cf0:	4610      	mov	r0, r2
 8003cf2:	4619      	mov	r1, r3
 8003cf4:	f04f 0200 	mov.w	r2, #0
 8003cf8:	f04f 0300 	mov.w	r3, #0
 8003cfc:	f7fc fef6 	bl	8000aec <__aeabi_dcmplt>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d013      	beq.n	8003d2e <vec_scaled_norm_inf+0x88>
 8003d06:	6a3b      	ldr	r3, [r7, #32]
 8003d08:	00db      	lsls	r3, r3, #3
 8003d0a:	68fa      	ldr	r2, [r7, #12]
 8003d0c:	4413      	add	r3, r2
 8003d0e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003d12:	6a3b      	ldr	r3, [r7, #32]
 8003d14:	00db      	lsls	r3, r3, #3
 8003d16:	68ba      	ldr	r2, [r7, #8]
 8003d18:	4413      	add	r3, r2
 8003d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d1e:	f7fc fc73 	bl	8000608 <__aeabi_dmul>
 8003d22:	4602      	mov	r2, r0
 8003d24:	460b      	mov	r3, r1
 8003d26:	4614      	mov	r4, r2
 8003d28:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8003d2c:	e011      	b.n	8003d52 <vec_scaled_norm_inf+0xac>
 8003d2e:	6a3b      	ldr	r3, [r7, #32]
 8003d30:	00db      	lsls	r3, r3, #3
 8003d32:	68fa      	ldr	r2, [r7, #12]
 8003d34:	4413      	add	r3, r2
 8003d36:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003d3a:	6a3b      	ldr	r3, [r7, #32]
 8003d3c:	00db      	lsls	r3, r3, #3
 8003d3e:	68ba      	ldr	r2, [r7, #8]
 8003d40:	4413      	add	r3, r2
 8003d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d46:	f7fc fc5f 	bl	8000608 <__aeabi_dmul>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	460b      	mov	r3, r1
 8003d4e:	4614      	mov	r4, r2
 8003d50:	461d      	mov	r5, r3
 8003d52:	e9c7 4504 	strd	r4, r5, [r7, #16]

    if (abs_Sv_i > max) max = abs_Sv_i;
 8003d56:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d5a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003d5e:	f7fc fee3 	bl	8000b28 <__aeabi_dcmpgt>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d003      	beq.n	8003d70 <vec_scaled_norm_inf+0xca>
 8003d68:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003d6c:	e9c7 2306 	strd	r2, r3, [r7, #24]
  for (i = 0; i < l; i++) {
 8003d70:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003d74:	f112 0801 	adds.w	r8, r2, #1
 8003d78:	f143 0900 	adc.w	r9, r3, #0
 8003d7c:	e9c7 8908 	strd	r8, r9, [r7, #32]
 8003d80:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003d84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d88:	4290      	cmp	r0, r2
 8003d8a:	eb71 0303 	sbcs.w	r3, r1, r3
 8003d8e:	db9f      	blt.n	8003cd0 <vec_scaled_norm_inf+0x2a>
  }
  return max;
 8003d90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d94:	ec43 2b17 	vmov	d7, r2, r3
}
 8003d98:	eeb0 0a47 	vmov.f32	s0, s14
 8003d9c:	eef0 0a67 	vmov.f32	s1, s15
 8003da0:	3728      	adds	r7, #40	; 0x28
 8003da2:	46bd      	mov	sp, r7
 8003da4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08003da8 <vec_norm_inf>:

c_float vec_norm_inf(const c_float *v, c_int l) {
 8003da8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003dac:	b08a      	sub	sp, #40	; 0x28
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	60f8      	str	r0, [r7, #12]
 8003db2:	e9c7 2300 	strd	r2, r3, [r7]
  c_int   i;
  c_float abs_v_i;
  c_float max = 0.0;
 8003db6:	f04f 0200 	mov.w	r2, #0
 8003dba:	f04f 0300 	mov.w	r3, #0
 8003dbe:	e9c7 2306 	strd	r2, r3, [r7, #24]

  for (i = 0; i < l; i++) {
 8003dc2:	f04f 0200 	mov.w	r2, #0
 8003dc6:	f04f 0300 	mov.w	r3, #0
 8003dca:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8003dce:	e035      	b.n	8003e3c <vec_norm_inf+0x94>
    abs_v_i = c_absval(v[i]);
 8003dd0:	6a3b      	ldr	r3, [r7, #32]
 8003dd2:	00db      	lsls	r3, r3, #3
 8003dd4:	68fa      	ldr	r2, [r7, #12]
 8003dd6:	4413      	add	r3, r2
 8003dd8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003ddc:	f04f 0200 	mov.w	r2, #0
 8003de0:	f04f 0300 	mov.w	r3, #0
 8003de4:	f7fc fe82 	bl	8000aec <__aeabi_dcmplt>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d009      	beq.n	8003e02 <vec_norm_inf+0x5a>
 8003dee:	6a3b      	ldr	r3, [r7, #32]
 8003df0:	00db      	lsls	r3, r3, #3
 8003df2:	68fa      	ldr	r2, [r7, #12]
 8003df4:	4413      	add	r3, r2
 8003df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dfa:	4614      	mov	r4, r2
 8003dfc:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8003e00:	e005      	b.n	8003e0e <vec_norm_inf+0x66>
 8003e02:	6a3b      	ldr	r3, [r7, #32]
 8003e04:	00db      	lsls	r3, r3, #3
 8003e06:	68fa      	ldr	r2, [r7, #12]
 8003e08:	4413      	add	r3, r2
 8003e0a:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003e0e:	e9c7 4504 	strd	r4, r5, [r7, #16]

    if (abs_v_i > max) max = abs_v_i;
 8003e12:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e16:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003e1a:	f7fc fe85 	bl	8000b28 <__aeabi_dcmpgt>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d003      	beq.n	8003e2c <vec_norm_inf+0x84>
 8003e24:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003e28:	e9c7 2306 	strd	r2, r3, [r7, #24]
  for (i = 0; i < l; i++) {
 8003e2c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003e30:	f112 0801 	adds.w	r8, r2, #1
 8003e34:	f143 0900 	adc.w	r9, r3, #0
 8003e38:	e9c7 8908 	strd	r8, r9, [r7, #32]
 8003e3c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003e40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e44:	4290      	cmp	r0, r2
 8003e46:	eb71 0303 	sbcs.w	r3, r1, r3
 8003e4a:	dbc1      	blt.n	8003dd0 <vec_norm_inf+0x28>
  }
  return max;
 8003e4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e50:	ec43 2b17 	vmov	d7, r2, r3
}
 8003e54:	eeb0 0a47 	vmov.f32	s0, s14
 8003e58:	eef0 0a67 	vmov.f32	s1, s15
 8003e5c:	3728      	adds	r7, #40	; 0x28
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08003e64 <vec_set_scalar>:
  for (i = 0; i < n; i++) {
    a[i] = sc;
  }
}

void vec_set_scalar(c_float *a, c_float sc, c_int n) {
 8003e64:	b4b0      	push	{r4, r5, r7}
 8003e66:	b089      	sub	sp, #36	; 0x24
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6178      	str	r0, [r7, #20]
 8003e6c:	ed87 0b02 	vstr	d0, [r7, #8]
 8003e70:	e9c7 2300 	strd	r2, r3, [r7]
  c_int i;

  for (i = 0; i < n; i++) {
 8003e74:	f04f 0200 	mov.w	r2, #0
 8003e78:	f04f 0300 	mov.w	r3, #0
 8003e7c:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8003e80:	e00e      	b.n	8003ea0 <vec_set_scalar+0x3c>
    a[i] = sc;
 8003e82:	69bb      	ldr	r3, [r7, #24]
 8003e84:	00db      	lsls	r3, r3, #3
 8003e86:	697a      	ldr	r2, [r7, #20]
 8003e88:	18d1      	adds	r1, r2, r3
 8003e8a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e8e:	e9c1 2300 	strd	r2, r3, [r1]
  for (i = 0; i < n; i++) {
 8003e92:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e96:	1c54      	adds	r4, r2, #1
 8003e98:	f143 0500 	adc.w	r5, r3, #0
 8003e9c:	e9c7 4506 	strd	r4, r5, [r7, #24]
 8003ea0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003ea4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ea8:	4290      	cmp	r0, r2
 8003eaa:	eb71 0303 	sbcs.w	r3, r1, r3
 8003eae:	dbe8      	blt.n	8003e82 <vec_set_scalar+0x1e>
  }
}
 8003eb0:	bf00      	nop
 8003eb2:	bf00      	nop
 8003eb4:	3724      	adds	r7, #36	; 0x24
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bcb0      	pop	{r4, r5, r7}
 8003eba:	4770      	bx	lr

08003ebc <vec_mult_scalar>:
  for (i = 0; i < n; i++) {
    a[i] += sc;
  }
}

void vec_mult_scalar(c_float *a, c_float sc, c_int n) {
 8003ebc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ebe:	b089      	sub	sp, #36	; 0x24
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6178      	str	r0, [r7, #20]
 8003ec4:	ed87 0b02 	vstr	d0, [r7, #8]
 8003ec8:	e9c7 2300 	strd	r2, r3, [r7]
  c_int i;

  for (i = 0; i < n; i++) {
 8003ecc:	f04f 0200 	mov.w	r2, #0
 8003ed0:	f04f 0300 	mov.w	r3, #0
 8003ed4:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8003ed8:	e018      	b.n	8003f0c <vec_mult_scalar+0x50>
    a[i] *= sc;
 8003eda:	69bb      	ldr	r3, [r7, #24]
 8003edc:	00db      	lsls	r3, r3, #3
 8003ede:	697a      	ldr	r2, [r7, #20]
 8003ee0:	4413      	add	r3, r2
 8003ee2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003ee6:	69bb      	ldr	r3, [r7, #24]
 8003ee8:	00db      	lsls	r3, r3, #3
 8003eea:	697a      	ldr	r2, [r7, #20]
 8003eec:	18d6      	adds	r6, r2, r3
 8003eee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ef2:	f7fc fb89 	bl	8000608 <__aeabi_dmul>
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	460b      	mov	r3, r1
 8003efa:	e9c6 2300 	strd	r2, r3, [r6]
  for (i = 0; i < n; i++) {
 8003efe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f02:	1c54      	adds	r4, r2, #1
 8003f04:	f143 0500 	adc.w	r5, r3, #0
 8003f08:	e9c7 4506 	strd	r4, r5, [r7, #24]
 8003f0c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003f10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f14:	4290      	cmp	r0, r2
 8003f16:	eb71 0303 	sbcs.w	r3, r1, r3
 8003f1a:	dbde      	blt.n	8003eda <vec_mult_scalar+0x1e>
  }
}
 8003f1c:	bf00      	nop
 8003f1e:	bf00      	nop
 8003f20:	3724      	adds	r7, #36	; 0x24
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003f26 <prea_vec_copy>:
  for (i = 0; i < n; i++) {
    b[i] = a[i];
  }
}

void prea_vec_copy(const c_float *a, c_float *b, c_int n) {
 8003f26:	b4b0      	push	{r4, r5, r7}
 8003f28:	b087      	sub	sp, #28
 8003f2a:	af00      	add	r7, sp, #0
 8003f2c:	60f8      	str	r0, [r7, #12]
 8003f2e:	60b9      	str	r1, [r7, #8]
 8003f30:	e9c7 2300 	strd	r2, r3, [r7]
  c_int i;

  for (i = 0; i < n; i++) {
 8003f34:	f04f 0200 	mov.w	r2, #0
 8003f38:	f04f 0300 	mov.w	r3, #0
 8003f3c:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8003f40:	e012      	b.n	8003f68 <prea_vec_copy+0x42>
    b[i] = a[i];
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	00db      	lsls	r3, r3, #3
 8003f46:	68fa      	ldr	r2, [r7, #12]
 8003f48:	4413      	add	r3, r2
 8003f4a:	693a      	ldr	r2, [r7, #16]
 8003f4c:	00d2      	lsls	r2, r2, #3
 8003f4e:	68b9      	ldr	r1, [r7, #8]
 8003f50:	4411      	add	r1, r2
 8003f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f56:	e9c1 2300 	strd	r2, r3, [r1]
  for (i = 0; i < n; i++) {
 8003f5a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003f5e:	1c54      	adds	r4, r2, #1
 8003f60:	f143 0500 	adc.w	r5, r3, #0
 8003f64:	e9c7 4504 	strd	r4, r5, [r7, #16]
 8003f68:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003f6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f70:	4290      	cmp	r0, r2
 8003f72:	eb71 0303 	sbcs.w	r3, r1, r3
 8003f76:	dbe4      	blt.n	8003f42 <prea_vec_copy+0x1c>
  }
}
 8003f78:	bf00      	nop
 8003f7a:	bf00      	nop
 8003f7c:	371c      	adds	r7, #28
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bcb0      	pop	{r4, r5, r7}
 8003f82:	4770      	bx	lr

08003f84 <vec_prod>:
  for (i = 0; i < n; i++) {
    b[i] = (c_float)1.0 / a[i];
  }
}

c_float vec_prod(const c_float *a, const c_float *b, c_int n) {
 8003f84:	b5b0      	push	{r4, r5, r7, lr}
 8003f86:	b088      	sub	sp, #32
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	60f8      	str	r0, [r7, #12]
 8003f8c:	60b9      	str	r1, [r7, #8]
 8003f8e:	e9c7 2300 	strd	r2, r3, [r7]
  c_float prod = 0.0;
 8003f92:	f04f 0200 	mov.w	r2, #0
 8003f96:	f04f 0300 	mov.w	r3, #0
 8003f9a:	e9c7 2306 	strd	r2, r3, [r7, #24]
  c_int   i; // Index

  for (i = 0; i < n; i++) {
 8003f9e:	f04f 0200 	mov.w	r2, #0
 8003fa2:	f04f 0300 	mov.w	r3, #0
 8003fa6:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8003faa:	e01e      	b.n	8003fea <vec_prod+0x66>
    prod += a[i] * b[i];
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	00db      	lsls	r3, r3, #3
 8003fb0:	68fa      	ldr	r2, [r7, #12]
 8003fb2:	4413      	add	r3, r2
 8003fb4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	00db      	lsls	r3, r3, #3
 8003fbc:	68ba      	ldr	r2, [r7, #8]
 8003fbe:	4413      	add	r3, r2
 8003fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fc4:	f7fc fb20 	bl	8000608 <__aeabi_dmul>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	460b      	mov	r3, r1
 8003fcc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003fd0:	f7fc f964 	bl	800029c <__adddf3>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	460b      	mov	r3, r1
 8003fd8:	e9c7 2306 	strd	r2, r3, [r7, #24]
  for (i = 0; i < n; i++) {
 8003fdc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003fe0:	1c54      	adds	r4, r2, #1
 8003fe2:	f143 0500 	adc.w	r5, r3, #0
 8003fe6:	e9c7 4504 	strd	r4, r5, [r7, #16]
 8003fea:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003fee:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ff2:	4290      	cmp	r0, r2
 8003ff4:	eb71 0303 	sbcs.w	r3, r1, r3
 8003ff8:	dbd8      	blt.n	8003fac <vec_prod+0x28>
  }

  return prod;
 8003ffa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ffe:	ec43 2b17 	vmov	d7, r2, r3
}
 8004002:	eeb0 0a47 	vmov.f32	s0, s14
 8004006:	eef0 0a67 	vmov.f32	s1, s15
 800400a:	3720      	adds	r7, #32
 800400c:	46bd      	mov	sp, r7
 800400e:	bdb0      	pop	{r4, r5, r7, pc}

08004010 <vec_ew_prod>:

void vec_ew_prod(const c_float *a, const c_float *b, c_float *c, c_int n) {
 8004010:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8004014:	b086      	sub	sp, #24
 8004016:	af00      	add	r7, sp, #0
 8004018:	60f8      	str	r0, [r7, #12]
 800401a:	60b9      	str	r1, [r7, #8]
 800401c:	607a      	str	r2, [r7, #4]
  c_int i;

  for (i = 0; i < n; i++) {
 800401e:	f04f 0200 	mov.w	r2, #0
 8004022:	f04f 0300 	mov.w	r3, #0
 8004026:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800402a:	e01e      	b.n	800406a <vec_ew_prod+0x5a>
    c[i] = b[i] * a[i];
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	00db      	lsls	r3, r3, #3
 8004030:	68ba      	ldr	r2, [r7, #8]
 8004032:	4413      	add	r3, r2
 8004034:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	00db      	lsls	r3, r3, #3
 800403c:	68fa      	ldr	r2, [r7, #12]
 800403e:	4413      	add	r3, r2
 8004040:	e9d3 bc00 	ldrd	fp, ip, [r3]
 8004044:	693e      	ldr	r6, [r7, #16]
 8004046:	00f6      	lsls	r6, r6, #3
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	441e      	add	r6, r3
 800404c:	465a      	mov	r2, fp
 800404e:	4663      	mov	r3, ip
 8004050:	f7fc fada 	bl	8000608 <__aeabi_dmul>
 8004054:	4602      	mov	r2, r0
 8004056:	460b      	mov	r3, r1
 8004058:	e9c6 2300 	strd	r2, r3, [r6]
  for (i = 0; i < n; i++) {
 800405c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004060:	1c54      	adds	r4, r2, #1
 8004062:	f143 0500 	adc.w	r5, r3, #0
 8004066:	e9c7 4504 	strd	r4, r5, [r7, #16]
 800406a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800406e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004072:	4290      	cmp	r0, r2
 8004074:	eb71 0303 	sbcs.w	r3, r1, r3
 8004078:	dbd8      	blt.n	800402c <vec_ew_prod+0x1c>
  }
}
 800407a:	bf00      	nop
 800407c:	bf00      	nop
 800407e:	3718      	adds	r7, #24
 8004080:	46bd      	mov	sp, r7
 8004082:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}

08004086 <mat_vec>:
                                              // of d for column j
    }
  }
}

void mat_vec(const csc *A, const c_float *x, c_float *y, c_int plus_eq) {
 8004086:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800408a:	b08d      	sub	sp, #52	; 0x34
 800408c:	af00      	add	r7, sp, #0
 800408e:	61f8      	str	r0, [r7, #28]
 8004090:	61b9      	str	r1, [r7, #24]
 8004092:	617a      	str	r2, [r7, #20]
  c_int i, j;

  if (!plus_eq) {
 8004094:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004098:	4313      	orrs	r3, r2
 800409a:	d120      	bne.n	80040de <mat_vec+0x58>
    // y = 0
    for (i = 0; i < A->m; i++) {
 800409c:	f04f 0200 	mov.w	r2, #0
 80040a0:	f04f 0300 	mov.w	r3, #0
 80040a4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80040a8:	e010      	b.n	80040cc <mat_vec+0x46>
      y[i] = 0;
 80040aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ac:	00db      	lsls	r3, r3, #3
 80040ae:	697a      	ldr	r2, [r7, #20]
 80040b0:	18d1      	adds	r1, r2, r3
 80040b2:	f04f 0200 	mov.w	r2, #0
 80040b6:	f04f 0300 	mov.w	r3, #0
 80040ba:	e9c1 2300 	strd	r2, r3, [r1]
    for (i = 0; i < A->m; i++) {
 80040be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80040c2:	1c54      	adds	r4, r2, #1
 80040c4:	f143 0500 	adc.w	r5, r3, #0
 80040c8:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80040d2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80040d6:	4290      	cmp	r0, r2
 80040d8:	eb71 0303 	sbcs.w	r3, r1, r3
 80040dc:	dbe5      	blt.n	80040aa <mat_vec+0x24>
    }
  }

  // if A is empty
  if (A->p[A->n] == 0) {
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	6999      	ldr	r1, [r3, #24]
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80040e8:	4613      	mov	r3, r2
 80040ea:	00db      	lsls	r3, r3, #3
 80040ec:	440b      	add	r3, r1
 80040ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	f000 80ea 	beq.w	80042cc <mat_vec+0x246>
    return;
  }

  if (plus_eq == -1) {
 80040f8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80040fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004100:	bf08      	it	eq
 8004102:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8004106:	d173      	bne.n	80041f0 <mat_vec+0x16a>
    // y -=  A*x
    for (j = 0; j < A->n; j++) {
 8004108:	f04f 0200 	mov.w	r2, #0
 800410c:	f04f 0300 	mov.w	r3, #0
 8004110:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8004114:	e062      	b.n	80041dc <mat_vec+0x156>
      for (i = A->p[j]; i < A->p[j + 1]; i++) {
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	699a      	ldr	r2, [r3, #24]
 800411a:	6a3b      	ldr	r3, [r7, #32]
 800411c:	00db      	lsls	r3, r3, #3
 800411e:	4413      	add	r3, r2
 8004120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004124:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8004128:	e03f      	b.n	80041aa <mat_vec+0x124>
        y[A->i[i]] -= A->x[i] * x[j];
 800412a:	69fb      	ldr	r3, [r7, #28]
 800412c:	69da      	ldr	r2, [r3, #28]
 800412e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004130:	00db      	lsls	r3, r3, #3
 8004132:	4413      	add	r3, r2
 8004134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004138:	4613      	mov	r3, r2
 800413a:	00db      	lsls	r3, r3, #3
 800413c:	697a      	ldr	r2, [r7, #20]
 800413e:	4413      	add	r3, r2
 8004140:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004144:	69fb      	ldr	r3, [r7, #28]
 8004146:	6a1a      	ldr	r2, [r3, #32]
 8004148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800414a:	00db      	lsls	r3, r3, #3
 800414c:	4413      	add	r3, r2
 800414e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004152:	6a3b      	ldr	r3, [r7, #32]
 8004154:	00db      	lsls	r3, r3, #3
 8004156:	69ba      	ldr	r2, [r7, #24]
 8004158:	4413      	add	r3, r2
 800415a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800415e:	f7fc fa53 	bl	8000608 <__aeabi_dmul>
 8004162:	4602      	mov	r2, r0
 8004164:	460b      	mov	r3, r1
 8004166:	4610      	mov	r0, r2
 8004168:	4619      	mov	r1, r3
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	69da      	ldr	r2, [r3, #28]
 800416e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004170:	00db      	lsls	r3, r3, #3
 8004172:	4413      	add	r3, r2
 8004174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004178:	4613      	mov	r3, r2
 800417a:	00db      	lsls	r3, r3, #3
 800417c:	697a      	ldr	r2, [r7, #20]
 800417e:	18d6      	adds	r6, r2, r3
 8004180:	4602      	mov	r2, r0
 8004182:	460b      	mov	r3, r1
 8004184:	4620      	mov	r0, r4
 8004186:	4629      	mov	r1, r5
 8004188:	f7fc f886 	bl	8000298 <__aeabi_dsub>
 800418c:	4602      	mov	r2, r0
 800418e:	460b      	mov	r3, r1
 8004190:	e9c6 2300 	strd	r2, r3, [r6]
      for (i = A->p[j]; i < A->p[j + 1]; i++) {
 8004194:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004198:	1c51      	adds	r1, r2, #1
 800419a:	60b9      	str	r1, [r7, #8]
 800419c:	f143 0300 	adc.w	r3, r3, #0
 80041a0:	60fb      	str	r3, [r7, #12]
 80041a2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80041a6:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
 80041aa:	69fb      	ldr	r3, [r7, #28]
 80041ac:	699a      	ldr	r2, [r3, #24]
 80041ae:	6a3b      	ldr	r3, [r7, #32]
 80041b0:	3301      	adds	r3, #1
 80041b2:	00db      	lsls	r3, r3, #3
 80041b4:	4413      	add	r3, r2
 80041b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80041be:	4290      	cmp	r0, r2
 80041c0:	eb71 0303 	sbcs.w	r3, r1, r3
 80041c4:	dbb1      	blt.n	800412a <mat_vec+0xa4>
    for (j = 0; j < A->n; j++) {
 80041c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80041ca:	1c51      	adds	r1, r2, #1
 80041cc:	6039      	str	r1, [r7, #0]
 80041ce:	f143 0300 	adc.w	r3, r3, #0
 80041d2:	607b      	str	r3, [r7, #4]
 80041d4:	e9d7 3400 	ldrd	r3, r4, [r7]
 80041d8:	e9c7 3408 	strd	r3, r4, [r7, #32]
 80041dc:	69fb      	ldr	r3, [r7, #28]
 80041de:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80041e2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80041e6:	4290      	cmp	r0, r2
 80041e8:	eb71 0303 	sbcs.w	r3, r1, r3
 80041ec:	db93      	blt.n	8004116 <mat_vec+0x90>
 80041ee:	e06e      	b.n	80042ce <mat_vec+0x248>
      }
    }
  } else {
    // y +=  A*x
    for (j = 0; j < A->n; j++) {
 80041f0:	f04f 0200 	mov.w	r2, #0
 80041f4:	f04f 0300 	mov.w	r3, #0
 80041f8:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80041fc:	e05c      	b.n	80042b8 <mat_vec+0x232>
      for (i = A->p[j]; i < A->p[j + 1]; i++) {
 80041fe:	69fb      	ldr	r3, [r7, #28]
 8004200:	699a      	ldr	r2, [r3, #24]
 8004202:	6a3b      	ldr	r3, [r7, #32]
 8004204:	00db      	lsls	r3, r3, #3
 8004206:	4413      	add	r3, r2
 8004208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800420c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8004210:	e03c      	b.n	800428c <mat_vec+0x206>
        y[A->i[i]] += A->x[i] * x[j];
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	69da      	ldr	r2, [r3, #28]
 8004216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004218:	00db      	lsls	r3, r3, #3
 800421a:	4413      	add	r3, r2
 800421c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004220:	4613      	mov	r3, r2
 8004222:	00db      	lsls	r3, r3, #3
 8004224:	697a      	ldr	r2, [r7, #20]
 8004226:	4413      	add	r3, r2
 8004228:	e9d3 4500 	ldrd	r4, r5, [r3]
 800422c:	69fb      	ldr	r3, [r7, #28]
 800422e:	6a1a      	ldr	r2, [r3, #32]
 8004230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004232:	00db      	lsls	r3, r3, #3
 8004234:	4413      	add	r3, r2
 8004236:	e9d3 0100 	ldrd	r0, r1, [r3]
 800423a:	6a3b      	ldr	r3, [r7, #32]
 800423c:	00db      	lsls	r3, r3, #3
 800423e:	69ba      	ldr	r2, [r7, #24]
 8004240:	4413      	add	r3, r2
 8004242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004246:	f7fc f9df 	bl	8000608 <__aeabi_dmul>
 800424a:	4602      	mov	r2, r0
 800424c:	460b      	mov	r3, r1
 800424e:	4610      	mov	r0, r2
 8004250:	4619      	mov	r1, r3
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	69da      	ldr	r2, [r3, #28]
 8004256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004258:	00db      	lsls	r3, r3, #3
 800425a:	4413      	add	r3, r2
 800425c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004260:	4613      	mov	r3, r2
 8004262:	00db      	lsls	r3, r3, #3
 8004264:	697a      	ldr	r2, [r7, #20]
 8004266:	18d6      	adds	r6, r2, r3
 8004268:	4602      	mov	r2, r0
 800426a:	460b      	mov	r3, r1
 800426c:	4620      	mov	r0, r4
 800426e:	4629      	mov	r1, r5
 8004270:	f7fc f814 	bl	800029c <__adddf3>
 8004274:	4602      	mov	r2, r0
 8004276:	460b      	mov	r3, r1
 8004278:	e9c6 2300 	strd	r2, r3, [r6]
      for (i = A->p[j]; i < A->p[j + 1]; i++) {
 800427c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004280:	f112 0801 	adds.w	r8, r2, #1
 8004284:	f143 0900 	adc.w	r9, r3, #0
 8004288:	e9c7 890a 	strd	r8, r9, [r7, #40]	; 0x28
 800428c:	69fb      	ldr	r3, [r7, #28]
 800428e:	699a      	ldr	r2, [r3, #24]
 8004290:	6a3b      	ldr	r3, [r7, #32]
 8004292:	3301      	adds	r3, #1
 8004294:	00db      	lsls	r3, r3, #3
 8004296:	4413      	add	r3, r2
 8004298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800429c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80042a0:	4290      	cmp	r0, r2
 80042a2:	eb71 0303 	sbcs.w	r3, r1, r3
 80042a6:	dbb4      	blt.n	8004212 <mat_vec+0x18c>
    for (j = 0; j < A->n; j++) {
 80042a8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80042ac:	f112 0a01 	adds.w	sl, r2, #1
 80042b0:	f143 0b00 	adc.w	fp, r3, #0
 80042b4:	e9c7 ab08 	strd	sl, fp, [r7, #32]
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80042be:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80042c2:	4290      	cmp	r0, r2
 80042c4:	eb71 0303 	sbcs.w	r3, r1, r3
 80042c8:	db99      	blt.n	80041fe <mat_vec+0x178>
 80042ca:	e000      	b.n	80042ce <mat_vec+0x248>
    return;
 80042cc:	bf00      	nop
      }
    }
  }
}
 80042ce:	3734      	adds	r7, #52	; 0x34
 80042d0:	46bd      	mov	sp, r7
 80042d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080042d6 <mat_tpose_vec>:

void mat_tpose_vec(const csc *A, const c_float *x, c_float *y,
                   c_int plus_eq, c_int skip_diag) {
 80042d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042da:	b097      	sub	sp, #92	; 0x5c
 80042dc:	af00      	add	r7, sp, #0
 80042de:	63f8      	str	r0, [r7, #60]	; 0x3c
 80042e0:	63b9      	str	r1, [r7, #56]	; 0x38
 80042e2:	637a      	str	r2, [r7, #52]	; 0x34
  c_int i, j, k;

  if (!plus_eq) {
 80042e4:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80042e8:	4313      	orrs	r3, r2
 80042ea:	d11f      	bne.n	800432c <mat_tpose_vec+0x56>
    // y = 0
    for (i = 0; i < A->n; i++) {
 80042ec:	f04f 0200 	mov.w	r2, #0
 80042f0:	f04f 0300 	mov.w	r3, #0
 80042f4:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 80042f8:	e010      	b.n	800431c <mat_tpose_vec+0x46>
      y[i] = 0;
 80042fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042fc:	00da      	lsls	r2, r3, #3
 80042fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004300:	1899      	adds	r1, r3, r2
 8004302:	f04f 0200 	mov.w	r2, #0
 8004306:	f04f 0300 	mov.w	r3, #0
 800430a:	e9c1 2300 	strd	r2, r3, [r1]
    for (i = 0; i < A->n; i++) {
 800430e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004312:	1c54      	adds	r4, r2, #1
 8004314:	f143 0500 	adc.w	r5, r3, #0
 8004318:	e9c7 4514 	strd	r4, r5, [r7, #80]	; 0x50
 800431c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800431e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8004322:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004326:	4282      	cmp	r2, r0
 8004328:	418b      	sbcs	r3, r1
 800432a:	dbe6      	blt.n	80042fa <mat_tpose_vec+0x24>
    }
  }

  // if A is empty
  if (A->p[A->n] == 0) {
 800432c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800432e:	6999      	ldr	r1, [r3, #24]
 8004330:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004332:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004336:	4613      	mov	r3, r2
 8004338:	00db      	lsls	r3, r3, #3
 800433a:	440b      	add	r3, r1
 800433c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004340:	4313      	orrs	r3, r2
 8004342:	f000 81d7 	beq.w	80046f4 <mat_tpose_vec+0x41e>
    return;
  }

  if (plus_eq == -1) {
 8004346:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800434a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800434e:	bf08      	it	eq
 8004350:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8004354:	f040 80e9 	bne.w	800452a <mat_tpose_vec+0x254>
    // y -=  A*x
    if (skip_diag) {
 8004358:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800435c:	4313      	orrs	r3, r2
 800435e:	d077      	beq.n	8004450 <mat_tpose_vec+0x17a>
      for (j = 0; j < A->n; j++) {
 8004360:	f04f 0200 	mov.w	r2, #0
 8004364:	f04f 0300 	mov.w	r3, #0
 8004368:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 800436c:	e066      	b.n	800443c <mat_tpose_vec+0x166>
        for (k = A->p[j]; k < A->p[j + 1]; k++) {
 800436e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004370:	699a      	ldr	r2, [r3, #24]
 8004372:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004374:	00db      	lsls	r3, r3, #3
 8004376:	4413      	add	r3, r2
 8004378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800437c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8004380:	e043      	b.n	800440a <mat_tpose_vec+0x134>
          i     = A->i[k];
 8004382:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004384:	69da      	ldr	r2, [r3, #28]
 8004386:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004388:	00db      	lsls	r3, r3, #3
 800438a:	4413      	add	r3, r2
 800438c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004390:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
          y[j] -= i == j ? 0 : A->x[k] * x[i];
 8004394:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004396:	00db      	lsls	r3, r3, #3
 8004398:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800439a:	4413      	add	r3, r2
 800439c:	e9d3 4500 	ldrd	r4, r5, [r3]
 80043a0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80043a4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80043a8:	4299      	cmp	r1, r3
 80043aa:	bf08      	it	eq
 80043ac:	4290      	cmpeq	r0, r2
 80043ae:	d011      	beq.n	80043d4 <mat_tpose_vec+0xfe>
 80043b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043b2:	6a1a      	ldr	r2, [r3, #32]
 80043b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043b6:	00db      	lsls	r3, r3, #3
 80043b8:	4413      	add	r3, r2
 80043ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 80043be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043c0:	00db      	lsls	r3, r3, #3
 80043c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80043c4:	4413      	add	r3, r2
 80043c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ca:	f7fc f91d 	bl	8000608 <__aeabi_dmul>
 80043ce:	4602      	mov	r2, r0
 80043d0:	460b      	mov	r3, r1
 80043d2:	e003      	b.n	80043dc <mat_tpose_vec+0x106>
 80043d4:	f04f 0200 	mov.w	r2, #0
 80043d8:	f04f 0300 	mov.w	r3, #0
 80043dc:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80043de:	00c9      	lsls	r1, r1, #3
 80043e0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80043e2:	1846      	adds	r6, r0, r1
 80043e4:	4620      	mov	r0, r4
 80043e6:	4629      	mov	r1, r5
 80043e8:	f7fb ff56 	bl	8000298 <__aeabi_dsub>
 80043ec:	4602      	mov	r2, r0
 80043ee:	460b      	mov	r3, r1
 80043f0:	e9c6 2300 	strd	r2, r3, [r6]
        for (k = A->p[j]; k < A->p[j + 1]; k++) {
 80043f4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80043f8:	1c51      	adds	r1, r2, #1
 80043fa:	62b9      	str	r1, [r7, #40]	; 0x28
 80043fc:	f143 0300 	adc.w	r3, r3, #0
 8004400:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004402:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8004406:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
 800440a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800440c:	699a      	ldr	r2, [r3, #24]
 800440e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004410:	3301      	adds	r3, #1
 8004412:	00db      	lsls	r3, r3, #3
 8004414:	4413      	add	r3, r2
 8004416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800441a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800441e:	4290      	cmp	r0, r2
 8004420:	eb71 0303 	sbcs.w	r3, r1, r3
 8004424:	dbad      	blt.n	8004382 <mat_tpose_vec+0xac>
      for (j = 0; j < A->n; j++) {
 8004426:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800442a:	1c51      	adds	r1, r2, #1
 800442c:	6239      	str	r1, [r7, #32]
 800442e:	f143 0300 	adc.w	r3, r3, #0
 8004432:	627b      	str	r3, [r7, #36]	; 0x24
 8004434:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8004438:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
 800443c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800443e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004442:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004446:	4290      	cmp	r0, r2
 8004448:	eb71 0303 	sbcs.w	r3, r1, r3
 800444c:	db8f      	blt.n	800436e <mat_tpose_vec+0x98>
 800444e:	e152      	b.n	80046f6 <mat_tpose_vec+0x420>
        }
      }
    } else {
      for (j = 0; j < A->n; j++) {
 8004450:	f04f 0200 	mov.w	r2, #0
 8004454:	f04f 0300 	mov.w	r3, #0
 8004458:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 800445c:	e05b      	b.n	8004516 <mat_tpose_vec+0x240>
        for (k = A->p[j]; k < A->p[j + 1]; k++) {
 800445e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004460:	699a      	ldr	r2, [r3, #24]
 8004462:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004464:	00db      	lsls	r3, r3, #3
 8004466:	4413      	add	r3, r2
 8004468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800446c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8004470:	e038      	b.n	80044e4 <mat_tpose_vec+0x20e>
          y[j] -= A->x[k] * x[A->i[k]];
 8004472:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004474:	00db      	lsls	r3, r3, #3
 8004476:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004478:	4413      	add	r3, r2
 800447a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800447e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004480:	6a1a      	ldr	r2, [r3, #32]
 8004482:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004484:	00db      	lsls	r3, r3, #3
 8004486:	4413      	add	r3, r2
 8004488:	e9d3 0100 	ldrd	r0, r1, [r3]
 800448c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800448e:	69da      	ldr	r2, [r3, #28]
 8004490:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004492:	00db      	lsls	r3, r3, #3
 8004494:	4413      	add	r3, r2
 8004496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800449a:	4613      	mov	r3, r2
 800449c:	00db      	lsls	r3, r3, #3
 800449e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80044a0:	4413      	add	r3, r2
 80044a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044a6:	f7fc f8af 	bl	8000608 <__aeabi_dmul>
 80044aa:	4602      	mov	r2, r0
 80044ac:	460b      	mov	r3, r1
 80044ae:	4610      	mov	r0, r2
 80044b0:	4619      	mov	r1, r3
 80044b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044b4:	00db      	lsls	r3, r3, #3
 80044b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80044b8:	18d6      	adds	r6, r2, r3
 80044ba:	4602      	mov	r2, r0
 80044bc:	460b      	mov	r3, r1
 80044be:	4620      	mov	r0, r4
 80044c0:	4629      	mov	r1, r5
 80044c2:	f7fb fee9 	bl	8000298 <__aeabi_dsub>
 80044c6:	4602      	mov	r2, r0
 80044c8:	460b      	mov	r3, r1
 80044ca:	e9c6 2300 	strd	r2, r3, [r6]
        for (k = A->p[j]; k < A->p[j + 1]; k++) {
 80044ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80044d2:	1c51      	adds	r1, r2, #1
 80044d4:	61b9      	str	r1, [r7, #24]
 80044d6:	f143 0300 	adc.w	r3, r3, #0
 80044da:	61fb      	str	r3, [r7, #28]
 80044dc:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80044e0:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
 80044e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044e6:	699a      	ldr	r2, [r3, #24]
 80044e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044ea:	3301      	adds	r3, #1
 80044ec:	00db      	lsls	r3, r3, #3
 80044ee:	4413      	add	r3, r2
 80044f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044f4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80044f8:	4290      	cmp	r0, r2
 80044fa:	eb71 0303 	sbcs.w	r3, r1, r3
 80044fe:	dbb8      	blt.n	8004472 <mat_tpose_vec+0x19c>
      for (j = 0; j < A->n; j++) {
 8004500:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004504:	1c51      	adds	r1, r2, #1
 8004506:	6139      	str	r1, [r7, #16]
 8004508:	f143 0300 	adc.w	r3, r3, #0
 800450c:	617b      	str	r3, [r7, #20]
 800450e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8004512:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
 8004516:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004518:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800451c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004520:	4290      	cmp	r0, r2
 8004522:	eb71 0303 	sbcs.w	r3, r1, r3
 8004526:	db9a      	blt.n	800445e <mat_tpose_vec+0x188>
 8004528:	e0e5      	b.n	80046f6 <mat_tpose_vec+0x420>
        }
      }
    }
  } else {
    // y +=  A*x
    if (skip_diag) {
 800452a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800452e:	4313      	orrs	r3, r2
 8004530:	d079      	beq.n	8004626 <mat_tpose_vec+0x350>
      for (j = 0; j < A->n; j++) {
 8004532:	f04f 0200 	mov.w	r2, #0
 8004536:	f04f 0300 	mov.w	r3, #0
 800453a:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 800453e:	e068      	b.n	8004612 <mat_tpose_vec+0x33c>
        for (k = A->p[j]; k < A->p[j + 1]; k++) {
 8004540:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004542:	699a      	ldr	r2, [r3, #24]
 8004544:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004546:	00db      	lsls	r3, r3, #3
 8004548:	4413      	add	r3, r2
 800454a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800454e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8004552:	e045      	b.n	80045e0 <mat_tpose_vec+0x30a>
          i     = A->i[k];
 8004554:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004556:	69da      	ldr	r2, [r3, #28]
 8004558:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800455a:	00db      	lsls	r3, r3, #3
 800455c:	4413      	add	r3, r2
 800455e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004562:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
          y[j] += i == j ? 0 : A->x[k] * x[i];
 8004566:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004568:	00db      	lsls	r3, r3, #3
 800456a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800456c:	4413      	add	r3, r2
 800456e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004572:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004576:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800457a:	4299      	cmp	r1, r3
 800457c:	bf08      	it	eq
 800457e:	4290      	cmpeq	r0, r2
 8004580:	d013      	beq.n	80045aa <mat_tpose_vec+0x2d4>
 8004582:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004584:	6a1a      	ldr	r2, [r3, #32]
 8004586:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004588:	00db      	lsls	r3, r3, #3
 800458a:	4413      	add	r3, r2
 800458c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004590:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004592:	00db      	lsls	r3, r3, #3
 8004594:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004596:	4413      	add	r3, r2
 8004598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800459c:	f7fc f834 	bl	8000608 <__aeabi_dmul>
 80045a0:	4602      	mov	r2, r0
 80045a2:	460b      	mov	r3, r1
 80045a4:	4610      	mov	r0, r2
 80045a6:	4619      	mov	r1, r3
 80045a8:	e003      	b.n	80045b2 <mat_tpose_vec+0x2dc>
 80045aa:	f04f 0000 	mov.w	r0, #0
 80045ae:	f04f 0100 	mov.w	r1, #0
 80045b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045b4:	00db      	lsls	r3, r3, #3
 80045b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80045b8:	18d6      	adds	r6, r2, r3
 80045ba:	4622      	mov	r2, r4
 80045bc:	462b      	mov	r3, r5
 80045be:	f7fb fe6d 	bl	800029c <__adddf3>
 80045c2:	4602      	mov	r2, r0
 80045c4:	460b      	mov	r3, r1
 80045c6:	e9c6 2300 	strd	r2, r3, [r6]
        for (k = A->p[j]; k < A->p[j + 1]; k++) {
 80045ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80045ce:	1c51      	adds	r1, r2, #1
 80045d0:	60b9      	str	r1, [r7, #8]
 80045d2:	f143 0300 	adc.w	r3, r3, #0
 80045d6:	60fb      	str	r3, [r7, #12]
 80045d8:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80045dc:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
 80045e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045e2:	699a      	ldr	r2, [r3, #24]
 80045e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045e6:	3301      	adds	r3, #1
 80045e8:	00db      	lsls	r3, r3, #3
 80045ea:	4413      	add	r3, r2
 80045ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045f0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80045f4:	4290      	cmp	r0, r2
 80045f6:	eb71 0303 	sbcs.w	r3, r1, r3
 80045fa:	dbab      	blt.n	8004554 <mat_tpose_vec+0x27e>
      for (j = 0; j < A->n; j++) {
 80045fc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004600:	1c51      	adds	r1, r2, #1
 8004602:	6039      	str	r1, [r7, #0]
 8004604:	f143 0300 	adc.w	r3, r3, #0
 8004608:	607b      	str	r3, [r7, #4]
 800460a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800460e:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
 8004612:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004614:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004618:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800461c:	4290      	cmp	r0, r2
 800461e:	eb71 0303 	sbcs.w	r3, r1, r3
 8004622:	db8d      	blt.n	8004540 <mat_tpose_vec+0x26a>
 8004624:	e067      	b.n	80046f6 <mat_tpose_vec+0x420>
        }
      }
    } else {
      for (j = 0; j < A->n; j++) {
 8004626:	f04f 0200 	mov.w	r2, #0
 800462a:	f04f 0300 	mov.w	r3, #0
 800462e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 8004632:	e055      	b.n	80046e0 <mat_tpose_vec+0x40a>
        for (k = A->p[j]; k < A->p[j + 1]; k++) {
 8004634:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004636:	699a      	ldr	r2, [r3, #24]
 8004638:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800463a:	00db      	lsls	r3, r3, #3
 800463c:	4413      	add	r3, r2
 800463e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004642:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8004646:	e035      	b.n	80046b4 <mat_tpose_vec+0x3de>
          y[j] += A->x[k] * x[A->i[k]];
 8004648:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800464a:	00db      	lsls	r3, r3, #3
 800464c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800464e:	4413      	add	r3, r2
 8004650:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004654:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004656:	6a1a      	ldr	r2, [r3, #32]
 8004658:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800465a:	00db      	lsls	r3, r3, #3
 800465c:	4413      	add	r3, r2
 800465e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004662:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004664:	69da      	ldr	r2, [r3, #28]
 8004666:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004668:	00db      	lsls	r3, r3, #3
 800466a:	4413      	add	r3, r2
 800466c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004670:	4613      	mov	r3, r2
 8004672:	00db      	lsls	r3, r3, #3
 8004674:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004676:	4413      	add	r3, r2
 8004678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800467c:	f7fb ffc4 	bl	8000608 <__aeabi_dmul>
 8004680:	4602      	mov	r2, r0
 8004682:	460b      	mov	r3, r1
 8004684:	4610      	mov	r0, r2
 8004686:	4619      	mov	r1, r3
 8004688:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800468a:	00db      	lsls	r3, r3, #3
 800468c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800468e:	18d6      	adds	r6, r2, r3
 8004690:	4602      	mov	r2, r0
 8004692:	460b      	mov	r3, r1
 8004694:	4620      	mov	r0, r4
 8004696:	4629      	mov	r1, r5
 8004698:	f7fb fe00 	bl	800029c <__adddf3>
 800469c:	4602      	mov	r2, r0
 800469e:	460b      	mov	r3, r1
 80046a0:	e9c6 2300 	strd	r2, r3, [r6]
        for (k = A->p[j]; k < A->p[j + 1]; k++) {
 80046a4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80046a8:	f112 0801 	adds.w	r8, r2, #1
 80046ac:	f143 0900 	adc.w	r9, r3, #0
 80046b0:	e9c7 8910 	strd	r8, r9, [r7, #64]	; 0x40
 80046b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046b6:	699a      	ldr	r2, [r3, #24]
 80046b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046ba:	3301      	adds	r3, #1
 80046bc:	00db      	lsls	r3, r3, #3
 80046be:	4413      	add	r3, r2
 80046c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046c4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80046c8:	4290      	cmp	r0, r2
 80046ca:	eb71 0303 	sbcs.w	r3, r1, r3
 80046ce:	dbbb      	blt.n	8004648 <mat_tpose_vec+0x372>
      for (j = 0; j < A->n; j++) {
 80046d0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80046d4:	f112 0a01 	adds.w	sl, r2, #1
 80046d8:	f143 0b00 	adc.w	fp, r3, #0
 80046dc:	e9c7 ab12 	strd	sl, fp, [r7, #72]	; 0x48
 80046e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046e2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80046e6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80046ea:	4290      	cmp	r0, r2
 80046ec:	eb71 0303 	sbcs.w	r3, r1, r3
 80046f0:	dba0      	blt.n	8004634 <mat_tpose_vec+0x35e>
 80046f2:	e000      	b.n	80046f6 <mat_tpose_vec+0x420>
    return;
 80046f4:	bf00      	nop
        }
      }
    }
  }
}
 80046f6:	375c      	adds	r7, #92	; 0x5c
 80046f8:	46bd      	mov	sp, r7
 80046fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08004700 <quad_form>:
}

#endif /* if EMBEDDED != 1 */


c_float quad_form(const csc *P, const c_float *x) {
 8004700:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004704:	b08a      	sub	sp, #40	; 0x28
 8004706:	af00      	add	r7, sp, #0
 8004708:	6078      	str	r0, [r7, #4]
 800470a:	6039      	str	r1, [r7, #0]
  c_float quad_form = 0.;
 800470c:	f04f 0200 	mov.w	r2, #0
 8004710:	f04f 0300 	mov.w	r3, #0
 8004714:	e9c7 2308 	strd	r2, r3, [r7, #32]
  c_int   i, j, ptr;                                // Pointers to iterate over
                                                    // matrix: (i,j) a element
                                                    // pointer

  for (j = 0; j < P->n; j++) {                      // Iterate over columns
 8004718:	f04f 0200 	mov.w	r2, #0
 800471c:	f04f 0300 	mov.w	r3, #0
 8004720:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8004724:	e09a      	b.n	800485c <quad_form+0x15c>
    for (ptr = P->p[j]; ptr < P->p[j + 1]; ptr++) { // Iterate over rows
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	699a      	ldr	r2, [r3, #24]
 800472a:	69bb      	ldr	r3, [r7, #24]
 800472c:	00db      	lsls	r3, r3, #3
 800472e:	4413      	add	r3, r2
 8004730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004734:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8004738:	e079      	b.n	800482e <quad_form+0x12e>
      i = P->i[ptr];                                // Row index
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	69da      	ldr	r2, [r3, #28]
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	00db      	lsls	r3, r3, #3
 8004742:	4413      	add	r3, r2
 8004744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004748:	e9c7 2302 	strd	r2, r3, [r7, #8]

      if (i == j) {                                 // Diagonal element
 800474c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004750:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004754:	4299      	cmp	r1, r3
 8004756:	bf08      	it	eq
 8004758:	4290      	cmpeq	r0, r2
 800475a:	d12e      	bne.n	80047ba <quad_form+0xba>
        quad_form += (c_float).5 * P->x[ptr] * x[i] * x[i];
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6a1a      	ldr	r2, [r3, #32]
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	00db      	lsls	r3, r3, #3
 8004764:	4413      	add	r3, r2
 8004766:	e9d3 0100 	ldrd	r0, r1, [r3]
 800476a:	f04f 0200 	mov.w	r2, #0
 800476e:	4b46      	ldr	r3, [pc, #280]	; (8004888 <quad_form+0x188>)
 8004770:	f7fb ff4a 	bl	8000608 <__aeabi_dmul>
 8004774:	4602      	mov	r2, r0
 8004776:	460b      	mov	r3, r1
 8004778:	4610      	mov	r0, r2
 800477a:	4619      	mov	r1, r3
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	00db      	lsls	r3, r3, #3
 8004780:	683a      	ldr	r2, [r7, #0]
 8004782:	4413      	add	r3, r2
 8004784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004788:	f7fb ff3e 	bl	8000608 <__aeabi_dmul>
 800478c:	4602      	mov	r2, r0
 800478e:	460b      	mov	r3, r1
 8004790:	4610      	mov	r0, r2
 8004792:	4619      	mov	r1, r3
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	00db      	lsls	r3, r3, #3
 8004798:	683a      	ldr	r2, [r7, #0]
 800479a:	4413      	add	r3, r2
 800479c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047a0:	f7fb ff32 	bl	8000608 <__aeabi_dmul>
 80047a4:	4602      	mov	r2, r0
 80047a6:	460b      	mov	r3, r1
 80047a8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80047ac:	f7fb fd76 	bl	800029c <__adddf3>
 80047b0:	4602      	mov	r2, r0
 80047b2:	460b      	mov	r3, r1
 80047b4:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80047b8:	e032      	b.n	8004820 <quad_form+0x120>
      }
      else if (i < j) {                             // Off-diagonal element
 80047ba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80047be:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80047c2:	4290      	cmp	r0, r2
 80047c4:	eb71 0303 	sbcs.w	r3, r1, r3
 80047c8:	da25      	bge.n	8004816 <quad_form+0x116>
        quad_form += P->x[ptr] * x[i] * x[j];
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6a1a      	ldr	r2, [r3, #32]
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	00db      	lsls	r3, r3, #3
 80047d2:	4413      	add	r3, r2
 80047d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	00db      	lsls	r3, r3, #3
 80047dc:	683a      	ldr	r2, [r7, #0]
 80047de:	4413      	add	r3, r2
 80047e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047e4:	f7fb ff10 	bl	8000608 <__aeabi_dmul>
 80047e8:	4602      	mov	r2, r0
 80047ea:	460b      	mov	r3, r1
 80047ec:	4610      	mov	r0, r2
 80047ee:	4619      	mov	r1, r3
 80047f0:	69bb      	ldr	r3, [r7, #24]
 80047f2:	00db      	lsls	r3, r3, #3
 80047f4:	683a      	ldr	r2, [r7, #0]
 80047f6:	4413      	add	r3, r2
 80047f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047fc:	f7fb ff04 	bl	8000608 <__aeabi_dmul>
 8004800:	4602      	mov	r2, r0
 8004802:	460b      	mov	r3, r1
 8004804:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004808:	f7fb fd48 	bl	800029c <__adddf3>
 800480c:	4602      	mov	r2, r0
 800480e:	460b      	mov	r3, r1
 8004810:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8004814:	e004      	b.n	8004820 <quad_form+0x120>
      else {                                        // Element in lower diagonal
                                                    // part
#ifdef PRINTING
        c_eprint("quad_form matrix is not upper triangular");
#endif /* ifdef PRINTING */
        return OSQP_NULL;
 8004816:	f04f 0200 	mov.w	r2, #0
 800481a:	f04f 0300 	mov.w	r3, #0
 800481e:	e029      	b.n	8004874 <quad_form+0x174>
    for (ptr = P->p[j]; ptr < P->p[j + 1]; ptr++) { // Iterate over rows
 8004820:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004824:	1c54      	adds	r4, r2, #1
 8004826:	f143 0500 	adc.w	r5, r3, #0
 800482a:	e9c7 4504 	strd	r4, r5, [r7, #16]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	699a      	ldr	r2, [r3, #24]
 8004832:	69bb      	ldr	r3, [r7, #24]
 8004834:	3301      	adds	r3, #1
 8004836:	00db      	lsls	r3, r3, #3
 8004838:	4413      	add	r3, r2
 800483a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800483e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004842:	4290      	cmp	r0, r2
 8004844:	eb71 0303 	sbcs.w	r3, r1, r3
 8004848:	f6ff af77 	blt.w	800473a <quad_form+0x3a>
  for (j = 0; j < P->n; j++) {                      // Iterate over columns
 800484c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004850:	f112 0801 	adds.w	r8, r2, #1
 8004854:	f143 0900 	adc.w	r9, r3, #0
 8004858:	e9c7 8906 	strd	r8, r9, [r7, #24]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004862:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004866:	4290      	cmp	r0, r2
 8004868:	eb71 0303 	sbcs.w	r3, r1, r3
 800486c:	f6ff af5b 	blt.w	8004726 <quad_form+0x26>
      }
    }
  }
  return quad_form;
 8004870:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
}
 8004874:	ec43 2b17 	vmov	d7, r2, r3
 8004878:	eeb0 0a47 	vmov.f32	s0, s14
 800487c:	eef0 0a67 	vmov.f32	s1, s15
 8004880:	3728      	adds	r7, #40	; 0x28
 8004882:	46bd      	mov	sp, r7
 8004884:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004888:	3fe00000 	.word	0x3fe00000

0800488c <osqp_solve>:
}

#endif // #ifndef EMBEDDED


c_int osqp_solve(OSQPWorkspace *work) {
 800488c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004890:	b08e      	sub	sp, #56	; 0x38
 8004892:	af04      	add	r7, sp, #16
 8004894:	6078      	str	r0, [r7, #4]
#ifdef PRINTING
  c_int can_print;             // Boolean whether you can print
#endif /* ifdef PRINTING */

  // Check if workspace has been initialized
  if (!work) return osqp_error(OSQP_WORKSPACE_NOT_INIT_ERROR);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d106      	bne.n	80048aa <osqp_solve+0x1e>
 800489c:	4979      	ldr	r1, [pc, #484]	; (8004a84 <osqp_solve+0x1f8>)
 800489e:	2007      	movs	r0, #7
 80048a0:	f7ff f9a8 	bl	8003bf4 <_osqp_error>
 80048a4:	4602      	mov	r2, r0
 80048a6:	460b      	mov	r3, r1
 80048a8:	e0e6      	b.n	8004a78 <osqp_solve+0x1ec>
    work->info->update_time = 0.0;
  work->rho_update_from_solve = 1;
#endif /* ifdef PROFILING */

  // Initialize variables
  exitflag              = 0;
 80048aa:	f04f 0200 	mov.w	r2, #0
 80048ae:	f04f 0300 	mov.w	r3, #0
 80048b2:	e9c7 2304 	strd	r2, r3, [r7, #16]
  can_check_termination = 0;
 80048b6:	f04f 0200 	mov.w	r2, #0
 80048ba:	f04f 0300 	mov.w	r3, #0
 80048be:	e9c7 2306 	strd	r2, r3, [r7, #24]
#endif /* ifdef PRINTING */
#ifdef PRINTING
  compute_cost_function = work->settings->verbose; // Compute cost function only
                                                   // if verbose is on
#else /* ifdef PRINTING */
  compute_cost_function = 0;                       // Never compute cost
 80048c2:	f04f 0200 	mov.w	r2, #0
 80048c6:	f04f 0300 	mov.w	r3, #0
 80048ca:	e9c7 2302 	strd	r2, r3, [r7, #8]
  // initialize Ctrl-C support
  osqp_start_interrupt_listener();
#endif /* ifdef CTRLC */

  // Initialize variables (cold start or warm start depending on settings)
  if (!work->settings->warm_start) cold_start(work);  // If not warm start ->
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048d2:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80048d6:	4313      	orrs	r3, r2
 80048d8:	d102      	bne.n	80048e0 <osqp_solve+0x54>
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f7fd fdb0 	bl	8002440 <cold_start>
                                                      // set x, z, y to zero

  // Main ADMM algorithm
  for (iter = 1; iter <= work->settings->max_iter; iter++) {
 80048e0:	f04f 0201 	mov.w	r2, #1
 80048e4:	f04f 0300 	mov.w	r3, #0
 80048e8:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80048ec:	e05a      	b.n	80049a4 <osqp_solve+0x118>
    // Update x_prev, z_prev (preallocated, no malloc)
    swap_vectors(&(work->x), &(work->x_prev));
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	f103 0210 	add.w	r2, r3, #16
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	3320      	adds	r3, #32
 80048f8:	4619      	mov	r1, r3
 80048fa:	4610      	mov	r0, r2
 80048fc:	f7fd fd88 	bl	8002410 <swap_vectors>
    swap_vectors(&(work->z), &(work->z_prev));
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f103 0218 	add.w	r2, r3, #24
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	3324      	adds	r3, #36	; 0x24
 800490a:	4619      	mov	r1, r3
 800490c:	4610      	mov	r0, r2
 800490e:	f7fd fd7f 	bl	8002410 <swap_vectors>

    /* ADMM STEPS */
    /* Compute \tilde{x}^{k+1}, \tilde{z}^{k+1} */
    update_xz_tilde(work);
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f7fd fe56 	bl	80025c4 <update_xz_tilde>

    /* Compute x^{k+1} */
    update_x(work);
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	f7fd fe67 	bl	80025ec <update_x>

    /* Compute z^{k+1} */
    update_z(work);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f7fd fef8 	bl	8002714 <update_z>

    /* Compute y^{k+1} */
    update_y(work);
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f7fd ff7b 	bl	8002820 <update_y>
    }
#endif /* ifdef PROFILING */


    // Can we check for termination ?
    can_check_termination = work->settings->check_termination &&
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800492e:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8004932:	4313      	orrs	r3, r2
 8004934:	d00b      	beq.n	800494e <osqp_solve+0xc2>
                            (iter % work->settings->check_termination == 0);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800493a:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 800493e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004942:	f7fc f959 	bl	8000bf8 <__aeabi_ldivmod>
    can_check_termination = work->settings->check_termination &&
 8004946:	4313      	orrs	r3, r2
 8004948:	d101      	bne.n	800494e <osqp_solve+0xc2>
 800494a:	2301      	movs	r3, #1
 800494c:	e000      	b.n	8004950 <osqp_solve+0xc4>
 800494e:	2300      	movs	r3, #0
 8004950:	17da      	asrs	r2, r3, #31
 8004952:	469a      	mov	sl, r3
 8004954:	4693      	mov	fp, r2
 8004956:	e9c7 ab06 	strd	sl, fp, [r7, #24]
        }
      }
    }
#else /* ifdef PRINTING */

    if (can_check_termination) {
 800495a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800495e:	4313      	orrs	r3, r2
 8004960:	d019      	beq.n	8004996 <osqp_solve+0x10a>
      // Update information and compute also objective value
      update_info(work, iter, compute_cost_function, 0);
 8004962:	f04f 0200 	mov.w	r2, #0
 8004966:	f04f 0300 	mov.w	r3, #0
 800496a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800496e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004972:	e9cd 2300 	strd	r2, r3, [sp]
 8004976:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f7fe fe74 	bl	8003668 <update_info>

      // Check algorithm termination
      if (check_termination(work, 0)) {
 8004980:	f04f 0200 	mov.w	r2, #0
 8004984:	f04f 0300 	mov.w	r3, #0
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f7fe ff85 	bl	8003898 <check_termination>
 800498e:	4602      	mov	r2, r0
 8004990:	460b      	mov	r3, r1
 8004992:	4313      	orrs	r3, r2
 8004994:	d111      	bne.n	80049ba <osqp_solve+0x12e>
  for (iter = 1; iter <= work->settings->max_iter; iter++) {
 8004996:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800499a:	1c54      	adds	r4, r2, #1
 800499c:	f143 0500 	adc.w	r5, r3, #0
 80049a0:	e9c7 4508 	strd	r4, r5, [r7, #32]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049a8:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80049ac:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80049b0:	4290      	cmp	r0, r2
 80049b2:	eb71 0303 	sbcs.w	r3, r1, r3
 80049b6:	da9a      	bge.n	80048ee <osqp_solve+0x62>
 80049b8:	e000      	b.n	80049bc <osqp_solve+0x130>
        // Terminate algorithm
        break;
 80049ba:	bf00      	nop
  }        // End of ADMM for loop


  // Update information and check termination condition if it hasn't been done
  // during last iteration (max_iter reached or check_termination disabled)
  if (!can_check_termination) {
 80049bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80049c0:	4313      	orrs	r3, r2
 80049c2:	d11b      	bne.n	80049fc <osqp_solve+0x170>
      update_info(work, iter - 1, compute_cost_function, 0);
    }
#else /* ifdef PRINTING */

    // If no printing is enabled, update info directly
    update_info(work, iter - 1, compute_cost_function, 0);
 80049c4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80049c8:	f112 38ff 	adds.w	r8, r2, #4294967295
 80049cc:	f143 39ff 	adc.w	r9, r3, #4294967295
 80049d0:	f04f 0200 	mov.w	r2, #0
 80049d4:	f04f 0300 	mov.w	r3, #0
 80049d8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80049dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80049e0:	e9cd 2300 	strd	r2, r3, [sp]
 80049e4:	4642      	mov	r2, r8
 80049e6:	464b      	mov	r3, r9
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f7fe fe3d 	bl	8003668 <update_info>
    /* Print summary */
    if (work->settings->verbose && !work->summary_printed) print_summary(work);
#endif /* ifdef PRINTING */

    /* Check whether a termination criterion is triggered */
    check_termination(work, 0);
 80049ee:	f04f 0200 	mov.w	r2, #0
 80049f2:	f04f 0300 	mov.w	r3, #0
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f7fe ff4e 	bl	8003898 <check_termination>
  }

  // Compute objective value in case it was not
  // computed during the iterations
  if (!compute_cost_function && has_solution(work->info)){
 80049fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a00:	4313      	orrs	r3, r2
 8004a02:	d116      	bne.n	8004a32 <osqp_solve+0x1a6>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f7fe fda3 	bl	8003554 <has_solution>
 8004a0e:	4602      	mov	r2, r0
 8004a10:	460b      	mov	r3, r1
 8004a12:	4313      	orrs	r3, r2
 8004a14:	d00d      	beq.n	8004a32 <osqp_solve+0x1a6>
    work->info->obj_val = compute_obj_val(work, work->x);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	691a      	ldr	r2, [r3, #16]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8004a1e:	4611      	mov	r1, r2
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f7fd ff9d 	bl	8002960 <compute_obj_val>
 8004a26:	eeb0 7a40 	vmov.f32	s14, s0
 8004a2a:	eef0 7a60 	vmov.f32	s15, s1
 8004a2e:	ed84 7b0c 	vstr	d7, [r4, #48]	; 0x30
    print_summary(work);
  }
#endif /* ifdef PRINTING */

  /* if max iterations reached, change status accordingly */
  if (work->info->status_val == OSQP_UNSOLVED) {
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a36:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8004a3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a3e:	bf08      	it	eq
 8004a40:	f112 0f0a 	cmneq.w	r2, #10
 8004a44:	d113      	bne.n	8004a6e <osqp_solve+0x1e2>
    if (!check_termination(work, 1)) { // Try to check for approximate
 8004a46:	f04f 0201 	mov.w	r2, #1
 8004a4a:	f04f 0300 	mov.w	r3, #0
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f7fe ff22 	bl	8003898 <check_termination>
 8004a54:	4602      	mov	r2, r0
 8004a56:	460b      	mov	r3, r1
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	d108      	bne.n	8004a6e <osqp_solve+0x1e2>
      update_status(work->info, OSQP_MAX_ITER_REACHED);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8004a60:	f06f 0201 	mvn.w	r2, #1
 8004a64:	f04f 33ff 	mov.w	r3, #4294967295
 8004a68:	4608      	mov	r0, r1
 8004a6a:	f7fe fe67 	bl	800373c <update_status>
  /* Print final footer */
  if (work->settings->verbose) print_footer(work->info, work->settings->polish);
#endif /* ifdef PRINTING */

  // Store solution
  store_solution(work);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f7fe fdaa 	bl	80035c8 <store_solution>
#ifdef CTRLC
  // Restore previous signal handler
  osqp_end_interrupt_listener();
#endif /* ifdef CTRLC */

  return exitflag;
 8004a74:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8004a78:	4610      	mov	r0, r2
 8004a7a:	4619      	mov	r1, r3
 8004a7c:	3728      	adds	r7, #40	; 0x28
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a84:	0800a554 	.word	0x0800a554

08004a88 <osqp_update_lin_cost>:


/************************
* Update problem data  *
************************/
c_int osqp_update_lin_cost(OSQPWorkspace *work, const c_float *q_new) {
 8004a88:	b590      	push	{r4, r7, lr}
 8004a8a:	b085      	sub	sp, #20
 8004a8c:	af02      	add	r7, sp, #8
 8004a8e:	6078      	str	r0, [r7, #4]
 8004a90:	6039      	str	r1, [r7, #0]

  // Check if workspace has been initialized
  if (!work) return osqp_error(OSQP_WORKSPACE_NOT_INIT_ERROR);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d106      	bne.n	8004aa6 <osqp_update_lin_cost+0x1e>
 8004a98:	4924      	ldr	r1, [pc, #144]	; (8004b2c <osqp_update_lin_cost+0xa4>)
 8004a9a:	2007      	movs	r0, #7
 8004a9c:	f7ff f8aa 	bl	8003bf4 <_osqp_error>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	460b      	mov	r3, r1
 8004aa4:	e03c      	b.n	8004b20 <osqp_update_lin_cost+0x98>
  }
  osqp_tic(work->timer); // Start timer
#endif /* ifdef PROFILING */

  // Replace q by the new vector
  prea_vec_copy(q_new, work->data->q, work->data->n);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	6999      	ldr	r1, [r3, #24]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ab4:	6838      	ldr	r0, [r7, #0]
 8004ab6:	f7ff fa36 	bl	8003f26 <prea_vec_copy>

  // Scaling
  if (work->settings->scaling) {
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004abe:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	d023      	beq.n	8004b0e <osqp_update_lin_cost+0x86>
    vec_ew_prod(work->scaling->D, work->data->q, work->data->q, work->data->n);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aca:	6898      	ldr	r0, [r3, #8]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	6999      	ldr	r1, [r3, #24]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	699c      	ldr	r4, [r3, #24]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ae0:	e9cd 2300 	strd	r2, r3, [sp]
 8004ae4:	4622      	mov	r2, r4
 8004ae6:	f7ff fa93 	bl	8004010 <vec_ew_prod>
    vec_mult_scalar(work->data->q, work->scaling->c, work->data->n);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	6999      	ldr	r1, [r3, #24]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004af4:	ed93 7b00 	vldr	d7, [r3]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b00:	eeb0 0a47 	vmov.f32	s0, s14
 8004b04:	eef0 0a67 	vmov.f32	s1, s15
 8004b08:	4608      	mov	r0, r1
 8004b0a:	f7ff f9d7 	bl	8003ebc <vec_mult_scalar>
  }

  // Reset solver information
  reset_info(work->info);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b12:	4618      	mov	r0, r3
 8004b14:	f7fe fe02 	bl	800371c <reset_info>

#ifdef PROFILING
  work->info->update_time += osqp_toc(work->timer);
#endif /* ifdef PROFILING */

  return 0;
 8004b18:	f04f 0200 	mov.w	r2, #0
 8004b1c:	f04f 0300 	mov.w	r3, #0
}
 8004b20:	4610      	mov	r0, r2
 8004b22:	4619      	mov	r1, r3
 8004b24:	370c      	adds	r7, #12
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd90      	pop	{r4, r7, pc}
 8004b2a:	bf00      	nop
 8004b2c:	0800a560 	.word	0x0800a560

08004b30 <osqp_update_upper_bound>:
#endif /* ifdef PROFILING */

  return exitflag;
}

c_int osqp_update_upper_bound(OSQPWorkspace *work, const c_float *u_new) {
 8004b30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b32:	b089      	sub	sp, #36	; 0x24
 8004b34:	af02      	add	r7, sp, #8
 8004b36:	6078      	str	r0, [r7, #4]
 8004b38:	6039      	str	r1, [r7, #0]
  c_int i, exitflag = 0;
 8004b3a:	f04f 0200 	mov.w	r2, #0
 8004b3e:	f04f 0300 	mov.w	r3, #0
 8004b42:	e9c7 2302 	strd	r2, r3, [r7, #8]

  // Check if workspace has been initialized
  if (!work) return osqp_error(OSQP_WORKSPACE_NOT_INIT_ERROR);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d106      	bne.n	8004b5a <osqp_update_upper_bound+0x2a>
 8004b4c:	4933      	ldr	r1, [pc, #204]	; (8004c1c <osqp_update_upper_bound+0xec>)
 8004b4e:	2007      	movs	r0, #7
 8004b50:	f7ff f850 	bl	8003bf4 <_osqp_error>
 8004b54:	4602      	mov	r2, r0
 8004b56:	460b      	mov	r3, r1
 8004b58:	e05a      	b.n	8004c10 <osqp_update_upper_bound+0xe0>
  }
  osqp_tic(work->timer); // Start timer
#endif /* ifdef PROFILING */

  // Replace u by the new vector
  prea_vec_copy(u_new, work->data->u, work->data->m);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	6a19      	ldr	r1, [r3, #32]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004b68:	6838      	ldr	r0, [r7, #0]
 8004b6a:	f7ff f9dc 	bl	8003f26 <prea_vec_copy>

  // Scaling
  if (work->settings->scaling) {
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b72:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004b76:	4313      	orrs	r3, r2
 8004b78:	d011      	beq.n	8004b9e <osqp_update_upper_bound+0x6e>
    vec_ew_prod(work->scaling->E, work->data->u, work->data->u, work->data->m);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b7e:	68d8      	ldr	r0, [r3, #12]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	6a19      	ldr	r1, [r3, #32]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	6a1e      	ldr	r6, [r3, #32]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004b94:	e9cd 2300 	strd	r2, r3, [sp]
 8004b98:	4632      	mov	r2, r6
 8004b9a:	f7ff fa39 	bl	8004010 <vec_ew_prod>
  }

  // Check if upper bound is greater than lower bound
  for (i = 0; i < work->data->m; i++) {
 8004b9e:	f04f 0200 	mov.w	r2, #0
 8004ba2:	f04f 0300 	mov.w	r3, #0
 8004ba6:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8004baa:	e020      	b.n	8004bee <osqp_update_upper_bound+0xbe>
    if (work->data->u[i] < work->data->l[i]) {
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	6a1a      	ldr	r2, [r3, #32]
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	00db      	lsls	r3, r3, #3
 8004bb6:	4413      	add	r3, r2
 8004bb8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	69da      	ldr	r2, [r3, #28]
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	00db      	lsls	r3, r3, #3
 8004bc6:	4413      	add	r3, r2
 8004bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bcc:	f7fb ff8e 	bl	8000aec <__aeabi_dcmplt>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d004      	beq.n	8004be0 <osqp_update_upper_bound+0xb0>
#ifdef PRINTING
      c_eprint("lower bound must be lower than or equal to upper bound");
#endif /* ifdef PRINTING */
      return 1;
 8004bd6:	f04f 0201 	mov.w	r2, #1
 8004bda:	f04f 0300 	mov.w	r3, #0
 8004bde:	e017      	b.n	8004c10 <osqp_update_upper_bound+0xe0>
  for (i = 0; i < work->data->m; i++) {
 8004be0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004be4:	1c54      	adds	r4, r2, #1
 8004be6:	f143 0500 	adc.w	r5, r3, #0
 8004bea:	e9c7 4504 	strd	r4, r5, [r7, #16]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004bf6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004bfa:	4290      	cmp	r0, r2
 8004bfc:	eb71 0303 	sbcs.w	r3, r1, r3
 8004c00:	dbd4      	blt.n	8004bac <osqp_update_upper_bound+0x7c>
    }
  }

  // Reset solver information
  reset_info(work->info);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c06:	4618      	mov	r0, r3
 8004c08:	f7fe fd88 	bl	800371c <reset_info>

#ifdef PROFILING
  work->info->update_time += osqp_toc(work->timer);
#endif /* ifdef PROFILING */

  return exitflag;
 8004c0c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 8004c10:	4610      	mov	r0, r2
 8004c12:	4619      	mov	r1, r3
 8004c14:	371c      	adds	r7, #28
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c1a:	bf00      	nop
 8004c1c:	0800a578 	.word	0x0800a578

08004c20 <project>:
#include "proj.h"


void project(OSQPWorkspace *work, c_float *z) {
 8004c20:	b5b0      	push	{r4, r5, r7, lr}
 8004c22:	b086      	sub	sp, #24
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	6039      	str	r1, [r7, #0]
  c_int i, m;

  m = work->data->m;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004c32:	e9c7 2302 	strd	r2, r3, [r7, #8]

  for (i = 0; i < m; i++) {
 8004c36:	f04f 0200 	mov.w	r2, #0
 8004c3a:	f04f 0300 	mov.w	r3, #0
 8004c3e:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8004c42:	e066      	b.n	8004d12 <project+0xf2>
    z[i] = c_min(c_max(z[i],
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	00db      	lsls	r3, r3, #3
 8004c48:	683a      	ldr	r2, [r7, #0]
 8004c4a:	4413      	add	r3, r2
 8004c4c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	69da      	ldr	r2, [r3, #28]
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	00db      	lsls	r3, r3, #3
 8004c5a:	4413      	add	r3, r2
 8004c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c60:	f7fb ff62 	bl	8000b28 <__aeabi_dcmpgt>
 8004c64:	4603      	mov	r3, r0
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d006      	beq.n	8004c78 <project+0x58>
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	00db      	lsls	r3, r3, #3
 8004c6e:	683a      	ldr	r2, [r7, #0]
 8004c70:	4413      	add	r3, r2
 8004c72:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004c76:	e007      	b.n	8004c88 <project+0x68>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	69da      	ldr	r2, [r3, #28]
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	00db      	lsls	r3, r3, #3
 8004c82:	4413      	add	r3, r2
 8004c84:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	6a1a      	ldr	r2, [r3, #32]
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	00db      	lsls	r3, r3, #3
 8004c92:	4413      	add	r3, r2
 8004c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c98:	f7fb ff28 	bl	8000aec <__aeabi_dcmplt>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d022      	beq.n	8004ce8 <project+0xc8>
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	00db      	lsls	r3, r3, #3
 8004ca6:	683a      	ldr	r2, [r7, #0]
 8004ca8:	4413      	add	r3, r2
 8004caa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	69da      	ldr	r2, [r3, #28]
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	00db      	lsls	r3, r3, #3
 8004cb8:	4413      	add	r3, r2
 8004cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cbe:	f7fb ff33 	bl	8000b28 <__aeabi_dcmpgt>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d006      	beq.n	8004cd6 <project+0xb6>
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	00db      	lsls	r3, r3, #3
 8004ccc:	683a      	ldr	r2, [r7, #0]
 8004cce:	4413      	add	r3, r2
 8004cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cd4:	e010      	b.n	8004cf8 <project+0xd8>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	69da      	ldr	r2, [r3, #28]
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	00db      	lsls	r3, r3, #3
 8004ce0:	4413      	add	r3, r2
 8004ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ce6:	e007      	b.n	8004cf8 <project+0xd8>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	6a1a      	ldr	r2, [r3, #32]
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	00db      	lsls	r3, r3, #3
 8004cf2:	4413      	add	r3, r2
 8004cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cf8:	6939      	ldr	r1, [r7, #16]
 8004cfa:	00c9      	lsls	r1, r1, #3
 8004cfc:	6838      	ldr	r0, [r7, #0]
 8004cfe:	4401      	add	r1, r0
 8004d00:	e9c1 2300 	strd	r2, r3, [r1]
  for (i = 0; i < m; i++) {
 8004d04:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004d08:	1c54      	adds	r4, r2, #1
 8004d0a:	f143 0500 	adc.w	r5, r3, #0
 8004d0e:	e9c7 4504 	strd	r4, r5, [r7, #16]
 8004d12:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004d16:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d1a:	4290      	cmp	r0, r2
 8004d1c:	eb71 0303 	sbcs.w	r3, r1, r3
 8004d20:	db90      	blt.n	8004c44 <project+0x24>
                       work->data->l[i]), // Between lower
                 work->data->u[i]);       // and upper bounds
  }
}
 8004d22:	bf00      	nop
 8004d24:	bf00      	nop
 8004d26:	3718      	adds	r7, #24
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bdb0      	pop	{r4, r5, r7, pc}

08004d2c <QDLDL_Lsolve>:
// Solves (L+I)x = b
void QDLDL_Lsolve(const QDLDL_int    n,
                  const QDLDL_int*   Lp,
                  const QDLDL_int*   Li,
                  const QDLDL_float* Lx,
                  QDLDL_float* x){
 8004d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d30:	b08b      	sub	sp, #44	; 0x2c
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8004d38:	607a      	str	r2, [r7, #4]
 8004d3a:	603b      	str	r3, [r7, #0]

  QDLDL_int i,j;
  for(i = 0; i < n; i++){
 8004d3c:	f04f 0200 	mov.w	r2, #0
 8004d40:	f04f 0300 	mov.w	r3, #0
 8004d44:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8004d48:	e05a      	b.n	8004e00 <QDLDL_Lsolve+0xd4>
    QDLDL_float val = x[i];
 8004d4a:	6a3b      	ldr	r3, [r7, #32]
 8004d4c:	00db      	lsls	r3, r3, #3
 8004d4e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004d50:	4413      	add	r3, r2
 8004d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d56:	e9c7 2304 	strd	r2, r3, [r7, #16]
    for(j = Lp[i]; j < Lp[i+1]; j++){
 8004d5a:	6a3b      	ldr	r3, [r7, #32]
 8004d5c:	00db      	lsls	r3, r3, #3
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	4413      	add	r3, r2
 8004d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d66:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8004d6a:	e034      	b.n	8004dd6 <QDLDL_Lsolve+0xaa>
      x[Li[j]] -= Lx[j]*val;
 8004d6c:	69bb      	ldr	r3, [r7, #24]
 8004d6e:	00db      	lsls	r3, r3, #3
 8004d70:	683a      	ldr	r2, [r7, #0]
 8004d72:	4413      	add	r3, r2
 8004d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d78:	4613      	mov	r3, r2
 8004d7a:	00db      	lsls	r3, r3, #3
 8004d7c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004d7e:	4413      	add	r3, r2
 8004d80:	e9d3 ab00 	ldrd	sl, fp, [r3]
 8004d84:	69bb      	ldr	r3, [r7, #24]
 8004d86:	00db      	lsls	r3, r3, #3
 8004d88:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004d8a:	4413      	add	r3, r2
 8004d8c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004d90:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004d94:	f7fb fc38 	bl	8000608 <__aeabi_dmul>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	460b      	mov	r3, r1
 8004d9c:	4610      	mov	r0, r2
 8004d9e:	4619      	mov	r1, r3
 8004da0:	69bb      	ldr	r3, [r7, #24]
 8004da2:	00db      	lsls	r3, r3, #3
 8004da4:	683a      	ldr	r2, [r7, #0]
 8004da6:	4413      	add	r3, r2
 8004da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dac:	4613      	mov	r3, r2
 8004dae:	00db      	lsls	r3, r3, #3
 8004db0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004db2:	18d6      	adds	r6, r2, r3
 8004db4:	4602      	mov	r2, r0
 8004db6:	460b      	mov	r3, r1
 8004db8:	4650      	mov	r0, sl
 8004dba:	4659      	mov	r1, fp
 8004dbc:	f7fb fa6c 	bl	8000298 <__aeabi_dsub>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	460b      	mov	r3, r1
 8004dc4:	e9c6 2300 	strd	r2, r3, [r6]
    for(j = Lp[i]; j < Lp[i+1]; j++){
 8004dc8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004dcc:	1c54      	adds	r4, r2, #1
 8004dce:	f143 0500 	adc.w	r5, r3, #0
 8004dd2:	e9c7 4506 	strd	r4, r5, [r7, #24]
 8004dd6:	6a3b      	ldr	r3, [r7, #32]
 8004dd8:	3301      	adds	r3, #1
 8004dda:	00db      	lsls	r3, r3, #3
 8004ddc:	687a      	ldr	r2, [r7, #4]
 8004dde:	4413      	add	r3, r2
 8004de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004de4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004de8:	4290      	cmp	r0, r2
 8004dea:	eb71 0303 	sbcs.w	r3, r1, r3
 8004dee:	dbbd      	blt.n	8004d6c <QDLDL_Lsolve+0x40>
  for(i = 0; i < n; i++){
 8004df0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004df4:	f112 0801 	adds.w	r8, r2, #1
 8004df8:	f143 0900 	adc.w	r9, r3, #0
 8004dfc:	e9c7 8908 	strd	r8, r9, [r7, #32]
 8004e00:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004e04:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e08:	4290      	cmp	r0, r2
 8004e0a:	eb71 0303 	sbcs.w	r3, r1, r3
 8004e0e:	db9c      	blt.n	8004d4a <QDLDL_Lsolve+0x1e>
    }
  }
}
 8004e10:	bf00      	nop
 8004e12:	bf00      	nop
 8004e14:	372c      	adds	r7, #44	; 0x2c
 8004e16:	46bd      	mov	sp, r7
 8004e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004e1c <QDLDL_Ltsolve>:
// Solves (L+I)'x = b
void QDLDL_Ltsolve(const QDLDL_int    n,
                   const QDLDL_int*   Lp,
                   const QDLDL_int*   Li,
                   const QDLDL_float* Lx,
                   QDLDL_float* x){
 8004e1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e20:	b08a      	sub	sp, #40	; 0x28
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8004e28:	607a      	str	r2, [r7, #4]
 8004e2a:	603b      	str	r3, [r7, #0]

  QDLDL_int i,j;
  for(i = n-1; i>=0; i--){
 8004e2c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e30:	f112 3aff 	adds.w	sl, r2, #4294967295
 8004e34:	f143 3bff 	adc.w	fp, r3, #4294967295
 8004e38:	e9c7 ab08 	strd	sl, fp, [r7, #32]
 8004e3c:	e052      	b.n	8004ee4 <QDLDL_Ltsolve+0xc8>
    QDLDL_float val = x[i];
 8004e3e:	6a3b      	ldr	r3, [r7, #32]
 8004e40:	00db      	lsls	r3, r3, #3
 8004e42:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004e44:	4413      	add	r3, r2
 8004e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e4a:	e9c7 2304 	strd	r2, r3, [r7, #16]
    for(j = Lp[i]; j < Lp[i+1]; j++){
 8004e4e:	6a3b      	ldr	r3, [r7, #32]
 8004e50:	00db      	lsls	r3, r3, #3
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	4413      	add	r3, r2
 8004e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e5a:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8004e5e:	e024      	b.n	8004eaa <QDLDL_Ltsolve+0x8e>
      val -= Lx[j]*x[Li[j]];
 8004e60:	69bb      	ldr	r3, [r7, #24]
 8004e62:	00db      	lsls	r3, r3, #3
 8004e64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e66:	4413      	add	r3, r2
 8004e68:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004e6c:	69bb      	ldr	r3, [r7, #24]
 8004e6e:	00db      	lsls	r3, r3, #3
 8004e70:	683a      	ldr	r2, [r7, #0]
 8004e72:	4413      	add	r3, r2
 8004e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e78:	4613      	mov	r3, r2
 8004e7a:	00db      	lsls	r3, r3, #3
 8004e7c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004e7e:	4413      	add	r3, r2
 8004e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e84:	f7fb fbc0 	bl	8000608 <__aeabi_dmul>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	460b      	mov	r3, r1
 8004e8c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004e90:	f7fb fa02 	bl	8000298 <__aeabi_dsub>
 8004e94:	4602      	mov	r2, r0
 8004e96:	460b      	mov	r3, r1
 8004e98:	e9c7 2304 	strd	r2, r3, [r7, #16]
    for(j = Lp[i]; j < Lp[i+1]; j++){
 8004e9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ea0:	1c54      	adds	r4, r2, #1
 8004ea2:	f143 0500 	adc.w	r5, r3, #0
 8004ea6:	e9c7 4506 	strd	r4, r5, [r7, #24]
 8004eaa:	6a3b      	ldr	r3, [r7, #32]
 8004eac:	3301      	adds	r3, #1
 8004eae:	00db      	lsls	r3, r3, #3
 8004eb0:	687a      	ldr	r2, [r7, #4]
 8004eb2:	4413      	add	r3, r2
 8004eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eb8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004ebc:	4290      	cmp	r0, r2
 8004ebe:	eb71 0303 	sbcs.w	r3, r1, r3
 8004ec2:	dbcd      	blt.n	8004e60 <QDLDL_Ltsolve+0x44>
    }
    x[i] = val;
 8004ec4:	6a3b      	ldr	r3, [r7, #32]
 8004ec6:	00db      	lsls	r3, r3, #3
 8004ec8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004eca:	18d1      	adds	r1, r2, r3
 8004ecc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004ed0:	e9c1 2300 	strd	r2, r3, [r1]
  for(i = n-1; i>=0; i--){
 8004ed4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004ed8:	f112 38ff 	adds.w	r8, r2, #4294967295
 8004edc:	f143 39ff 	adc.w	r9, r3, #4294967295
 8004ee0:	e9c7 8908 	strd	r8, r9, [r7, #32]
 8004ee4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	daa8      	bge.n	8004e3e <QDLDL_Ltsolve+0x22>
  }
}
 8004eec:	bf00      	nop
 8004eee:	bf00      	nop
 8004ef0:	3728      	adds	r7, #40	; 0x28
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004ef8 <QDLDL_solve>:
void QDLDL_solve(const QDLDL_int       n,
                    const QDLDL_int*   Lp,
                    const QDLDL_int*   Li,
                    const QDLDL_float* Lx,
                    const QDLDL_float* Dinv,
                    QDLDL_float* x){
 8004ef8:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8004efc:	b088      	sub	sp, #32
 8004efe:	af02      	add	r7, sp, #8
 8004f00:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8004f04:	607a      	str	r2, [r7, #4]
 8004f06:	603b      	str	r3, [r7, #0]

  QDLDL_int i;

  QDLDL_Lsolve(n,Lp,Li,Lx,x);
 8004f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f0a:	9301      	str	r3, [sp, #4]
 8004f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f0e:	9300      	str	r3, [sp, #0]
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	687a      	ldr	r2, [r7, #4]
 8004f14:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004f18:	f7ff ff08 	bl	8004d2c <QDLDL_Lsolve>
  for(i = 0; i < n; i++) x[i] *= Dinv[i];
 8004f1c:	f04f 0200 	mov.w	r2, #0
 8004f20:	f04f 0300 	mov.w	r3, #0
 8004f24:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8004f28:	e01e      	b.n	8004f68 <QDLDL_solve+0x70>
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	00db      	lsls	r3, r3, #3
 8004f2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f30:	4413      	add	r3, r2
 8004f32:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	00db      	lsls	r3, r3, #3
 8004f3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f3c:	4413      	add	r3, r2
 8004f3e:	e9d3 bc00 	ldrd	fp, ip, [r3]
 8004f42:	693e      	ldr	r6, [r7, #16]
 8004f44:	00f6      	lsls	r6, r6, #3
 8004f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f48:	441e      	add	r6, r3
 8004f4a:	465a      	mov	r2, fp
 8004f4c:	4663      	mov	r3, ip
 8004f4e:	f7fb fb5b 	bl	8000608 <__aeabi_dmul>
 8004f52:	4602      	mov	r2, r0
 8004f54:	460b      	mov	r3, r1
 8004f56:	e9c6 2300 	strd	r2, r3, [r6]
 8004f5a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004f5e:	1c54      	adds	r4, r2, #1
 8004f60:	f143 0500 	adc.w	r5, r3, #0
 8004f64:	e9c7 4504 	strd	r4, r5, [r7, #16]
 8004f68:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004f6c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f70:	4290      	cmp	r0, r2
 8004f72:	eb71 0303 	sbcs.w	r3, r1, r3
 8004f76:	dbd8      	blt.n	8004f2a <QDLDL_solve+0x32>
  QDLDL_Ltsolve(n,Lp,Li,Lx,x);
 8004f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f7a:	9301      	str	r3, [sp, #4]
 8004f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f7e:	9300      	str	r3, [sp, #0]
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	687a      	ldr	r2, [r7, #4]
 8004f84:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004f88:	f7ff ff48 	bl	8004e1c <QDLDL_Ltsolve>
}
 8004f8c:	bf00      	nop
 8004f8e:	3718      	adds	r7, #24
 8004f90:	46bd      	mov	sp, r7
 8004f92:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}

08004f96 <permute_x>:

#endif  // EMBEDDED


// Permute x = P*b using P
void permute_x(c_int n, c_float * x, const c_float * b, const c_int * P) {
 8004f96:	b4b0      	push	{r4, r5, r7}
 8004f98:	b087      	sub	sp, #28
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8004fa0:	607a      	str	r2, [r7, #4]
 8004fa2:	603b      	str	r3, [r7, #0]
    c_int j;
    for (j = 0 ; j < n ; j++) x[j] = b[P[j]];
 8004fa4:	f04f 0200 	mov.w	r2, #0
 8004fa8:	f04f 0300 	mov.w	r3, #0
 8004fac:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8004fb0:	e018      	b.n	8004fe4 <permute_x+0x4e>
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	00db      	lsls	r3, r3, #3
 8004fb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fb8:	4413      	add	r3, r2
 8004fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fbe:	4613      	mov	r3, r2
 8004fc0:	00db      	lsls	r3, r3, #3
 8004fc2:	683a      	ldr	r2, [r7, #0]
 8004fc4:	4413      	add	r3, r2
 8004fc6:	693a      	ldr	r2, [r7, #16]
 8004fc8:	00d2      	lsls	r2, r2, #3
 8004fca:	6879      	ldr	r1, [r7, #4]
 8004fcc:	4411      	add	r1, r2
 8004fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fd2:	e9c1 2300 	strd	r2, r3, [r1]
 8004fd6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004fda:	1c54      	adds	r4, r2, #1
 8004fdc:	f143 0500 	adc.w	r5, r3, #0
 8004fe0:	e9c7 4504 	strd	r4, r5, [r7, #16]
 8004fe4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004fe8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004fec:	4290      	cmp	r0, r2
 8004fee:	eb71 0303 	sbcs.w	r3, r1, r3
 8004ff2:	dbde      	blt.n	8004fb2 <permute_x+0x1c>
}
 8004ff4:	bf00      	nop
 8004ff6:	bf00      	nop
 8004ff8:	371c      	adds	r7, #28
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bcb0      	pop	{r4, r5, r7}
 8004ffe:	4770      	bx	lr

08005000 <permutet_x>:

// Permute x = P'*b using P
void permutet_x(c_int n, c_float * x, const c_float * b, const c_int * P) {
 8005000:	b4b0      	push	{r4, r5, r7}
 8005002:	b087      	sub	sp, #28
 8005004:	af00      	add	r7, sp, #0
 8005006:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800500a:	607a      	str	r2, [r7, #4]
 800500c:	603b      	str	r3, [r7, #0]
    c_int j;
    for (j = 0 ; j < n ; j++) x[P[j]] = b[j];
 800500e:	f04f 0200 	mov.w	r2, #0
 8005012:	f04f 0300 	mov.w	r3, #0
 8005016:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800501a:	e018      	b.n	800504e <permutet_x+0x4e>
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	00db      	lsls	r3, r3, #3
 8005020:	683a      	ldr	r2, [r7, #0]
 8005022:	18d0      	adds	r0, r2, r3
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	00db      	lsls	r3, r3, #3
 8005028:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800502a:	4413      	add	r3, r2
 800502c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005030:	4613      	mov	r3, r2
 8005032:	00db      	lsls	r3, r3, #3
 8005034:	687a      	ldr	r2, [r7, #4]
 8005036:	18d1      	adds	r1, r2, r3
 8005038:	e9d0 2300 	ldrd	r2, r3, [r0]
 800503c:	e9c1 2300 	strd	r2, r3, [r1]
 8005040:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005044:	1c54      	adds	r4, r2, #1
 8005046:	f143 0500 	adc.w	r5, r3, #0
 800504a:	e9c7 4504 	strd	r4, r5, [r7, #16]
 800504e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005052:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005056:	4290      	cmp	r0, r2
 8005058:	eb71 0303 	sbcs.w	r3, r1, r3
 800505c:	dbde      	blt.n	800501c <permutet_x+0x1c>
}
 800505e:	bf00      	nop
 8005060:	bf00      	nop
 8005062:	371c      	adds	r7, #28
 8005064:	46bd      	mov	sp, r7
 8005066:	bcb0      	pop	{r4, r5, r7}
 8005068:	4770      	bx	lr

0800506a <LDLSolve>:


static void LDLSolve(c_float *x, c_float *b, const csc *L, const c_float *Dinv, const c_int *P, c_float *bp) {
 800506a:	b5b0      	push	{r4, r5, r7, lr}
 800506c:	b088      	sub	sp, #32
 800506e:	af04      	add	r7, sp, #16
 8005070:	60f8      	str	r0, [r7, #12]
 8005072:	60b9      	str	r1, [r7, #8]
 8005074:	607a      	str	r2, [r7, #4]
 8005076:	603b      	str	r3, [r7, #0]
    /* solves P'LDL'P x = b for x */
    permute_x(L->n, bp, b, P);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800507e:	6a3b      	ldr	r3, [r7, #32]
 8005080:	9300      	str	r3, [sp, #0]
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005086:	f7ff ff86 	bl	8004f96 <permute_x>
    QDLDL_solve(L->n, L->p, L->i, L->x, Dinv, bp);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	699c      	ldr	r4, [r3, #24]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	69dd      	ldr	r5, [r3, #28]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6a1b      	ldr	r3, [r3, #32]
 800509c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800509e:	9202      	str	r2, [sp, #8]
 80050a0:	683a      	ldr	r2, [r7, #0]
 80050a2:	9201      	str	r2, [sp, #4]
 80050a4:	9300      	str	r3, [sp, #0]
 80050a6:	462b      	mov	r3, r5
 80050a8:	4622      	mov	r2, r4
 80050aa:	f7ff ff25 	bl	8004ef8 <QDLDL_solve>
    permutet_x(L->n, x, bp, P);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80050b4:	6a3b      	ldr	r3, [r7, #32]
 80050b6:	9300      	str	r3, [sp, #0]
 80050b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ba:	68fa      	ldr	r2, [r7, #12]
 80050bc:	f7ff ffa0 	bl	8005000 <permutet_x>

}
 80050c0:	bf00      	nop
 80050c2:	3710      	adds	r7, #16
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bdb0      	pop	{r4, r5, r7, pc}

080050c8 <solve_linsys_qdldl>:


c_int solve_linsys_qdldl(qdldl_solver * s, c_float * b) {
 80050c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050cc:	b089      	sub	sp, #36	; 0x24
 80050ce:	af02      	add	r7, sp, #8
 80050d0:	60f8      	str	r0, [r7, #12]
 80050d2:	60b9      	str	r1, [r7, #8]
        /* stores solution to the KKT system in b */
        LDLSolve(b, b, s->L, s->Dinv, s->P, s->bp);
    } else {
#endif
        /* stores solution to the KKT system in s->sol */
        LDLSolve(s->sol, b, s->L, s->Dinv, s->P, s->bp);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	6998      	ldr	r0, [r3, #24]
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	6899      	ldr	r1, [r3, #8]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	68de      	ldr	r6, [r3, #12]
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	691b      	ldr	r3, [r3, #16]
 80050e4:	68fa      	ldr	r2, [r7, #12]
 80050e6:	6952      	ldr	r2, [r2, #20]
 80050e8:	9201      	str	r2, [sp, #4]
 80050ea:	9300      	str	r3, [sp, #0]
 80050ec:	4633      	mov	r3, r6
 80050ee:	460a      	mov	r2, r1
 80050f0:	68b9      	ldr	r1, [r7, #8]
 80050f2:	f7ff ffba 	bl	800506a <LDLSolve>

        /* copy x_tilde from s->sol */
        for (j = 0 ; j < s->n ; j++) {
 80050f6:	f04f 0200 	mov.w	r2, #0
 80050fa:	f04f 0300 	mov.w	r3, #0
 80050fe:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8005102:	e014      	b.n	800512e <solve_linsys_qdldl+0x66>
            b[j] = s->sol[j];
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	699a      	ldr	r2, [r3, #24]
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	00db      	lsls	r3, r3, #3
 800510c:	4413      	add	r3, r2
 800510e:	693a      	ldr	r2, [r7, #16]
 8005110:	00d2      	lsls	r2, r2, #3
 8005112:	68b9      	ldr	r1, [r7, #8]
 8005114:	4411      	add	r1, r2
 8005116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800511a:	e9c1 2300 	strd	r2, r3, [r1]
        for (j = 0 ; j < s->n ; j++) {
 800511e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005122:	f112 0801 	adds.w	r8, r2, #1
 8005126:	f143 0900 	adc.w	r9, r3, #0
 800512a:	e9c7 8904 	strd	r8, r9, [r7, #16]
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8005134:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005138:	4290      	cmp	r0, r2
 800513a:	eb71 0303 	sbcs.w	r3, r1, r3
 800513e:	dbe1      	blt.n	8005104 <solve_linsys_qdldl+0x3c>
        }

        /* compute z_tilde from b and s->sol */
        for (j = 0 ; j < s->m ; j++) {
 8005140:	f04f 0200 	mov.w	r2, #0
 8005144:	f04f 0300 	mov.w	r3, #0
 8005148:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800514c:	e03f      	b.n	80051ce <solve_linsys_qdldl+0x106>
            b[j + s->n] += s->rho_inv_vec[j] * s->sol[j + s->n];
 800514e:	6939      	ldr	r1, [r7, #16]
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8005156:	4613      	mov	r3, r2
 8005158:	440b      	add	r3, r1
 800515a:	00db      	lsls	r3, r3, #3
 800515c:	68ba      	ldr	r2, [r7, #8]
 800515e:	4413      	add	r3, r2
 8005160:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	69da      	ldr	r2, [r3, #28]
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	00db      	lsls	r3, r3, #3
 800516c:	4413      	add	r3, r2
 800516e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	699e      	ldr	r6, [r3, #24]
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	607b      	str	r3, [r7, #4]
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8005180:	4613      	mov	r3, r2
 8005182:	687a      	ldr	r2, [r7, #4]
 8005184:	4413      	add	r3, r2
 8005186:	00db      	lsls	r3, r3, #3
 8005188:	4433      	add	r3, r6
 800518a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800518e:	f7fb fa3b 	bl	8000608 <__aeabi_dmul>
 8005192:	4602      	mov	r2, r0
 8005194:	460b      	mov	r3, r1
 8005196:	4692      	mov	sl, r2
 8005198:	469b      	mov	fp, r3
 800519a:	6939      	ldr	r1, [r7, #16]
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80051a2:	4613      	mov	r3, r2
 80051a4:	440b      	add	r3, r1
 80051a6:	00db      	lsls	r3, r3, #3
 80051a8:	68ba      	ldr	r2, [r7, #8]
 80051aa:	18d6      	adds	r6, r2, r3
 80051ac:	4652      	mov	r2, sl
 80051ae:	465b      	mov	r3, fp
 80051b0:	4640      	mov	r0, r8
 80051b2:	4649      	mov	r1, r9
 80051b4:	f7fb f872 	bl	800029c <__adddf3>
 80051b8:	4602      	mov	r2, r0
 80051ba:	460b      	mov	r3, r1
 80051bc:	e9c6 2300 	strd	r2, r3, [r6]
        for (j = 0 ; j < s->m ; j++) {
 80051c0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80051c4:	1c54      	adds	r4, r2, #1
 80051c6:	f143 0500 	adc.w	r5, r3, #0
 80051ca:	e9c7 4504 	strd	r4, r5, [r7, #16]
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80051d4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80051d8:	4290      	cmp	r0, r2
 80051da:	eb71 0303 	sbcs.w	r3, r1, r3
 80051de:	dbb6      	blt.n	800514e <solve_linsys_qdldl+0x86>
        }
#ifndef EMBEDDED
    }
#endif

    return 0;
 80051e0:	f04f 0200 	mov.w	r2, #0
 80051e4:	f04f 0300 	mov.w	r3, #0
}
 80051e8:	4610      	mov	r0, r2
 80051ea:	4619      	mov	r1, r3
 80051ec:	371c      	adds	r7, #28
 80051ee:	46bd      	mov	sp, r7
 80051f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080051f4 <unscale_solution>:
  vec_ew_prod(work->scaling->Einv, work->data->u, work->data->u, work->data->m);

  return 0;
}

c_int unscale_solution(OSQPWorkspace *work) {
 80051f4:	b590      	push	{r4, r7, lr}
 80051f6:	b085      	sub	sp, #20
 80051f8:	af02      	add	r7, sp, #8
 80051fa:	6078      	str	r0, [r7, #4]
  // primal
  vec_ew_prod(work->scaling->D,
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005200:	6898      	ldr	r0, [r3, #8]
              work->solution->x,
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005206:	6819      	ldr	r1, [r3, #0]
              work->solution->x,
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  vec_ew_prod(work->scaling->D,
 800520c:	681c      	ldr	r4, [r3, #0]
              work->data->n);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
  vec_ew_prod(work->scaling->D,
 8005212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005216:	e9cd 2300 	strd	r2, r3, [sp]
 800521a:	4622      	mov	r2, r4
 800521c:	f7fe fef8 	bl	8004010 <vec_ew_prod>

  // dual
  vec_ew_prod(work->scaling->E,
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005224:	68d8      	ldr	r0, [r3, #12]
              work->solution->y,
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800522a:	6859      	ldr	r1, [r3, #4]
              work->solution->y,
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  vec_ew_prod(work->scaling->E,
 8005230:	685c      	ldr	r4, [r3, #4]
              work->data->m);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
  vec_ew_prod(work->scaling->E,
 8005236:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800523a:	e9cd 2300 	strd	r2, r3, [sp]
 800523e:	4622      	mov	r2, r4
 8005240:	f7fe fee6 	bl	8004010 <vec_ew_prod>
  vec_mult_scalar(work->solution->y, work->scaling->cinv, work->data->m);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005248:	6859      	ldr	r1, [r3, #4]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800524e:	ed93 7b04 	vldr	d7, [r3, #16]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800525a:	eeb0 0a47 	vmov.f32	s0, s14
 800525e:	eef0 0a67 	vmov.f32	s1, s15
 8005262:	4608      	mov	r0, r1
 8005264:	f7fe fe2a 	bl	8003ebc <vec_mult_scalar>

  return 0;
 8005268:	f04f 0200 	mov.w	r2, #0
 800526c:	f04f 0300 	mov.w	r3, #0
}
 8005270:	4610      	mov	r0, r2
 8005272:	4619      	mov	r1, r3
 8005274:	370c      	adds	r7, #12
 8005276:	46bd      	mov	sp, r7
 8005278:	bd90      	pop	{r4, r7, pc}

0800527a <c_strcpy>:
#endif /* ifdef PRINTING */

/**********************
* Utility Functions  *
**********************/
void c_strcpy(char dest[], const char source[]) {
 800527a:	b480      	push	{r7}
 800527c:	b085      	sub	sp, #20
 800527e:	af00      	add	r7, sp, #0
 8005280:	6078      	str	r0, [r7, #4]
 8005282:	6039      	str	r1, [r7, #0]
  int i = 0;
 8005284:	2300      	movs	r3, #0
 8005286:	60fb      	str	r3, [r7, #12]

  while (1) {
    dest[i] = source[i];
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	683a      	ldr	r2, [r7, #0]
 800528c:	441a      	add	r2, r3
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	6879      	ldr	r1, [r7, #4]
 8005292:	440b      	add	r3, r1
 8005294:	7812      	ldrb	r2, [r2, #0]
 8005296:	701a      	strb	r2, [r3, #0]

    if (dest[i] == '\0') break;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	687a      	ldr	r2, [r7, #4]
 800529c:	4413      	add	r3, r2
 800529e:	781b      	ldrb	r3, [r3, #0]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d003      	beq.n	80052ac <c_strcpy+0x32>
    i++;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	3301      	adds	r3, #1
 80052a8:	60fb      	str	r3, [r7, #12]
    dest[i] = source[i];
 80052aa:	e7ed      	b.n	8005288 <c_strcpy+0xe>
    if (dest[i] == '\0') break;
 80052ac:	bf00      	nop
  }
}
 80052ae:	bf00      	nop
 80052b0:	3714      	adds	r7, #20
 80052b2:	46bd      	mov	sp, r7
 80052b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b8:	4770      	bx	lr
	...

080052bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80052bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80052f4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80052c0:	480d      	ldr	r0, [pc, #52]	; (80052f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80052c2:	490e      	ldr	r1, [pc, #56]	; (80052fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80052c4:	4a0e      	ldr	r2, [pc, #56]	; (8005300 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80052c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80052c8:	e002      	b.n	80052d0 <LoopCopyDataInit>

080052ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80052ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80052cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80052ce:	3304      	adds	r3, #4

080052d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80052d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80052d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80052d4:	d3f9      	bcc.n	80052ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80052d6:	4a0b      	ldr	r2, [pc, #44]	; (8005304 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80052d8:	4c0b      	ldr	r4, [pc, #44]	; (8005308 <LoopFillZerobss+0x26>)
  movs r3, #0
 80052da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80052dc:	e001      	b.n	80052e2 <LoopFillZerobss>

080052de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80052de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80052e0:	3204      	adds	r2, #4

080052e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80052e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80052e4:	d3fb      	bcc.n	80052de <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80052e6:	f7fd f881 	bl	80023ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80052ea:	f002 fa75 	bl	80077d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80052ee:	f7fc fa5d 	bl	80017ac <main>
  bx  lr    
 80052f2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80052f4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80052f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80052fc:	2000199c 	.word	0x2000199c
  ldr r2, =_sidata
 8005300:	0800a980 	.word	0x0800a980
  ldr r2, =_sbss
 8005304:	200019a0 	.word	0x200019a0
  ldr r4, =_ebss
 8005308:	2000257c 	.word	0x2000257c

0800530c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800530c:	e7fe      	b.n	800530c <ADC_IRQHandler>
	...

08005310 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005314:	4b0e      	ldr	r3, [pc, #56]	; (8005350 <HAL_Init+0x40>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a0d      	ldr	r2, [pc, #52]	; (8005350 <HAL_Init+0x40>)
 800531a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800531e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005320:	4b0b      	ldr	r3, [pc, #44]	; (8005350 <HAL_Init+0x40>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a0a      	ldr	r2, [pc, #40]	; (8005350 <HAL_Init+0x40>)
 8005326:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800532a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800532c:	4b08      	ldr	r3, [pc, #32]	; (8005350 <HAL_Init+0x40>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a07      	ldr	r2, [pc, #28]	; (8005350 <HAL_Init+0x40>)
 8005332:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005336:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005338:	2003      	movs	r0, #3
 800533a:	f000 f90d 	bl	8005558 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800533e:	200f      	movs	r0, #15
 8005340:	f000 f808 	bl	8005354 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005344:	f7fc fe6a 	bl	800201c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005348:	2300      	movs	r3, #0
}
 800534a:	4618      	mov	r0, r3
 800534c:	bd80      	pop	{r7, pc}
 800534e:	bf00      	nop
 8005350:	40023c00 	.word	0x40023c00

08005354 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b082      	sub	sp, #8
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800535c:	4b12      	ldr	r3, [pc, #72]	; (80053a8 <HAL_InitTick+0x54>)
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	4b12      	ldr	r3, [pc, #72]	; (80053ac <HAL_InitTick+0x58>)
 8005362:	781b      	ldrb	r3, [r3, #0]
 8005364:	4619      	mov	r1, r3
 8005366:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800536a:	fbb3 f3f1 	udiv	r3, r3, r1
 800536e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005372:	4618      	mov	r0, r3
 8005374:	f000 f917 	bl	80055a6 <HAL_SYSTICK_Config>
 8005378:	4603      	mov	r3, r0
 800537a:	2b00      	cmp	r3, #0
 800537c:	d001      	beq.n	8005382 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	e00e      	b.n	80053a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2b0f      	cmp	r3, #15
 8005386:	d80a      	bhi.n	800539e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005388:	2200      	movs	r2, #0
 800538a:	6879      	ldr	r1, [r7, #4]
 800538c:	f04f 30ff 	mov.w	r0, #4294967295
 8005390:	f000 f8ed 	bl	800556e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005394:	4a06      	ldr	r2, [pc, #24]	; (80053b0 <HAL_InitTick+0x5c>)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800539a:	2300      	movs	r3, #0
 800539c:	e000      	b.n	80053a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800539e:	2301      	movs	r3, #1
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	3708      	adds	r7, #8
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}
 80053a8:	200005f8 	.word	0x200005f8
 80053ac:	200017c8 	.word	0x200017c8
 80053b0:	200017c4 	.word	0x200017c4

080053b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80053b4:	b480      	push	{r7}
 80053b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80053b8:	4b06      	ldr	r3, [pc, #24]	; (80053d4 <HAL_IncTick+0x20>)
 80053ba:	781b      	ldrb	r3, [r3, #0]
 80053bc:	461a      	mov	r2, r3
 80053be:	4b06      	ldr	r3, [pc, #24]	; (80053d8 <HAL_IncTick+0x24>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4413      	add	r3, r2
 80053c4:	4a04      	ldr	r2, [pc, #16]	; (80053d8 <HAL_IncTick+0x24>)
 80053c6:	6013      	str	r3, [r2, #0]
}
 80053c8:	bf00      	nop
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr
 80053d2:	bf00      	nop
 80053d4:	200017c8 	.word	0x200017c8
 80053d8:	20002568 	.word	0x20002568

080053dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80053dc:	b480      	push	{r7}
 80053de:	af00      	add	r7, sp, #0
  return uwTick;
 80053e0:	4b03      	ldr	r3, [pc, #12]	; (80053f0 <HAL_GetTick+0x14>)
 80053e2:	681b      	ldr	r3, [r3, #0]
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr
 80053ee:	bf00      	nop
 80053f0:	20002568 	.word	0x20002568

080053f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b085      	sub	sp, #20
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f003 0307 	and.w	r3, r3, #7
 8005402:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005404:	4b0c      	ldr	r3, [pc, #48]	; (8005438 <__NVIC_SetPriorityGrouping+0x44>)
 8005406:	68db      	ldr	r3, [r3, #12]
 8005408:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800540a:	68ba      	ldr	r2, [r7, #8]
 800540c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005410:	4013      	ands	r3, r2
 8005412:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800541c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005420:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005424:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005426:	4a04      	ldr	r2, [pc, #16]	; (8005438 <__NVIC_SetPriorityGrouping+0x44>)
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	60d3      	str	r3, [r2, #12]
}
 800542c:	bf00      	nop
 800542e:	3714      	adds	r7, #20
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr
 8005438:	e000ed00 	.word	0xe000ed00

0800543c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800543c:	b480      	push	{r7}
 800543e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005440:	4b04      	ldr	r3, [pc, #16]	; (8005454 <__NVIC_GetPriorityGrouping+0x18>)
 8005442:	68db      	ldr	r3, [r3, #12]
 8005444:	0a1b      	lsrs	r3, r3, #8
 8005446:	f003 0307 	and.w	r3, r3, #7
}
 800544a:	4618      	mov	r0, r3
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr
 8005454:	e000ed00 	.word	0xe000ed00

08005458 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005458:	b480      	push	{r7}
 800545a:	b083      	sub	sp, #12
 800545c:	af00      	add	r7, sp, #0
 800545e:	4603      	mov	r3, r0
 8005460:	6039      	str	r1, [r7, #0]
 8005462:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005464:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005468:	2b00      	cmp	r3, #0
 800546a:	db0a      	blt.n	8005482 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	b2da      	uxtb	r2, r3
 8005470:	490c      	ldr	r1, [pc, #48]	; (80054a4 <__NVIC_SetPriority+0x4c>)
 8005472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005476:	0112      	lsls	r2, r2, #4
 8005478:	b2d2      	uxtb	r2, r2
 800547a:	440b      	add	r3, r1
 800547c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005480:	e00a      	b.n	8005498 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	b2da      	uxtb	r2, r3
 8005486:	4908      	ldr	r1, [pc, #32]	; (80054a8 <__NVIC_SetPriority+0x50>)
 8005488:	79fb      	ldrb	r3, [r7, #7]
 800548a:	f003 030f 	and.w	r3, r3, #15
 800548e:	3b04      	subs	r3, #4
 8005490:	0112      	lsls	r2, r2, #4
 8005492:	b2d2      	uxtb	r2, r2
 8005494:	440b      	add	r3, r1
 8005496:	761a      	strb	r2, [r3, #24]
}
 8005498:	bf00      	nop
 800549a:	370c      	adds	r7, #12
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr
 80054a4:	e000e100 	.word	0xe000e100
 80054a8:	e000ed00 	.word	0xe000ed00

080054ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b089      	sub	sp, #36	; 0x24
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	60f8      	str	r0, [r7, #12]
 80054b4:	60b9      	str	r1, [r7, #8]
 80054b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f003 0307 	and.w	r3, r3, #7
 80054be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80054c0:	69fb      	ldr	r3, [r7, #28]
 80054c2:	f1c3 0307 	rsb	r3, r3, #7
 80054c6:	2b04      	cmp	r3, #4
 80054c8:	bf28      	it	cs
 80054ca:	2304      	movcs	r3, #4
 80054cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80054ce:	69fb      	ldr	r3, [r7, #28]
 80054d0:	3304      	adds	r3, #4
 80054d2:	2b06      	cmp	r3, #6
 80054d4:	d902      	bls.n	80054dc <NVIC_EncodePriority+0x30>
 80054d6:	69fb      	ldr	r3, [r7, #28]
 80054d8:	3b03      	subs	r3, #3
 80054da:	e000      	b.n	80054de <NVIC_EncodePriority+0x32>
 80054dc:	2300      	movs	r3, #0
 80054de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054e0:	f04f 32ff 	mov.w	r2, #4294967295
 80054e4:	69bb      	ldr	r3, [r7, #24]
 80054e6:	fa02 f303 	lsl.w	r3, r2, r3
 80054ea:	43da      	mvns	r2, r3
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	401a      	ands	r2, r3
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80054f4:	f04f 31ff 	mov.w	r1, #4294967295
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	fa01 f303 	lsl.w	r3, r1, r3
 80054fe:	43d9      	mvns	r1, r3
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005504:	4313      	orrs	r3, r2
         );
}
 8005506:	4618      	mov	r0, r3
 8005508:	3724      	adds	r7, #36	; 0x24
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr
	...

08005514 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b082      	sub	sp, #8
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	3b01      	subs	r3, #1
 8005520:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005524:	d301      	bcc.n	800552a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005526:	2301      	movs	r3, #1
 8005528:	e00f      	b.n	800554a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800552a:	4a0a      	ldr	r2, [pc, #40]	; (8005554 <SysTick_Config+0x40>)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	3b01      	subs	r3, #1
 8005530:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005532:	210f      	movs	r1, #15
 8005534:	f04f 30ff 	mov.w	r0, #4294967295
 8005538:	f7ff ff8e 	bl	8005458 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800553c:	4b05      	ldr	r3, [pc, #20]	; (8005554 <SysTick_Config+0x40>)
 800553e:	2200      	movs	r2, #0
 8005540:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005542:	4b04      	ldr	r3, [pc, #16]	; (8005554 <SysTick_Config+0x40>)
 8005544:	2207      	movs	r2, #7
 8005546:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005548:	2300      	movs	r3, #0
}
 800554a:	4618      	mov	r0, r3
 800554c:	3708      	adds	r7, #8
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}
 8005552:	bf00      	nop
 8005554:	e000e010 	.word	0xe000e010

08005558 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b082      	sub	sp, #8
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f7ff ff47 	bl	80053f4 <__NVIC_SetPriorityGrouping>
}
 8005566:	bf00      	nop
 8005568:	3708      	adds	r7, #8
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}

0800556e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800556e:	b580      	push	{r7, lr}
 8005570:	b086      	sub	sp, #24
 8005572:	af00      	add	r7, sp, #0
 8005574:	4603      	mov	r3, r0
 8005576:	60b9      	str	r1, [r7, #8]
 8005578:	607a      	str	r2, [r7, #4]
 800557a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800557c:	2300      	movs	r3, #0
 800557e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005580:	f7ff ff5c 	bl	800543c <__NVIC_GetPriorityGrouping>
 8005584:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005586:	687a      	ldr	r2, [r7, #4]
 8005588:	68b9      	ldr	r1, [r7, #8]
 800558a:	6978      	ldr	r0, [r7, #20]
 800558c:	f7ff ff8e 	bl	80054ac <NVIC_EncodePriority>
 8005590:	4602      	mov	r2, r0
 8005592:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005596:	4611      	mov	r1, r2
 8005598:	4618      	mov	r0, r3
 800559a:	f7ff ff5d 	bl	8005458 <__NVIC_SetPriority>
}
 800559e:	bf00      	nop
 80055a0:	3718      	adds	r7, #24
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}

080055a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80055a6:	b580      	push	{r7, lr}
 80055a8:	b082      	sub	sp, #8
 80055aa:	af00      	add	r7, sp, #0
 80055ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f7ff ffb0 	bl	8005514 <SysTick_Config>
 80055b4:	4603      	mov	r3, r0
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3708      	adds	r7, #8
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}
	...

080055c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b089      	sub	sp, #36	; 0x24
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
 80055c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80055ca:	2300      	movs	r3, #0
 80055cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80055ce:	2300      	movs	r3, #0
 80055d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80055d2:	2300      	movs	r3, #0
 80055d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80055d6:	2300      	movs	r3, #0
 80055d8:	61fb      	str	r3, [r7, #28]
 80055da:	e159      	b.n	8005890 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80055dc:	2201      	movs	r2, #1
 80055de:	69fb      	ldr	r3, [r7, #28]
 80055e0:	fa02 f303 	lsl.w	r3, r2, r3
 80055e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	697a      	ldr	r2, [r7, #20]
 80055ec:	4013      	ands	r3, r2
 80055ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80055f0:	693a      	ldr	r2, [r7, #16]
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	429a      	cmp	r2, r3
 80055f6:	f040 8148 	bne.w	800588a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	f003 0303 	and.w	r3, r3, #3
 8005602:	2b01      	cmp	r3, #1
 8005604:	d005      	beq.n	8005612 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800560e:	2b02      	cmp	r3, #2
 8005610:	d130      	bne.n	8005674 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005618:	69fb      	ldr	r3, [r7, #28]
 800561a:	005b      	lsls	r3, r3, #1
 800561c:	2203      	movs	r2, #3
 800561e:	fa02 f303 	lsl.w	r3, r2, r3
 8005622:	43db      	mvns	r3, r3
 8005624:	69ba      	ldr	r2, [r7, #24]
 8005626:	4013      	ands	r3, r2
 8005628:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	68da      	ldr	r2, [r3, #12]
 800562e:	69fb      	ldr	r3, [r7, #28]
 8005630:	005b      	lsls	r3, r3, #1
 8005632:	fa02 f303 	lsl.w	r3, r2, r3
 8005636:	69ba      	ldr	r2, [r7, #24]
 8005638:	4313      	orrs	r3, r2
 800563a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	69ba      	ldr	r2, [r7, #24]
 8005640:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005648:	2201      	movs	r2, #1
 800564a:	69fb      	ldr	r3, [r7, #28]
 800564c:	fa02 f303 	lsl.w	r3, r2, r3
 8005650:	43db      	mvns	r3, r3
 8005652:	69ba      	ldr	r2, [r7, #24]
 8005654:	4013      	ands	r3, r2
 8005656:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	091b      	lsrs	r3, r3, #4
 800565e:	f003 0201 	and.w	r2, r3, #1
 8005662:	69fb      	ldr	r3, [r7, #28]
 8005664:	fa02 f303 	lsl.w	r3, r2, r3
 8005668:	69ba      	ldr	r2, [r7, #24]
 800566a:	4313      	orrs	r3, r2
 800566c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	69ba      	ldr	r2, [r7, #24]
 8005672:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	f003 0303 	and.w	r3, r3, #3
 800567c:	2b03      	cmp	r3, #3
 800567e:	d017      	beq.n	80056b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	68db      	ldr	r3, [r3, #12]
 8005684:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005686:	69fb      	ldr	r3, [r7, #28]
 8005688:	005b      	lsls	r3, r3, #1
 800568a:	2203      	movs	r2, #3
 800568c:	fa02 f303 	lsl.w	r3, r2, r3
 8005690:	43db      	mvns	r3, r3
 8005692:	69ba      	ldr	r2, [r7, #24]
 8005694:	4013      	ands	r3, r2
 8005696:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	689a      	ldr	r2, [r3, #8]
 800569c:	69fb      	ldr	r3, [r7, #28]
 800569e:	005b      	lsls	r3, r3, #1
 80056a0:	fa02 f303 	lsl.w	r3, r2, r3
 80056a4:	69ba      	ldr	r2, [r7, #24]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	69ba      	ldr	r2, [r7, #24]
 80056ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	f003 0303 	and.w	r3, r3, #3
 80056b8:	2b02      	cmp	r3, #2
 80056ba:	d123      	bne.n	8005704 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80056bc:	69fb      	ldr	r3, [r7, #28]
 80056be:	08da      	lsrs	r2, r3, #3
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	3208      	adds	r2, #8
 80056c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80056ca:	69fb      	ldr	r3, [r7, #28]
 80056cc:	f003 0307 	and.w	r3, r3, #7
 80056d0:	009b      	lsls	r3, r3, #2
 80056d2:	220f      	movs	r2, #15
 80056d4:	fa02 f303 	lsl.w	r3, r2, r3
 80056d8:	43db      	mvns	r3, r3
 80056da:	69ba      	ldr	r2, [r7, #24]
 80056dc:	4013      	ands	r3, r2
 80056de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	691a      	ldr	r2, [r3, #16]
 80056e4:	69fb      	ldr	r3, [r7, #28]
 80056e6:	f003 0307 	and.w	r3, r3, #7
 80056ea:	009b      	lsls	r3, r3, #2
 80056ec:	fa02 f303 	lsl.w	r3, r2, r3
 80056f0:	69ba      	ldr	r2, [r7, #24]
 80056f2:	4313      	orrs	r3, r2
 80056f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80056f6:	69fb      	ldr	r3, [r7, #28]
 80056f8:	08da      	lsrs	r2, r3, #3
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	3208      	adds	r2, #8
 80056fe:	69b9      	ldr	r1, [r7, #24]
 8005700:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800570a:	69fb      	ldr	r3, [r7, #28]
 800570c:	005b      	lsls	r3, r3, #1
 800570e:	2203      	movs	r2, #3
 8005710:	fa02 f303 	lsl.w	r3, r2, r3
 8005714:	43db      	mvns	r3, r3
 8005716:	69ba      	ldr	r2, [r7, #24]
 8005718:	4013      	ands	r3, r2
 800571a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	f003 0203 	and.w	r2, r3, #3
 8005724:	69fb      	ldr	r3, [r7, #28]
 8005726:	005b      	lsls	r3, r3, #1
 8005728:	fa02 f303 	lsl.w	r3, r2, r3
 800572c:	69ba      	ldr	r2, [r7, #24]
 800572e:	4313      	orrs	r3, r2
 8005730:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	69ba      	ldr	r2, [r7, #24]
 8005736:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005740:	2b00      	cmp	r3, #0
 8005742:	f000 80a2 	beq.w	800588a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005746:	2300      	movs	r3, #0
 8005748:	60fb      	str	r3, [r7, #12]
 800574a:	4b57      	ldr	r3, [pc, #348]	; (80058a8 <HAL_GPIO_Init+0x2e8>)
 800574c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800574e:	4a56      	ldr	r2, [pc, #344]	; (80058a8 <HAL_GPIO_Init+0x2e8>)
 8005750:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005754:	6453      	str	r3, [r2, #68]	; 0x44
 8005756:	4b54      	ldr	r3, [pc, #336]	; (80058a8 <HAL_GPIO_Init+0x2e8>)
 8005758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800575a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800575e:	60fb      	str	r3, [r7, #12]
 8005760:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005762:	4a52      	ldr	r2, [pc, #328]	; (80058ac <HAL_GPIO_Init+0x2ec>)
 8005764:	69fb      	ldr	r3, [r7, #28]
 8005766:	089b      	lsrs	r3, r3, #2
 8005768:	3302      	adds	r3, #2
 800576a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800576e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005770:	69fb      	ldr	r3, [r7, #28]
 8005772:	f003 0303 	and.w	r3, r3, #3
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	220f      	movs	r2, #15
 800577a:	fa02 f303 	lsl.w	r3, r2, r3
 800577e:	43db      	mvns	r3, r3
 8005780:	69ba      	ldr	r2, [r7, #24]
 8005782:	4013      	ands	r3, r2
 8005784:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	4a49      	ldr	r2, [pc, #292]	; (80058b0 <HAL_GPIO_Init+0x2f0>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d019      	beq.n	80057c2 <HAL_GPIO_Init+0x202>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	4a48      	ldr	r2, [pc, #288]	; (80058b4 <HAL_GPIO_Init+0x2f4>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d013      	beq.n	80057be <HAL_GPIO_Init+0x1fe>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	4a47      	ldr	r2, [pc, #284]	; (80058b8 <HAL_GPIO_Init+0x2f8>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d00d      	beq.n	80057ba <HAL_GPIO_Init+0x1fa>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	4a46      	ldr	r2, [pc, #280]	; (80058bc <HAL_GPIO_Init+0x2fc>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d007      	beq.n	80057b6 <HAL_GPIO_Init+0x1f6>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	4a45      	ldr	r2, [pc, #276]	; (80058c0 <HAL_GPIO_Init+0x300>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d101      	bne.n	80057b2 <HAL_GPIO_Init+0x1f2>
 80057ae:	2304      	movs	r3, #4
 80057b0:	e008      	b.n	80057c4 <HAL_GPIO_Init+0x204>
 80057b2:	2307      	movs	r3, #7
 80057b4:	e006      	b.n	80057c4 <HAL_GPIO_Init+0x204>
 80057b6:	2303      	movs	r3, #3
 80057b8:	e004      	b.n	80057c4 <HAL_GPIO_Init+0x204>
 80057ba:	2302      	movs	r3, #2
 80057bc:	e002      	b.n	80057c4 <HAL_GPIO_Init+0x204>
 80057be:	2301      	movs	r3, #1
 80057c0:	e000      	b.n	80057c4 <HAL_GPIO_Init+0x204>
 80057c2:	2300      	movs	r3, #0
 80057c4:	69fa      	ldr	r2, [r7, #28]
 80057c6:	f002 0203 	and.w	r2, r2, #3
 80057ca:	0092      	lsls	r2, r2, #2
 80057cc:	4093      	lsls	r3, r2
 80057ce:	69ba      	ldr	r2, [r7, #24]
 80057d0:	4313      	orrs	r3, r2
 80057d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80057d4:	4935      	ldr	r1, [pc, #212]	; (80058ac <HAL_GPIO_Init+0x2ec>)
 80057d6:	69fb      	ldr	r3, [r7, #28]
 80057d8:	089b      	lsrs	r3, r3, #2
 80057da:	3302      	adds	r3, #2
 80057dc:	69ba      	ldr	r2, [r7, #24]
 80057de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80057e2:	4b38      	ldr	r3, [pc, #224]	; (80058c4 <HAL_GPIO_Init+0x304>)
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	43db      	mvns	r3, r3
 80057ec:	69ba      	ldr	r2, [r7, #24]
 80057ee:	4013      	ands	r3, r2
 80057f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d003      	beq.n	8005806 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80057fe:	69ba      	ldr	r2, [r7, #24]
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	4313      	orrs	r3, r2
 8005804:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005806:	4a2f      	ldr	r2, [pc, #188]	; (80058c4 <HAL_GPIO_Init+0x304>)
 8005808:	69bb      	ldr	r3, [r7, #24]
 800580a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800580c:	4b2d      	ldr	r3, [pc, #180]	; (80058c4 <HAL_GPIO_Init+0x304>)
 800580e:	68db      	ldr	r3, [r3, #12]
 8005810:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	43db      	mvns	r3, r3
 8005816:	69ba      	ldr	r2, [r7, #24]
 8005818:	4013      	ands	r3, r2
 800581a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005824:	2b00      	cmp	r3, #0
 8005826:	d003      	beq.n	8005830 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005828:	69ba      	ldr	r2, [r7, #24]
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	4313      	orrs	r3, r2
 800582e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005830:	4a24      	ldr	r2, [pc, #144]	; (80058c4 <HAL_GPIO_Init+0x304>)
 8005832:	69bb      	ldr	r3, [r7, #24]
 8005834:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005836:	4b23      	ldr	r3, [pc, #140]	; (80058c4 <HAL_GPIO_Init+0x304>)
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	43db      	mvns	r3, r3
 8005840:	69ba      	ldr	r2, [r7, #24]
 8005842:	4013      	ands	r3, r2
 8005844:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800584e:	2b00      	cmp	r3, #0
 8005850:	d003      	beq.n	800585a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005852:	69ba      	ldr	r2, [r7, #24]
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	4313      	orrs	r3, r2
 8005858:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800585a:	4a1a      	ldr	r2, [pc, #104]	; (80058c4 <HAL_GPIO_Init+0x304>)
 800585c:	69bb      	ldr	r3, [r7, #24]
 800585e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005860:	4b18      	ldr	r3, [pc, #96]	; (80058c4 <HAL_GPIO_Init+0x304>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	43db      	mvns	r3, r3
 800586a:	69ba      	ldr	r2, [r7, #24]
 800586c:	4013      	ands	r3, r2
 800586e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005878:	2b00      	cmp	r3, #0
 800587a:	d003      	beq.n	8005884 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800587c:	69ba      	ldr	r2, [r7, #24]
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	4313      	orrs	r3, r2
 8005882:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005884:	4a0f      	ldr	r2, [pc, #60]	; (80058c4 <HAL_GPIO_Init+0x304>)
 8005886:	69bb      	ldr	r3, [r7, #24]
 8005888:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800588a:	69fb      	ldr	r3, [r7, #28]
 800588c:	3301      	adds	r3, #1
 800588e:	61fb      	str	r3, [r7, #28]
 8005890:	69fb      	ldr	r3, [r7, #28]
 8005892:	2b0f      	cmp	r3, #15
 8005894:	f67f aea2 	bls.w	80055dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005898:	bf00      	nop
 800589a:	bf00      	nop
 800589c:	3724      	adds	r7, #36	; 0x24
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr
 80058a6:	bf00      	nop
 80058a8:	40023800 	.word	0x40023800
 80058ac:	40013800 	.word	0x40013800
 80058b0:	40020000 	.word	0x40020000
 80058b4:	40020400 	.word	0x40020400
 80058b8:	40020800 	.word	0x40020800
 80058bc:	40020c00 	.word	0x40020c00
 80058c0:	40021000 	.word	0x40021000
 80058c4:	40013c00 	.word	0x40013c00

080058c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b083      	sub	sp, #12
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
 80058d0:	460b      	mov	r3, r1
 80058d2:	807b      	strh	r3, [r7, #2]
 80058d4:	4613      	mov	r3, r2
 80058d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80058d8:	787b      	ldrb	r3, [r7, #1]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d003      	beq.n	80058e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80058de:	887a      	ldrh	r2, [r7, #2]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80058e4:	e003      	b.n	80058ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80058e6:	887b      	ldrh	r3, [r7, #2]
 80058e8:	041a      	lsls	r2, r3, #16
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	619a      	str	r2, [r3, #24]
}
 80058ee:	bf00      	nop
 80058f0:	370c      	adds	r7, #12
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr
	...

080058fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b086      	sub	sp, #24
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d101      	bne.n	800590e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	e267      	b.n	8005dde <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f003 0301 	and.w	r3, r3, #1
 8005916:	2b00      	cmp	r3, #0
 8005918:	d075      	beq.n	8005a06 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800591a:	4b88      	ldr	r3, [pc, #544]	; (8005b3c <HAL_RCC_OscConfig+0x240>)
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	f003 030c 	and.w	r3, r3, #12
 8005922:	2b04      	cmp	r3, #4
 8005924:	d00c      	beq.n	8005940 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005926:	4b85      	ldr	r3, [pc, #532]	; (8005b3c <HAL_RCC_OscConfig+0x240>)
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800592e:	2b08      	cmp	r3, #8
 8005930:	d112      	bne.n	8005958 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005932:	4b82      	ldr	r3, [pc, #520]	; (8005b3c <HAL_RCC_OscConfig+0x240>)
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800593a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800593e:	d10b      	bne.n	8005958 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005940:	4b7e      	ldr	r3, [pc, #504]	; (8005b3c <HAL_RCC_OscConfig+0x240>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005948:	2b00      	cmp	r3, #0
 800594a:	d05b      	beq.n	8005a04 <HAL_RCC_OscConfig+0x108>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d157      	bne.n	8005a04 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005954:	2301      	movs	r3, #1
 8005956:	e242      	b.n	8005dde <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005960:	d106      	bne.n	8005970 <HAL_RCC_OscConfig+0x74>
 8005962:	4b76      	ldr	r3, [pc, #472]	; (8005b3c <HAL_RCC_OscConfig+0x240>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a75      	ldr	r2, [pc, #468]	; (8005b3c <HAL_RCC_OscConfig+0x240>)
 8005968:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800596c:	6013      	str	r3, [r2, #0]
 800596e:	e01d      	b.n	80059ac <HAL_RCC_OscConfig+0xb0>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005978:	d10c      	bne.n	8005994 <HAL_RCC_OscConfig+0x98>
 800597a:	4b70      	ldr	r3, [pc, #448]	; (8005b3c <HAL_RCC_OscConfig+0x240>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a6f      	ldr	r2, [pc, #444]	; (8005b3c <HAL_RCC_OscConfig+0x240>)
 8005980:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005984:	6013      	str	r3, [r2, #0]
 8005986:	4b6d      	ldr	r3, [pc, #436]	; (8005b3c <HAL_RCC_OscConfig+0x240>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a6c      	ldr	r2, [pc, #432]	; (8005b3c <HAL_RCC_OscConfig+0x240>)
 800598c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005990:	6013      	str	r3, [r2, #0]
 8005992:	e00b      	b.n	80059ac <HAL_RCC_OscConfig+0xb0>
 8005994:	4b69      	ldr	r3, [pc, #420]	; (8005b3c <HAL_RCC_OscConfig+0x240>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a68      	ldr	r2, [pc, #416]	; (8005b3c <HAL_RCC_OscConfig+0x240>)
 800599a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800599e:	6013      	str	r3, [r2, #0]
 80059a0:	4b66      	ldr	r3, [pc, #408]	; (8005b3c <HAL_RCC_OscConfig+0x240>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a65      	ldr	r2, [pc, #404]	; (8005b3c <HAL_RCC_OscConfig+0x240>)
 80059a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80059aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d013      	beq.n	80059dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059b4:	f7ff fd12 	bl	80053dc <HAL_GetTick>
 80059b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059ba:	e008      	b.n	80059ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80059bc:	f7ff fd0e 	bl	80053dc <HAL_GetTick>
 80059c0:	4602      	mov	r2, r0
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	1ad3      	subs	r3, r2, r3
 80059c6:	2b64      	cmp	r3, #100	; 0x64
 80059c8:	d901      	bls.n	80059ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80059ca:	2303      	movs	r3, #3
 80059cc:	e207      	b.n	8005dde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059ce:	4b5b      	ldr	r3, [pc, #364]	; (8005b3c <HAL_RCC_OscConfig+0x240>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d0f0      	beq.n	80059bc <HAL_RCC_OscConfig+0xc0>
 80059da:	e014      	b.n	8005a06 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059dc:	f7ff fcfe 	bl	80053dc <HAL_GetTick>
 80059e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059e2:	e008      	b.n	80059f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80059e4:	f7ff fcfa 	bl	80053dc <HAL_GetTick>
 80059e8:	4602      	mov	r2, r0
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	1ad3      	subs	r3, r2, r3
 80059ee:	2b64      	cmp	r3, #100	; 0x64
 80059f0:	d901      	bls.n	80059f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80059f2:	2303      	movs	r3, #3
 80059f4:	e1f3      	b.n	8005dde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059f6:	4b51      	ldr	r3, [pc, #324]	; (8005b3c <HAL_RCC_OscConfig+0x240>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d1f0      	bne.n	80059e4 <HAL_RCC_OscConfig+0xe8>
 8005a02:	e000      	b.n	8005a06 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f003 0302 	and.w	r3, r3, #2
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d063      	beq.n	8005ada <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005a12:	4b4a      	ldr	r3, [pc, #296]	; (8005b3c <HAL_RCC_OscConfig+0x240>)
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	f003 030c 	and.w	r3, r3, #12
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d00b      	beq.n	8005a36 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a1e:	4b47      	ldr	r3, [pc, #284]	; (8005b3c <HAL_RCC_OscConfig+0x240>)
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005a26:	2b08      	cmp	r3, #8
 8005a28:	d11c      	bne.n	8005a64 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a2a:	4b44      	ldr	r3, [pc, #272]	; (8005b3c <HAL_RCC_OscConfig+0x240>)
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d116      	bne.n	8005a64 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a36:	4b41      	ldr	r3, [pc, #260]	; (8005b3c <HAL_RCC_OscConfig+0x240>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f003 0302 	and.w	r3, r3, #2
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d005      	beq.n	8005a4e <HAL_RCC_OscConfig+0x152>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	68db      	ldr	r3, [r3, #12]
 8005a46:	2b01      	cmp	r3, #1
 8005a48:	d001      	beq.n	8005a4e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e1c7      	b.n	8005dde <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a4e:	4b3b      	ldr	r3, [pc, #236]	; (8005b3c <HAL_RCC_OscConfig+0x240>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	691b      	ldr	r3, [r3, #16]
 8005a5a:	00db      	lsls	r3, r3, #3
 8005a5c:	4937      	ldr	r1, [pc, #220]	; (8005b3c <HAL_RCC_OscConfig+0x240>)
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a62:	e03a      	b.n	8005ada <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	68db      	ldr	r3, [r3, #12]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d020      	beq.n	8005aae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a6c:	4b34      	ldr	r3, [pc, #208]	; (8005b40 <HAL_RCC_OscConfig+0x244>)
 8005a6e:	2201      	movs	r2, #1
 8005a70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a72:	f7ff fcb3 	bl	80053dc <HAL_GetTick>
 8005a76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a78:	e008      	b.n	8005a8c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a7a:	f7ff fcaf 	bl	80053dc <HAL_GetTick>
 8005a7e:	4602      	mov	r2, r0
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	1ad3      	subs	r3, r2, r3
 8005a84:	2b02      	cmp	r3, #2
 8005a86:	d901      	bls.n	8005a8c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005a88:	2303      	movs	r3, #3
 8005a8a:	e1a8      	b.n	8005dde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a8c:	4b2b      	ldr	r3, [pc, #172]	; (8005b3c <HAL_RCC_OscConfig+0x240>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f003 0302 	and.w	r3, r3, #2
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d0f0      	beq.n	8005a7a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a98:	4b28      	ldr	r3, [pc, #160]	; (8005b3c <HAL_RCC_OscConfig+0x240>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	691b      	ldr	r3, [r3, #16]
 8005aa4:	00db      	lsls	r3, r3, #3
 8005aa6:	4925      	ldr	r1, [pc, #148]	; (8005b3c <HAL_RCC_OscConfig+0x240>)
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	600b      	str	r3, [r1, #0]
 8005aac:	e015      	b.n	8005ada <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005aae:	4b24      	ldr	r3, [pc, #144]	; (8005b40 <HAL_RCC_OscConfig+0x244>)
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ab4:	f7ff fc92 	bl	80053dc <HAL_GetTick>
 8005ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005aba:	e008      	b.n	8005ace <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005abc:	f7ff fc8e 	bl	80053dc <HAL_GetTick>
 8005ac0:	4602      	mov	r2, r0
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	1ad3      	subs	r3, r2, r3
 8005ac6:	2b02      	cmp	r3, #2
 8005ac8:	d901      	bls.n	8005ace <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005aca:	2303      	movs	r3, #3
 8005acc:	e187      	b.n	8005dde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ace:	4b1b      	ldr	r3, [pc, #108]	; (8005b3c <HAL_RCC_OscConfig+0x240>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f003 0302 	and.w	r3, r3, #2
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d1f0      	bne.n	8005abc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f003 0308 	and.w	r3, r3, #8
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d036      	beq.n	8005b54 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	695b      	ldr	r3, [r3, #20]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d016      	beq.n	8005b1c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005aee:	4b15      	ldr	r3, [pc, #84]	; (8005b44 <HAL_RCC_OscConfig+0x248>)
 8005af0:	2201      	movs	r2, #1
 8005af2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005af4:	f7ff fc72 	bl	80053dc <HAL_GetTick>
 8005af8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005afa:	e008      	b.n	8005b0e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005afc:	f7ff fc6e 	bl	80053dc <HAL_GetTick>
 8005b00:	4602      	mov	r2, r0
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	1ad3      	subs	r3, r2, r3
 8005b06:	2b02      	cmp	r3, #2
 8005b08:	d901      	bls.n	8005b0e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005b0a:	2303      	movs	r3, #3
 8005b0c:	e167      	b.n	8005dde <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b0e:	4b0b      	ldr	r3, [pc, #44]	; (8005b3c <HAL_RCC_OscConfig+0x240>)
 8005b10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b12:	f003 0302 	and.w	r3, r3, #2
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d0f0      	beq.n	8005afc <HAL_RCC_OscConfig+0x200>
 8005b1a:	e01b      	b.n	8005b54 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b1c:	4b09      	ldr	r3, [pc, #36]	; (8005b44 <HAL_RCC_OscConfig+0x248>)
 8005b1e:	2200      	movs	r2, #0
 8005b20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b22:	f7ff fc5b 	bl	80053dc <HAL_GetTick>
 8005b26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b28:	e00e      	b.n	8005b48 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b2a:	f7ff fc57 	bl	80053dc <HAL_GetTick>
 8005b2e:	4602      	mov	r2, r0
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	1ad3      	subs	r3, r2, r3
 8005b34:	2b02      	cmp	r3, #2
 8005b36:	d907      	bls.n	8005b48 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005b38:	2303      	movs	r3, #3
 8005b3a:	e150      	b.n	8005dde <HAL_RCC_OscConfig+0x4e2>
 8005b3c:	40023800 	.word	0x40023800
 8005b40:	42470000 	.word	0x42470000
 8005b44:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b48:	4b88      	ldr	r3, [pc, #544]	; (8005d6c <HAL_RCC_OscConfig+0x470>)
 8005b4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b4c:	f003 0302 	and.w	r3, r3, #2
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d1ea      	bne.n	8005b2a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f003 0304 	and.w	r3, r3, #4
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	f000 8097 	beq.w	8005c90 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b62:	2300      	movs	r3, #0
 8005b64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b66:	4b81      	ldr	r3, [pc, #516]	; (8005d6c <HAL_RCC_OscConfig+0x470>)
 8005b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d10f      	bne.n	8005b92 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b72:	2300      	movs	r3, #0
 8005b74:	60bb      	str	r3, [r7, #8]
 8005b76:	4b7d      	ldr	r3, [pc, #500]	; (8005d6c <HAL_RCC_OscConfig+0x470>)
 8005b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b7a:	4a7c      	ldr	r2, [pc, #496]	; (8005d6c <HAL_RCC_OscConfig+0x470>)
 8005b7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b80:	6413      	str	r3, [r2, #64]	; 0x40
 8005b82:	4b7a      	ldr	r3, [pc, #488]	; (8005d6c <HAL_RCC_OscConfig+0x470>)
 8005b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b8a:	60bb      	str	r3, [r7, #8]
 8005b8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b92:	4b77      	ldr	r3, [pc, #476]	; (8005d70 <HAL_RCC_OscConfig+0x474>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d118      	bne.n	8005bd0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005b9e:	4b74      	ldr	r3, [pc, #464]	; (8005d70 <HAL_RCC_OscConfig+0x474>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a73      	ldr	r2, [pc, #460]	; (8005d70 <HAL_RCC_OscConfig+0x474>)
 8005ba4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ba8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005baa:	f7ff fc17 	bl	80053dc <HAL_GetTick>
 8005bae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bb0:	e008      	b.n	8005bc4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bb2:	f7ff fc13 	bl	80053dc <HAL_GetTick>
 8005bb6:	4602      	mov	r2, r0
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	1ad3      	subs	r3, r2, r3
 8005bbc:	2b02      	cmp	r3, #2
 8005bbe:	d901      	bls.n	8005bc4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005bc0:	2303      	movs	r3, #3
 8005bc2:	e10c      	b.n	8005dde <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bc4:	4b6a      	ldr	r3, [pc, #424]	; (8005d70 <HAL_RCC_OscConfig+0x474>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d0f0      	beq.n	8005bb2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	d106      	bne.n	8005be6 <HAL_RCC_OscConfig+0x2ea>
 8005bd8:	4b64      	ldr	r3, [pc, #400]	; (8005d6c <HAL_RCC_OscConfig+0x470>)
 8005bda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bdc:	4a63      	ldr	r2, [pc, #396]	; (8005d6c <HAL_RCC_OscConfig+0x470>)
 8005bde:	f043 0301 	orr.w	r3, r3, #1
 8005be2:	6713      	str	r3, [r2, #112]	; 0x70
 8005be4:	e01c      	b.n	8005c20 <HAL_RCC_OscConfig+0x324>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	2b05      	cmp	r3, #5
 8005bec:	d10c      	bne.n	8005c08 <HAL_RCC_OscConfig+0x30c>
 8005bee:	4b5f      	ldr	r3, [pc, #380]	; (8005d6c <HAL_RCC_OscConfig+0x470>)
 8005bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bf2:	4a5e      	ldr	r2, [pc, #376]	; (8005d6c <HAL_RCC_OscConfig+0x470>)
 8005bf4:	f043 0304 	orr.w	r3, r3, #4
 8005bf8:	6713      	str	r3, [r2, #112]	; 0x70
 8005bfa:	4b5c      	ldr	r3, [pc, #368]	; (8005d6c <HAL_RCC_OscConfig+0x470>)
 8005bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bfe:	4a5b      	ldr	r2, [pc, #364]	; (8005d6c <HAL_RCC_OscConfig+0x470>)
 8005c00:	f043 0301 	orr.w	r3, r3, #1
 8005c04:	6713      	str	r3, [r2, #112]	; 0x70
 8005c06:	e00b      	b.n	8005c20 <HAL_RCC_OscConfig+0x324>
 8005c08:	4b58      	ldr	r3, [pc, #352]	; (8005d6c <HAL_RCC_OscConfig+0x470>)
 8005c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c0c:	4a57      	ldr	r2, [pc, #348]	; (8005d6c <HAL_RCC_OscConfig+0x470>)
 8005c0e:	f023 0301 	bic.w	r3, r3, #1
 8005c12:	6713      	str	r3, [r2, #112]	; 0x70
 8005c14:	4b55      	ldr	r3, [pc, #340]	; (8005d6c <HAL_RCC_OscConfig+0x470>)
 8005c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c18:	4a54      	ldr	r2, [pc, #336]	; (8005d6c <HAL_RCC_OscConfig+0x470>)
 8005c1a:	f023 0304 	bic.w	r3, r3, #4
 8005c1e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d015      	beq.n	8005c54 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c28:	f7ff fbd8 	bl	80053dc <HAL_GetTick>
 8005c2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c2e:	e00a      	b.n	8005c46 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c30:	f7ff fbd4 	bl	80053dc <HAL_GetTick>
 8005c34:	4602      	mov	r2, r0
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	1ad3      	subs	r3, r2, r3
 8005c3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d901      	bls.n	8005c46 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005c42:	2303      	movs	r3, #3
 8005c44:	e0cb      	b.n	8005dde <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c46:	4b49      	ldr	r3, [pc, #292]	; (8005d6c <HAL_RCC_OscConfig+0x470>)
 8005c48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c4a:	f003 0302 	and.w	r3, r3, #2
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d0ee      	beq.n	8005c30 <HAL_RCC_OscConfig+0x334>
 8005c52:	e014      	b.n	8005c7e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c54:	f7ff fbc2 	bl	80053dc <HAL_GetTick>
 8005c58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c5a:	e00a      	b.n	8005c72 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c5c:	f7ff fbbe 	bl	80053dc <HAL_GetTick>
 8005c60:	4602      	mov	r2, r0
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	1ad3      	subs	r3, r2, r3
 8005c66:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d901      	bls.n	8005c72 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005c6e:	2303      	movs	r3, #3
 8005c70:	e0b5      	b.n	8005dde <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c72:	4b3e      	ldr	r3, [pc, #248]	; (8005d6c <HAL_RCC_OscConfig+0x470>)
 8005c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c76:	f003 0302 	and.w	r3, r3, #2
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d1ee      	bne.n	8005c5c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005c7e:	7dfb      	ldrb	r3, [r7, #23]
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d105      	bne.n	8005c90 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c84:	4b39      	ldr	r3, [pc, #228]	; (8005d6c <HAL_RCC_OscConfig+0x470>)
 8005c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c88:	4a38      	ldr	r2, [pc, #224]	; (8005d6c <HAL_RCC_OscConfig+0x470>)
 8005c8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c8e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	699b      	ldr	r3, [r3, #24]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	f000 80a1 	beq.w	8005ddc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005c9a:	4b34      	ldr	r3, [pc, #208]	; (8005d6c <HAL_RCC_OscConfig+0x470>)
 8005c9c:	689b      	ldr	r3, [r3, #8]
 8005c9e:	f003 030c 	and.w	r3, r3, #12
 8005ca2:	2b08      	cmp	r3, #8
 8005ca4:	d05c      	beq.n	8005d60 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	699b      	ldr	r3, [r3, #24]
 8005caa:	2b02      	cmp	r3, #2
 8005cac:	d141      	bne.n	8005d32 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cae:	4b31      	ldr	r3, [pc, #196]	; (8005d74 <HAL_RCC_OscConfig+0x478>)
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cb4:	f7ff fb92 	bl	80053dc <HAL_GetTick>
 8005cb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cba:	e008      	b.n	8005cce <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005cbc:	f7ff fb8e 	bl	80053dc <HAL_GetTick>
 8005cc0:	4602      	mov	r2, r0
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	1ad3      	subs	r3, r2, r3
 8005cc6:	2b02      	cmp	r3, #2
 8005cc8:	d901      	bls.n	8005cce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005cca:	2303      	movs	r3, #3
 8005ccc:	e087      	b.n	8005dde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cce:	4b27      	ldr	r3, [pc, #156]	; (8005d6c <HAL_RCC_OscConfig+0x470>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d1f0      	bne.n	8005cbc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	69da      	ldr	r2, [r3, #28]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6a1b      	ldr	r3, [r3, #32]
 8005ce2:	431a      	orrs	r2, r3
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce8:	019b      	lsls	r3, r3, #6
 8005cea:	431a      	orrs	r2, r3
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cf0:	085b      	lsrs	r3, r3, #1
 8005cf2:	3b01      	subs	r3, #1
 8005cf4:	041b      	lsls	r3, r3, #16
 8005cf6:	431a      	orrs	r2, r3
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cfc:	061b      	lsls	r3, r3, #24
 8005cfe:	491b      	ldr	r1, [pc, #108]	; (8005d6c <HAL_RCC_OscConfig+0x470>)
 8005d00:	4313      	orrs	r3, r2
 8005d02:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d04:	4b1b      	ldr	r3, [pc, #108]	; (8005d74 <HAL_RCC_OscConfig+0x478>)
 8005d06:	2201      	movs	r2, #1
 8005d08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d0a:	f7ff fb67 	bl	80053dc <HAL_GetTick>
 8005d0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d10:	e008      	b.n	8005d24 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d12:	f7ff fb63 	bl	80053dc <HAL_GetTick>
 8005d16:	4602      	mov	r2, r0
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	1ad3      	subs	r3, r2, r3
 8005d1c:	2b02      	cmp	r3, #2
 8005d1e:	d901      	bls.n	8005d24 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005d20:	2303      	movs	r3, #3
 8005d22:	e05c      	b.n	8005dde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d24:	4b11      	ldr	r3, [pc, #68]	; (8005d6c <HAL_RCC_OscConfig+0x470>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d0f0      	beq.n	8005d12 <HAL_RCC_OscConfig+0x416>
 8005d30:	e054      	b.n	8005ddc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d32:	4b10      	ldr	r3, [pc, #64]	; (8005d74 <HAL_RCC_OscConfig+0x478>)
 8005d34:	2200      	movs	r2, #0
 8005d36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d38:	f7ff fb50 	bl	80053dc <HAL_GetTick>
 8005d3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d3e:	e008      	b.n	8005d52 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d40:	f7ff fb4c 	bl	80053dc <HAL_GetTick>
 8005d44:	4602      	mov	r2, r0
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	1ad3      	subs	r3, r2, r3
 8005d4a:	2b02      	cmp	r3, #2
 8005d4c:	d901      	bls.n	8005d52 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005d4e:	2303      	movs	r3, #3
 8005d50:	e045      	b.n	8005dde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d52:	4b06      	ldr	r3, [pc, #24]	; (8005d6c <HAL_RCC_OscConfig+0x470>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d1f0      	bne.n	8005d40 <HAL_RCC_OscConfig+0x444>
 8005d5e:	e03d      	b.n	8005ddc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	699b      	ldr	r3, [r3, #24]
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d107      	bne.n	8005d78 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	e038      	b.n	8005dde <HAL_RCC_OscConfig+0x4e2>
 8005d6c:	40023800 	.word	0x40023800
 8005d70:	40007000 	.word	0x40007000
 8005d74:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005d78:	4b1b      	ldr	r3, [pc, #108]	; (8005de8 <HAL_RCC_OscConfig+0x4ec>)
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	699b      	ldr	r3, [r3, #24]
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	d028      	beq.n	8005dd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d90:	429a      	cmp	r2, r3
 8005d92:	d121      	bne.n	8005dd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d9e:	429a      	cmp	r2, r3
 8005da0:	d11a      	bne.n	8005dd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005da2:	68fa      	ldr	r2, [r7, #12]
 8005da4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005da8:	4013      	ands	r3, r2
 8005daa:	687a      	ldr	r2, [r7, #4]
 8005dac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005dae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d111      	bne.n	8005dd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dbe:	085b      	lsrs	r3, r3, #1
 8005dc0:	3b01      	subs	r3, #1
 8005dc2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	d107      	bne.n	8005dd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	d001      	beq.n	8005ddc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	e000      	b.n	8005dde <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005ddc:	2300      	movs	r3, #0
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3718      	adds	r7, #24
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}
 8005de6:	bf00      	nop
 8005de8:	40023800 	.word	0x40023800

08005dec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b084      	sub	sp, #16
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d101      	bne.n	8005e00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	e0cc      	b.n	8005f9a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005e00:	4b68      	ldr	r3, [pc, #416]	; (8005fa4 <HAL_RCC_ClockConfig+0x1b8>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f003 0307 	and.w	r3, r3, #7
 8005e08:	683a      	ldr	r2, [r7, #0]
 8005e0a:	429a      	cmp	r2, r3
 8005e0c:	d90c      	bls.n	8005e28 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e0e:	4b65      	ldr	r3, [pc, #404]	; (8005fa4 <HAL_RCC_ClockConfig+0x1b8>)
 8005e10:	683a      	ldr	r2, [r7, #0]
 8005e12:	b2d2      	uxtb	r2, r2
 8005e14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e16:	4b63      	ldr	r3, [pc, #396]	; (8005fa4 <HAL_RCC_ClockConfig+0x1b8>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f003 0307 	and.w	r3, r3, #7
 8005e1e:	683a      	ldr	r2, [r7, #0]
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d001      	beq.n	8005e28 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005e24:	2301      	movs	r3, #1
 8005e26:	e0b8      	b.n	8005f9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f003 0302 	and.w	r3, r3, #2
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d020      	beq.n	8005e76 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f003 0304 	and.w	r3, r3, #4
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d005      	beq.n	8005e4c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005e40:	4b59      	ldr	r3, [pc, #356]	; (8005fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8005e42:	689b      	ldr	r3, [r3, #8]
 8005e44:	4a58      	ldr	r2, [pc, #352]	; (8005fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8005e46:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005e4a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f003 0308 	and.w	r3, r3, #8
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d005      	beq.n	8005e64 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005e58:	4b53      	ldr	r3, [pc, #332]	; (8005fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8005e5a:	689b      	ldr	r3, [r3, #8]
 8005e5c:	4a52      	ldr	r2, [pc, #328]	; (8005fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8005e5e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005e62:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e64:	4b50      	ldr	r3, [pc, #320]	; (8005fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8005e66:	689b      	ldr	r3, [r3, #8]
 8005e68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	689b      	ldr	r3, [r3, #8]
 8005e70:	494d      	ldr	r1, [pc, #308]	; (8005fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8005e72:	4313      	orrs	r3, r2
 8005e74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f003 0301 	and.w	r3, r3, #1
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d044      	beq.n	8005f0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	2b01      	cmp	r3, #1
 8005e88:	d107      	bne.n	8005e9a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e8a:	4b47      	ldr	r3, [pc, #284]	; (8005fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d119      	bne.n	8005eca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e96:	2301      	movs	r3, #1
 8005e98:	e07f      	b.n	8005f9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	2b02      	cmp	r3, #2
 8005ea0:	d003      	beq.n	8005eaa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ea6:	2b03      	cmp	r3, #3
 8005ea8:	d107      	bne.n	8005eba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005eaa:	4b3f      	ldr	r3, [pc, #252]	; (8005fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d109      	bne.n	8005eca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	e06f      	b.n	8005f9a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005eba:	4b3b      	ldr	r3, [pc, #236]	; (8005fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f003 0302 	and.w	r3, r3, #2
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d101      	bne.n	8005eca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	e067      	b.n	8005f9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005eca:	4b37      	ldr	r3, [pc, #220]	; (8005fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	f023 0203 	bic.w	r2, r3, #3
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	4934      	ldr	r1, [pc, #208]	; (8005fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005edc:	f7ff fa7e 	bl	80053dc <HAL_GetTick>
 8005ee0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ee2:	e00a      	b.n	8005efa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ee4:	f7ff fa7a 	bl	80053dc <HAL_GetTick>
 8005ee8:	4602      	mov	r2, r0
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	1ad3      	subs	r3, r2, r3
 8005eee:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d901      	bls.n	8005efa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005ef6:	2303      	movs	r3, #3
 8005ef8:	e04f      	b.n	8005f9a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005efa:	4b2b      	ldr	r3, [pc, #172]	; (8005fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8005efc:	689b      	ldr	r3, [r3, #8]
 8005efe:	f003 020c 	and.w	r2, r3, #12
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	009b      	lsls	r3, r3, #2
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	d1eb      	bne.n	8005ee4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005f0c:	4b25      	ldr	r3, [pc, #148]	; (8005fa4 <HAL_RCC_ClockConfig+0x1b8>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f003 0307 	and.w	r3, r3, #7
 8005f14:	683a      	ldr	r2, [r7, #0]
 8005f16:	429a      	cmp	r2, r3
 8005f18:	d20c      	bcs.n	8005f34 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f1a:	4b22      	ldr	r3, [pc, #136]	; (8005fa4 <HAL_RCC_ClockConfig+0x1b8>)
 8005f1c:	683a      	ldr	r2, [r7, #0]
 8005f1e:	b2d2      	uxtb	r2, r2
 8005f20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f22:	4b20      	ldr	r3, [pc, #128]	; (8005fa4 <HAL_RCC_ClockConfig+0x1b8>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f003 0307 	and.w	r3, r3, #7
 8005f2a:	683a      	ldr	r2, [r7, #0]
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d001      	beq.n	8005f34 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005f30:	2301      	movs	r3, #1
 8005f32:	e032      	b.n	8005f9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f003 0304 	and.w	r3, r3, #4
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d008      	beq.n	8005f52 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f40:	4b19      	ldr	r3, [pc, #100]	; (8005fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	68db      	ldr	r3, [r3, #12]
 8005f4c:	4916      	ldr	r1, [pc, #88]	; (8005fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f003 0308 	and.w	r3, r3, #8
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d009      	beq.n	8005f72 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005f5e:	4b12      	ldr	r3, [pc, #72]	; (8005fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8005f60:	689b      	ldr	r3, [r3, #8]
 8005f62:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	691b      	ldr	r3, [r3, #16]
 8005f6a:	00db      	lsls	r3, r3, #3
 8005f6c:	490e      	ldr	r1, [pc, #56]	; (8005fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005f72:	f000 f821 	bl	8005fb8 <HAL_RCC_GetSysClockFreq>
 8005f76:	4602      	mov	r2, r0
 8005f78:	4b0b      	ldr	r3, [pc, #44]	; (8005fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8005f7a:	689b      	ldr	r3, [r3, #8]
 8005f7c:	091b      	lsrs	r3, r3, #4
 8005f7e:	f003 030f 	and.w	r3, r3, #15
 8005f82:	490a      	ldr	r1, [pc, #40]	; (8005fac <HAL_RCC_ClockConfig+0x1c0>)
 8005f84:	5ccb      	ldrb	r3, [r1, r3]
 8005f86:	fa22 f303 	lsr.w	r3, r2, r3
 8005f8a:	4a09      	ldr	r2, [pc, #36]	; (8005fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8005f8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005f8e:	4b09      	ldr	r3, [pc, #36]	; (8005fb4 <HAL_RCC_ClockConfig+0x1c8>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4618      	mov	r0, r3
 8005f94:	f7ff f9de 	bl	8005354 <HAL_InitTick>

  return HAL_OK;
 8005f98:	2300      	movs	r3, #0
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3710      	adds	r7, #16
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}
 8005fa2:	bf00      	nop
 8005fa4:	40023c00 	.word	0x40023c00
 8005fa8:	40023800 	.word	0x40023800
 8005fac:	0800a53c 	.word	0x0800a53c
 8005fb0:	200005f8 	.word	0x200005f8
 8005fb4:	200017c4 	.word	0x200017c4

08005fb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005fb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005fbc:	b090      	sub	sp, #64	; 0x40
 8005fbe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	637b      	str	r3, [r7, #52]	; 0x34
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fc8:	2300      	movs	r3, #0
 8005fca:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005fd0:	4b59      	ldr	r3, [pc, #356]	; (8006138 <HAL_RCC_GetSysClockFreq+0x180>)
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	f003 030c 	and.w	r3, r3, #12
 8005fd8:	2b08      	cmp	r3, #8
 8005fda:	d00d      	beq.n	8005ff8 <HAL_RCC_GetSysClockFreq+0x40>
 8005fdc:	2b08      	cmp	r3, #8
 8005fde:	f200 80a1 	bhi.w	8006124 <HAL_RCC_GetSysClockFreq+0x16c>
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d002      	beq.n	8005fec <HAL_RCC_GetSysClockFreq+0x34>
 8005fe6:	2b04      	cmp	r3, #4
 8005fe8:	d003      	beq.n	8005ff2 <HAL_RCC_GetSysClockFreq+0x3a>
 8005fea:	e09b      	b.n	8006124 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005fec:	4b53      	ldr	r3, [pc, #332]	; (800613c <HAL_RCC_GetSysClockFreq+0x184>)
 8005fee:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005ff0:	e09b      	b.n	800612a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005ff2:	4b53      	ldr	r3, [pc, #332]	; (8006140 <HAL_RCC_GetSysClockFreq+0x188>)
 8005ff4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005ff6:	e098      	b.n	800612a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005ff8:	4b4f      	ldr	r3, [pc, #316]	; (8006138 <HAL_RCC_GetSysClockFreq+0x180>)
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006000:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006002:	4b4d      	ldr	r3, [pc, #308]	; (8006138 <HAL_RCC_GetSysClockFreq+0x180>)
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800600a:	2b00      	cmp	r3, #0
 800600c:	d028      	beq.n	8006060 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800600e:	4b4a      	ldr	r3, [pc, #296]	; (8006138 <HAL_RCC_GetSysClockFreq+0x180>)
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	099b      	lsrs	r3, r3, #6
 8006014:	2200      	movs	r2, #0
 8006016:	623b      	str	r3, [r7, #32]
 8006018:	627a      	str	r2, [r7, #36]	; 0x24
 800601a:	6a3b      	ldr	r3, [r7, #32]
 800601c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006020:	2100      	movs	r1, #0
 8006022:	4b47      	ldr	r3, [pc, #284]	; (8006140 <HAL_RCC_GetSysClockFreq+0x188>)
 8006024:	fb03 f201 	mul.w	r2, r3, r1
 8006028:	2300      	movs	r3, #0
 800602a:	fb00 f303 	mul.w	r3, r0, r3
 800602e:	4413      	add	r3, r2
 8006030:	4a43      	ldr	r2, [pc, #268]	; (8006140 <HAL_RCC_GetSysClockFreq+0x188>)
 8006032:	fba0 1202 	umull	r1, r2, r0, r2
 8006036:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006038:	460a      	mov	r2, r1
 800603a:	62ba      	str	r2, [r7, #40]	; 0x28
 800603c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800603e:	4413      	add	r3, r2
 8006040:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006044:	2200      	movs	r2, #0
 8006046:	61bb      	str	r3, [r7, #24]
 8006048:	61fa      	str	r2, [r7, #28]
 800604a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800604e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006052:	f7fa fe21 	bl	8000c98 <__aeabi_uldivmod>
 8006056:	4602      	mov	r2, r0
 8006058:	460b      	mov	r3, r1
 800605a:	4613      	mov	r3, r2
 800605c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800605e:	e053      	b.n	8006108 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006060:	4b35      	ldr	r3, [pc, #212]	; (8006138 <HAL_RCC_GetSysClockFreq+0x180>)
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	099b      	lsrs	r3, r3, #6
 8006066:	2200      	movs	r2, #0
 8006068:	613b      	str	r3, [r7, #16]
 800606a:	617a      	str	r2, [r7, #20]
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006072:	f04f 0b00 	mov.w	fp, #0
 8006076:	4652      	mov	r2, sl
 8006078:	465b      	mov	r3, fp
 800607a:	f04f 0000 	mov.w	r0, #0
 800607e:	f04f 0100 	mov.w	r1, #0
 8006082:	0159      	lsls	r1, r3, #5
 8006084:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006088:	0150      	lsls	r0, r2, #5
 800608a:	4602      	mov	r2, r0
 800608c:	460b      	mov	r3, r1
 800608e:	ebb2 080a 	subs.w	r8, r2, sl
 8006092:	eb63 090b 	sbc.w	r9, r3, fp
 8006096:	f04f 0200 	mov.w	r2, #0
 800609a:	f04f 0300 	mov.w	r3, #0
 800609e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80060a2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80060a6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80060aa:	ebb2 0408 	subs.w	r4, r2, r8
 80060ae:	eb63 0509 	sbc.w	r5, r3, r9
 80060b2:	f04f 0200 	mov.w	r2, #0
 80060b6:	f04f 0300 	mov.w	r3, #0
 80060ba:	00eb      	lsls	r3, r5, #3
 80060bc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80060c0:	00e2      	lsls	r2, r4, #3
 80060c2:	4614      	mov	r4, r2
 80060c4:	461d      	mov	r5, r3
 80060c6:	eb14 030a 	adds.w	r3, r4, sl
 80060ca:	603b      	str	r3, [r7, #0]
 80060cc:	eb45 030b 	adc.w	r3, r5, fp
 80060d0:	607b      	str	r3, [r7, #4]
 80060d2:	f04f 0200 	mov.w	r2, #0
 80060d6:	f04f 0300 	mov.w	r3, #0
 80060da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80060de:	4629      	mov	r1, r5
 80060e0:	028b      	lsls	r3, r1, #10
 80060e2:	4621      	mov	r1, r4
 80060e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80060e8:	4621      	mov	r1, r4
 80060ea:	028a      	lsls	r2, r1, #10
 80060ec:	4610      	mov	r0, r2
 80060ee:	4619      	mov	r1, r3
 80060f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060f2:	2200      	movs	r2, #0
 80060f4:	60bb      	str	r3, [r7, #8]
 80060f6:	60fa      	str	r2, [r7, #12]
 80060f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80060fc:	f7fa fdcc 	bl	8000c98 <__aeabi_uldivmod>
 8006100:	4602      	mov	r2, r0
 8006102:	460b      	mov	r3, r1
 8006104:	4613      	mov	r3, r2
 8006106:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006108:	4b0b      	ldr	r3, [pc, #44]	; (8006138 <HAL_RCC_GetSysClockFreq+0x180>)
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	0c1b      	lsrs	r3, r3, #16
 800610e:	f003 0303 	and.w	r3, r3, #3
 8006112:	3301      	adds	r3, #1
 8006114:	005b      	lsls	r3, r3, #1
 8006116:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8006118:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800611a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800611c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006120:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006122:	e002      	b.n	800612a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006124:	4b05      	ldr	r3, [pc, #20]	; (800613c <HAL_RCC_GetSysClockFreq+0x184>)
 8006126:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006128:	bf00      	nop
    }
  }
  return sysclockfreq;
 800612a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800612c:	4618      	mov	r0, r3
 800612e:	3740      	adds	r7, #64	; 0x40
 8006130:	46bd      	mov	sp, r7
 8006132:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006136:	bf00      	nop
 8006138:	40023800 	.word	0x40023800
 800613c:	00f42400 	.word	0x00f42400
 8006140:	017d7840 	.word	0x017d7840

08006144 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006144:	b480      	push	{r7}
 8006146:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006148:	4b03      	ldr	r3, [pc, #12]	; (8006158 <HAL_RCC_GetHCLKFreq+0x14>)
 800614a:	681b      	ldr	r3, [r3, #0]
}
 800614c:	4618      	mov	r0, r3
 800614e:	46bd      	mov	sp, r7
 8006150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006154:	4770      	bx	lr
 8006156:	bf00      	nop
 8006158:	200005f8 	.word	0x200005f8

0800615c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006160:	f7ff fff0 	bl	8006144 <HAL_RCC_GetHCLKFreq>
 8006164:	4602      	mov	r2, r0
 8006166:	4b05      	ldr	r3, [pc, #20]	; (800617c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	0a9b      	lsrs	r3, r3, #10
 800616c:	f003 0307 	and.w	r3, r3, #7
 8006170:	4903      	ldr	r1, [pc, #12]	; (8006180 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006172:	5ccb      	ldrb	r3, [r1, r3]
 8006174:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006178:	4618      	mov	r0, r3
 800617a:	bd80      	pop	{r7, pc}
 800617c:	40023800 	.word	0x40023800
 8006180:	0800a54c 	.word	0x0800a54c

08006184 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006188:	f7ff ffdc 	bl	8006144 <HAL_RCC_GetHCLKFreq>
 800618c:	4602      	mov	r2, r0
 800618e:	4b05      	ldr	r3, [pc, #20]	; (80061a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006190:	689b      	ldr	r3, [r3, #8]
 8006192:	0b5b      	lsrs	r3, r3, #13
 8006194:	f003 0307 	and.w	r3, r3, #7
 8006198:	4903      	ldr	r1, [pc, #12]	; (80061a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800619a:	5ccb      	ldrb	r3, [r1, r3]
 800619c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	bd80      	pop	{r7, pc}
 80061a4:	40023800 	.word	0x40023800
 80061a8:	0800a54c 	.word	0x0800a54c

080061ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b082      	sub	sp, #8
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d101      	bne.n	80061be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80061ba:	2301      	movs	r3, #1
 80061bc:	e041      	b.n	8006242 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061c4:	b2db      	uxtb	r3, r3
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d106      	bne.n	80061d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2200      	movs	r2, #0
 80061ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f7fb ff92 	bl	80020fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2202      	movs	r2, #2
 80061dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681a      	ldr	r2, [r3, #0]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	3304      	adds	r3, #4
 80061e8:	4619      	mov	r1, r3
 80061ea:	4610      	mov	r0, r2
 80061ec:	f000 fbc2 	bl	8006974 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2201      	movs	r2, #1
 80061f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2201      	movs	r2, #1
 80061fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2201      	movs	r2, #1
 8006204:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2201      	movs	r2, #1
 800620c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2201      	movs	r2, #1
 8006214:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2201      	movs	r2, #1
 800621c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2201      	movs	r2, #1
 8006224:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2201      	movs	r2, #1
 800622c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2201      	movs	r2, #1
 8006234:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2201      	movs	r2, #1
 800623c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006240:	2300      	movs	r3, #0
}
 8006242:	4618      	mov	r0, r3
 8006244:	3708      	adds	r7, #8
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}
	...

0800624c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800624c:	b480      	push	{r7}
 800624e:	b085      	sub	sp, #20
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800625a:	b2db      	uxtb	r3, r3
 800625c:	2b01      	cmp	r3, #1
 800625e:	d001      	beq.n	8006264 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006260:	2301      	movs	r3, #1
 8006262:	e03c      	b.n	80062de <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2202      	movs	r2, #2
 8006268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a1e      	ldr	r2, [pc, #120]	; (80062ec <HAL_TIM_Base_Start+0xa0>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d018      	beq.n	80062a8 <HAL_TIM_Base_Start+0x5c>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800627e:	d013      	beq.n	80062a8 <HAL_TIM_Base_Start+0x5c>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a1a      	ldr	r2, [pc, #104]	; (80062f0 <HAL_TIM_Base_Start+0xa4>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d00e      	beq.n	80062a8 <HAL_TIM_Base_Start+0x5c>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a19      	ldr	r2, [pc, #100]	; (80062f4 <HAL_TIM_Base_Start+0xa8>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d009      	beq.n	80062a8 <HAL_TIM_Base_Start+0x5c>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a17      	ldr	r2, [pc, #92]	; (80062f8 <HAL_TIM_Base_Start+0xac>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d004      	beq.n	80062a8 <HAL_TIM_Base_Start+0x5c>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a16      	ldr	r2, [pc, #88]	; (80062fc <HAL_TIM_Base_Start+0xb0>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d111      	bne.n	80062cc <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	689b      	ldr	r3, [r3, #8]
 80062ae:	f003 0307 	and.w	r3, r3, #7
 80062b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2b06      	cmp	r3, #6
 80062b8:	d010      	beq.n	80062dc <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	681a      	ldr	r2, [r3, #0]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f042 0201 	orr.w	r2, r2, #1
 80062c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062ca:	e007      	b.n	80062dc <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	681a      	ldr	r2, [r3, #0]
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f042 0201 	orr.w	r2, r2, #1
 80062da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80062dc:	2300      	movs	r3, #0
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3714      	adds	r7, #20
 80062e2:	46bd      	mov	sp, r7
 80062e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e8:	4770      	bx	lr
 80062ea:	bf00      	nop
 80062ec:	40010000 	.word	0x40010000
 80062f0:	40000400 	.word	0x40000400
 80062f4:	40000800 	.word	0x40000800
 80062f8:	40000c00 	.word	0x40000c00
 80062fc:	40014000 	.word	0x40014000

08006300 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b082      	sub	sp, #8
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d101      	bne.n	8006312 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800630e:	2301      	movs	r3, #1
 8006310:	e041      	b.n	8006396 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006318:	b2db      	uxtb	r3, r3
 800631a:	2b00      	cmp	r3, #0
 800631c:	d106      	bne.n	800632c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2200      	movs	r2, #0
 8006322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f000 f839 	bl	800639e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2202      	movs	r2, #2
 8006330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681a      	ldr	r2, [r3, #0]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	3304      	adds	r3, #4
 800633c:	4619      	mov	r1, r3
 800633e:	4610      	mov	r0, r2
 8006340:	f000 fb18 	bl	8006974 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2201      	movs	r2, #1
 8006348:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2201      	movs	r2, #1
 8006350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2201      	movs	r2, #1
 8006358:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2201      	movs	r2, #1
 8006360:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2201      	movs	r2, #1
 8006368:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2201      	movs	r2, #1
 8006370:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2201      	movs	r2, #1
 8006378:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2201      	movs	r2, #1
 8006380:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2201      	movs	r2, #1
 8006388:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2201      	movs	r2, #1
 8006390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006394:	2300      	movs	r3, #0
}
 8006396:	4618      	mov	r0, r3
 8006398:	3708      	adds	r7, #8
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}

0800639e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800639e:	b480      	push	{r7}
 80063a0:	b083      	sub	sp, #12
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80063a6:	bf00      	nop
 80063a8:	370c      	adds	r7, #12
 80063aa:	46bd      	mov	sp, r7
 80063ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b0:	4770      	bx	lr
	...

080063b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b084      	sub	sp, #16
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d109      	bne.n	80063d8 <HAL_TIM_PWM_Start+0x24>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80063ca:	b2db      	uxtb	r3, r3
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	bf14      	ite	ne
 80063d0:	2301      	movne	r3, #1
 80063d2:	2300      	moveq	r3, #0
 80063d4:	b2db      	uxtb	r3, r3
 80063d6:	e022      	b.n	800641e <HAL_TIM_PWM_Start+0x6a>
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	2b04      	cmp	r3, #4
 80063dc:	d109      	bne.n	80063f2 <HAL_TIM_PWM_Start+0x3e>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80063e4:	b2db      	uxtb	r3, r3
 80063e6:	2b01      	cmp	r3, #1
 80063e8:	bf14      	ite	ne
 80063ea:	2301      	movne	r3, #1
 80063ec:	2300      	moveq	r3, #0
 80063ee:	b2db      	uxtb	r3, r3
 80063f0:	e015      	b.n	800641e <HAL_TIM_PWM_Start+0x6a>
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	2b08      	cmp	r3, #8
 80063f6:	d109      	bne.n	800640c <HAL_TIM_PWM_Start+0x58>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80063fe:	b2db      	uxtb	r3, r3
 8006400:	2b01      	cmp	r3, #1
 8006402:	bf14      	ite	ne
 8006404:	2301      	movne	r3, #1
 8006406:	2300      	moveq	r3, #0
 8006408:	b2db      	uxtb	r3, r3
 800640a:	e008      	b.n	800641e <HAL_TIM_PWM_Start+0x6a>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006412:	b2db      	uxtb	r3, r3
 8006414:	2b01      	cmp	r3, #1
 8006416:	bf14      	ite	ne
 8006418:	2301      	movne	r3, #1
 800641a:	2300      	moveq	r3, #0
 800641c:	b2db      	uxtb	r3, r3
 800641e:	2b00      	cmp	r3, #0
 8006420:	d001      	beq.n	8006426 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006422:	2301      	movs	r3, #1
 8006424:	e068      	b.n	80064f8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d104      	bne.n	8006436 <HAL_TIM_PWM_Start+0x82>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2202      	movs	r2, #2
 8006430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006434:	e013      	b.n	800645e <HAL_TIM_PWM_Start+0xaa>
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	2b04      	cmp	r3, #4
 800643a:	d104      	bne.n	8006446 <HAL_TIM_PWM_Start+0x92>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2202      	movs	r2, #2
 8006440:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006444:	e00b      	b.n	800645e <HAL_TIM_PWM_Start+0xaa>
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	2b08      	cmp	r3, #8
 800644a:	d104      	bne.n	8006456 <HAL_TIM_PWM_Start+0xa2>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2202      	movs	r2, #2
 8006450:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006454:	e003      	b.n	800645e <HAL_TIM_PWM_Start+0xaa>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2202      	movs	r2, #2
 800645a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	2201      	movs	r2, #1
 8006464:	6839      	ldr	r1, [r7, #0]
 8006466:	4618      	mov	r0, r3
 8006468:	f000 fd2a 	bl	8006ec0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a23      	ldr	r2, [pc, #140]	; (8006500 <HAL_TIM_PWM_Start+0x14c>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d107      	bne.n	8006486 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006484:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a1d      	ldr	r2, [pc, #116]	; (8006500 <HAL_TIM_PWM_Start+0x14c>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d018      	beq.n	80064c2 <HAL_TIM_PWM_Start+0x10e>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006498:	d013      	beq.n	80064c2 <HAL_TIM_PWM_Start+0x10e>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a19      	ldr	r2, [pc, #100]	; (8006504 <HAL_TIM_PWM_Start+0x150>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d00e      	beq.n	80064c2 <HAL_TIM_PWM_Start+0x10e>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a17      	ldr	r2, [pc, #92]	; (8006508 <HAL_TIM_PWM_Start+0x154>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d009      	beq.n	80064c2 <HAL_TIM_PWM_Start+0x10e>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a16      	ldr	r2, [pc, #88]	; (800650c <HAL_TIM_PWM_Start+0x158>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d004      	beq.n	80064c2 <HAL_TIM_PWM_Start+0x10e>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a14      	ldr	r2, [pc, #80]	; (8006510 <HAL_TIM_PWM_Start+0x15c>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d111      	bne.n	80064e6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	f003 0307 	and.w	r3, r3, #7
 80064cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2b06      	cmp	r3, #6
 80064d2:	d010      	beq.n	80064f6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	681a      	ldr	r2, [r3, #0]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f042 0201 	orr.w	r2, r2, #1
 80064e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064e4:	e007      	b.n	80064f6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	681a      	ldr	r2, [r3, #0]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f042 0201 	orr.w	r2, r2, #1
 80064f4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80064f6:	2300      	movs	r3, #0
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	3710      	adds	r7, #16
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}
 8006500:	40010000 	.word	0x40010000
 8006504:	40000400 	.word	0x40000400
 8006508:	40000800 	.word	0x40000800
 800650c:	40000c00 	.word	0x40000c00
 8006510:	40014000 	.word	0x40014000

08006514 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b086      	sub	sp, #24
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
 800651c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d101      	bne.n	8006528 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006524:	2301      	movs	r3, #1
 8006526:	e097      	b.n	8006658 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800652e:	b2db      	uxtb	r3, r3
 8006530:	2b00      	cmp	r3, #0
 8006532:	d106      	bne.n	8006542 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2200      	movs	r2, #0
 8006538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f7fb fd95 	bl	800206c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2202      	movs	r2, #2
 8006546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	689b      	ldr	r3, [r3, #8]
 8006550:	687a      	ldr	r2, [r7, #4]
 8006552:	6812      	ldr	r2, [r2, #0]
 8006554:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006558:	f023 0307 	bic.w	r3, r3, #7
 800655c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681a      	ldr	r2, [r3, #0]
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	3304      	adds	r3, #4
 8006566:	4619      	mov	r1, r3
 8006568:	4610      	mov	r0, r2
 800656a:	f000 fa03 	bl	8006974 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	689b      	ldr	r3, [r3, #8]
 8006574:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	699b      	ldr	r3, [r3, #24]
 800657c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	6a1b      	ldr	r3, [r3, #32]
 8006584:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	697a      	ldr	r2, [r7, #20]
 800658c:	4313      	orrs	r3, r2
 800658e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006596:	f023 0303 	bic.w	r3, r3, #3
 800659a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	689a      	ldr	r2, [r3, #8]
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	699b      	ldr	r3, [r3, #24]
 80065a4:	021b      	lsls	r3, r3, #8
 80065a6:	4313      	orrs	r3, r2
 80065a8:	693a      	ldr	r2, [r7, #16]
 80065aa:	4313      	orrs	r3, r2
 80065ac:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80065b4:	f023 030c 	bic.w	r3, r3, #12
 80065b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80065c0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80065c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	68da      	ldr	r2, [r3, #12]
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	69db      	ldr	r3, [r3, #28]
 80065ce:	021b      	lsls	r3, r3, #8
 80065d0:	4313      	orrs	r3, r2
 80065d2:	693a      	ldr	r2, [r7, #16]
 80065d4:	4313      	orrs	r3, r2
 80065d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	691b      	ldr	r3, [r3, #16]
 80065dc:	011a      	lsls	r2, r3, #4
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	6a1b      	ldr	r3, [r3, #32]
 80065e2:	031b      	lsls	r3, r3, #12
 80065e4:	4313      	orrs	r3, r2
 80065e6:	693a      	ldr	r2, [r7, #16]
 80065e8:	4313      	orrs	r3, r2
 80065ea:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80065f2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80065fa:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	685a      	ldr	r2, [r3, #4]
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	695b      	ldr	r3, [r3, #20]
 8006604:	011b      	lsls	r3, r3, #4
 8006606:	4313      	orrs	r3, r2
 8006608:	68fa      	ldr	r2, [r7, #12]
 800660a:	4313      	orrs	r3, r2
 800660c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	697a      	ldr	r2, [r7, #20]
 8006614:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	693a      	ldr	r2, [r7, #16]
 800661c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	68fa      	ldr	r2, [r7, #12]
 8006624:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2201      	movs	r2, #1
 800662a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2201      	movs	r2, #1
 8006632:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2201      	movs	r2, #1
 800663a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2201      	movs	r2, #1
 8006642:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2201      	movs	r2, #1
 800664a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2201      	movs	r2, #1
 8006652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006656:	2300      	movs	r3, #0
}
 8006658:	4618      	mov	r0, r3
 800665a:	3718      	adds	r7, #24
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}

08006660 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b086      	sub	sp, #24
 8006664:	af00      	add	r7, sp, #0
 8006666:	60f8      	str	r0, [r7, #12]
 8006668:	60b9      	str	r1, [r7, #8]
 800666a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800666c:	2300      	movs	r3, #0
 800666e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006676:	2b01      	cmp	r3, #1
 8006678:	d101      	bne.n	800667e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800667a:	2302      	movs	r3, #2
 800667c:	e0ae      	b.n	80067dc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	2201      	movs	r2, #1
 8006682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2b0c      	cmp	r3, #12
 800668a:	f200 809f 	bhi.w	80067cc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800668e:	a201      	add	r2, pc, #4	; (adr r2, 8006694 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006694:	080066c9 	.word	0x080066c9
 8006698:	080067cd 	.word	0x080067cd
 800669c:	080067cd 	.word	0x080067cd
 80066a0:	080067cd 	.word	0x080067cd
 80066a4:	08006709 	.word	0x08006709
 80066a8:	080067cd 	.word	0x080067cd
 80066ac:	080067cd 	.word	0x080067cd
 80066b0:	080067cd 	.word	0x080067cd
 80066b4:	0800674b 	.word	0x0800674b
 80066b8:	080067cd 	.word	0x080067cd
 80066bc:	080067cd 	.word	0x080067cd
 80066c0:	080067cd 	.word	0x080067cd
 80066c4:	0800678b 	.word	0x0800678b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	68b9      	ldr	r1, [r7, #8]
 80066ce:	4618      	mov	r0, r3
 80066d0:	f000 f9d0 	bl	8006a74 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	699a      	ldr	r2, [r3, #24]
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f042 0208 	orr.w	r2, r2, #8
 80066e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	699a      	ldr	r2, [r3, #24]
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f022 0204 	bic.w	r2, r2, #4
 80066f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	6999      	ldr	r1, [r3, #24]
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	691a      	ldr	r2, [r3, #16]
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	430a      	orrs	r2, r1
 8006704:	619a      	str	r2, [r3, #24]
      break;
 8006706:	e064      	b.n	80067d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	68b9      	ldr	r1, [r7, #8]
 800670e:	4618      	mov	r0, r3
 8006710:	f000 fa16 	bl	8006b40 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	699a      	ldr	r2, [r3, #24]
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006722:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	699a      	ldr	r2, [r3, #24]
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006732:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	6999      	ldr	r1, [r3, #24]
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	691b      	ldr	r3, [r3, #16]
 800673e:	021a      	lsls	r2, r3, #8
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	430a      	orrs	r2, r1
 8006746:	619a      	str	r2, [r3, #24]
      break;
 8006748:	e043      	b.n	80067d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	68b9      	ldr	r1, [r7, #8]
 8006750:	4618      	mov	r0, r3
 8006752:	f000 fa61 	bl	8006c18 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	69da      	ldr	r2, [r3, #28]
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f042 0208 	orr.w	r2, r2, #8
 8006764:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	69da      	ldr	r2, [r3, #28]
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f022 0204 	bic.w	r2, r2, #4
 8006774:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	69d9      	ldr	r1, [r3, #28]
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	691a      	ldr	r2, [r3, #16]
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	430a      	orrs	r2, r1
 8006786:	61da      	str	r2, [r3, #28]
      break;
 8006788:	e023      	b.n	80067d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	68b9      	ldr	r1, [r7, #8]
 8006790:	4618      	mov	r0, r3
 8006792:	f000 faab 	bl	8006cec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	69da      	ldr	r2, [r3, #28]
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80067a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	69da      	ldr	r2, [r3, #28]
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	69d9      	ldr	r1, [r3, #28]
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	691b      	ldr	r3, [r3, #16]
 80067c0:	021a      	lsls	r2, r3, #8
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	430a      	orrs	r2, r1
 80067c8:	61da      	str	r2, [r3, #28]
      break;
 80067ca:	e002      	b.n	80067d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80067cc:	2301      	movs	r3, #1
 80067ce:	75fb      	strb	r3, [r7, #23]
      break;
 80067d0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	2200      	movs	r2, #0
 80067d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80067da:	7dfb      	ldrb	r3, [r7, #23]
}
 80067dc:	4618      	mov	r0, r3
 80067de:	3718      	adds	r7, #24
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}

080067e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b084      	sub	sp, #16
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
 80067ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80067ee:	2300      	movs	r3, #0
 80067f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d101      	bne.n	8006800 <HAL_TIM_ConfigClockSource+0x1c>
 80067fc:	2302      	movs	r3, #2
 80067fe:	e0b4      	b.n	800696a <HAL_TIM_ConfigClockSource+0x186>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2201      	movs	r2, #1
 8006804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2202      	movs	r2, #2
 800680c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	689b      	ldr	r3, [r3, #8]
 8006816:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800681e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006826:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	68ba      	ldr	r2, [r7, #8]
 800682e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006838:	d03e      	beq.n	80068b8 <HAL_TIM_ConfigClockSource+0xd4>
 800683a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800683e:	f200 8087 	bhi.w	8006950 <HAL_TIM_ConfigClockSource+0x16c>
 8006842:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006846:	f000 8086 	beq.w	8006956 <HAL_TIM_ConfigClockSource+0x172>
 800684a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800684e:	d87f      	bhi.n	8006950 <HAL_TIM_ConfigClockSource+0x16c>
 8006850:	2b70      	cmp	r3, #112	; 0x70
 8006852:	d01a      	beq.n	800688a <HAL_TIM_ConfigClockSource+0xa6>
 8006854:	2b70      	cmp	r3, #112	; 0x70
 8006856:	d87b      	bhi.n	8006950 <HAL_TIM_ConfigClockSource+0x16c>
 8006858:	2b60      	cmp	r3, #96	; 0x60
 800685a:	d050      	beq.n	80068fe <HAL_TIM_ConfigClockSource+0x11a>
 800685c:	2b60      	cmp	r3, #96	; 0x60
 800685e:	d877      	bhi.n	8006950 <HAL_TIM_ConfigClockSource+0x16c>
 8006860:	2b50      	cmp	r3, #80	; 0x50
 8006862:	d03c      	beq.n	80068de <HAL_TIM_ConfigClockSource+0xfa>
 8006864:	2b50      	cmp	r3, #80	; 0x50
 8006866:	d873      	bhi.n	8006950 <HAL_TIM_ConfigClockSource+0x16c>
 8006868:	2b40      	cmp	r3, #64	; 0x40
 800686a:	d058      	beq.n	800691e <HAL_TIM_ConfigClockSource+0x13a>
 800686c:	2b40      	cmp	r3, #64	; 0x40
 800686e:	d86f      	bhi.n	8006950 <HAL_TIM_ConfigClockSource+0x16c>
 8006870:	2b30      	cmp	r3, #48	; 0x30
 8006872:	d064      	beq.n	800693e <HAL_TIM_ConfigClockSource+0x15a>
 8006874:	2b30      	cmp	r3, #48	; 0x30
 8006876:	d86b      	bhi.n	8006950 <HAL_TIM_ConfigClockSource+0x16c>
 8006878:	2b20      	cmp	r3, #32
 800687a:	d060      	beq.n	800693e <HAL_TIM_ConfigClockSource+0x15a>
 800687c:	2b20      	cmp	r3, #32
 800687e:	d867      	bhi.n	8006950 <HAL_TIM_ConfigClockSource+0x16c>
 8006880:	2b00      	cmp	r3, #0
 8006882:	d05c      	beq.n	800693e <HAL_TIM_ConfigClockSource+0x15a>
 8006884:	2b10      	cmp	r3, #16
 8006886:	d05a      	beq.n	800693e <HAL_TIM_ConfigClockSource+0x15a>
 8006888:	e062      	b.n	8006950 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6818      	ldr	r0, [r3, #0]
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	6899      	ldr	r1, [r3, #8]
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	685a      	ldr	r2, [r3, #4]
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	68db      	ldr	r3, [r3, #12]
 800689a:	f000 faf1 	bl	8006e80 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	689b      	ldr	r3, [r3, #8]
 80068a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80068ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	68ba      	ldr	r2, [r7, #8]
 80068b4:	609a      	str	r2, [r3, #8]
      break;
 80068b6:	e04f      	b.n	8006958 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6818      	ldr	r0, [r3, #0]
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	6899      	ldr	r1, [r3, #8]
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	685a      	ldr	r2, [r3, #4]
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	68db      	ldr	r3, [r3, #12]
 80068c8:	f000 fada 	bl	8006e80 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	689a      	ldr	r2, [r3, #8]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80068da:	609a      	str	r2, [r3, #8]
      break;
 80068dc:	e03c      	b.n	8006958 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6818      	ldr	r0, [r3, #0]
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	6859      	ldr	r1, [r3, #4]
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	68db      	ldr	r3, [r3, #12]
 80068ea:	461a      	mov	r2, r3
 80068ec:	f000 fa4e 	bl	8006d8c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	2150      	movs	r1, #80	; 0x50
 80068f6:	4618      	mov	r0, r3
 80068f8:	f000 faa7 	bl	8006e4a <TIM_ITRx_SetConfig>
      break;
 80068fc:	e02c      	b.n	8006958 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6818      	ldr	r0, [r3, #0]
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	6859      	ldr	r1, [r3, #4]
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	68db      	ldr	r3, [r3, #12]
 800690a:	461a      	mov	r2, r3
 800690c:	f000 fa6d 	bl	8006dea <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	2160      	movs	r1, #96	; 0x60
 8006916:	4618      	mov	r0, r3
 8006918:	f000 fa97 	bl	8006e4a <TIM_ITRx_SetConfig>
      break;
 800691c:	e01c      	b.n	8006958 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6818      	ldr	r0, [r3, #0]
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	6859      	ldr	r1, [r3, #4]
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	68db      	ldr	r3, [r3, #12]
 800692a:	461a      	mov	r2, r3
 800692c:	f000 fa2e 	bl	8006d8c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	2140      	movs	r1, #64	; 0x40
 8006936:	4618      	mov	r0, r3
 8006938:	f000 fa87 	bl	8006e4a <TIM_ITRx_SetConfig>
      break;
 800693c:	e00c      	b.n	8006958 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681a      	ldr	r2, [r3, #0]
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4619      	mov	r1, r3
 8006948:	4610      	mov	r0, r2
 800694a:	f000 fa7e 	bl	8006e4a <TIM_ITRx_SetConfig>
      break;
 800694e:	e003      	b.n	8006958 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006950:	2301      	movs	r3, #1
 8006952:	73fb      	strb	r3, [r7, #15]
      break;
 8006954:	e000      	b.n	8006958 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006956:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2201      	movs	r2, #1
 800695c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2200      	movs	r2, #0
 8006964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006968:	7bfb      	ldrb	r3, [r7, #15]
}
 800696a:	4618      	mov	r0, r3
 800696c:	3710      	adds	r7, #16
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}
	...

08006974 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006974:	b480      	push	{r7}
 8006976:	b085      	sub	sp, #20
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
 800697c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	4a34      	ldr	r2, [pc, #208]	; (8006a58 <TIM_Base_SetConfig+0xe4>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d00f      	beq.n	80069ac <TIM_Base_SetConfig+0x38>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006992:	d00b      	beq.n	80069ac <TIM_Base_SetConfig+0x38>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	4a31      	ldr	r2, [pc, #196]	; (8006a5c <TIM_Base_SetConfig+0xe8>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d007      	beq.n	80069ac <TIM_Base_SetConfig+0x38>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	4a30      	ldr	r2, [pc, #192]	; (8006a60 <TIM_Base_SetConfig+0xec>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d003      	beq.n	80069ac <TIM_Base_SetConfig+0x38>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	4a2f      	ldr	r2, [pc, #188]	; (8006a64 <TIM_Base_SetConfig+0xf0>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d108      	bne.n	80069be <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	68fa      	ldr	r2, [r7, #12]
 80069ba:	4313      	orrs	r3, r2
 80069bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	4a25      	ldr	r2, [pc, #148]	; (8006a58 <TIM_Base_SetConfig+0xe4>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d01b      	beq.n	80069fe <TIM_Base_SetConfig+0x8a>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069cc:	d017      	beq.n	80069fe <TIM_Base_SetConfig+0x8a>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	4a22      	ldr	r2, [pc, #136]	; (8006a5c <TIM_Base_SetConfig+0xe8>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d013      	beq.n	80069fe <TIM_Base_SetConfig+0x8a>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	4a21      	ldr	r2, [pc, #132]	; (8006a60 <TIM_Base_SetConfig+0xec>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d00f      	beq.n	80069fe <TIM_Base_SetConfig+0x8a>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	4a20      	ldr	r2, [pc, #128]	; (8006a64 <TIM_Base_SetConfig+0xf0>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d00b      	beq.n	80069fe <TIM_Base_SetConfig+0x8a>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	4a1f      	ldr	r2, [pc, #124]	; (8006a68 <TIM_Base_SetConfig+0xf4>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d007      	beq.n	80069fe <TIM_Base_SetConfig+0x8a>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	4a1e      	ldr	r2, [pc, #120]	; (8006a6c <TIM_Base_SetConfig+0xf8>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d003      	beq.n	80069fe <TIM_Base_SetConfig+0x8a>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	4a1d      	ldr	r2, [pc, #116]	; (8006a70 <TIM_Base_SetConfig+0xfc>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d108      	bne.n	8006a10 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	68db      	ldr	r3, [r3, #12]
 8006a0a:	68fa      	ldr	r2, [r7, #12]
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	695b      	ldr	r3, [r3, #20]
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	68fa      	ldr	r2, [r7, #12]
 8006a22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	689a      	ldr	r2, [r3, #8]
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	681a      	ldr	r2, [r3, #0]
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	4a08      	ldr	r2, [pc, #32]	; (8006a58 <TIM_Base_SetConfig+0xe4>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d103      	bne.n	8006a44 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	691a      	ldr	r2, [r3, #16]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2201      	movs	r2, #1
 8006a48:	615a      	str	r2, [r3, #20]
}
 8006a4a:	bf00      	nop
 8006a4c:	3714      	adds	r7, #20
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a54:	4770      	bx	lr
 8006a56:	bf00      	nop
 8006a58:	40010000 	.word	0x40010000
 8006a5c:	40000400 	.word	0x40000400
 8006a60:	40000800 	.word	0x40000800
 8006a64:	40000c00 	.word	0x40000c00
 8006a68:	40014000 	.word	0x40014000
 8006a6c:	40014400 	.word	0x40014400
 8006a70:	40014800 	.word	0x40014800

08006a74 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a74:	b480      	push	{r7}
 8006a76:	b087      	sub	sp, #28
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
 8006a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6a1b      	ldr	r3, [r3, #32]
 8006a82:	f023 0201 	bic.w	r2, r3, #1
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6a1b      	ldr	r3, [r3, #32]
 8006a8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	699b      	ldr	r3, [r3, #24]
 8006a9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006aa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	f023 0303 	bic.w	r3, r3, #3
 8006aaa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	68fa      	ldr	r2, [r7, #12]
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	f023 0302 	bic.w	r3, r3, #2
 8006abc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	689b      	ldr	r3, [r3, #8]
 8006ac2:	697a      	ldr	r2, [r7, #20]
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	4a1c      	ldr	r2, [pc, #112]	; (8006b3c <TIM_OC1_SetConfig+0xc8>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d10c      	bne.n	8006aea <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	f023 0308 	bic.w	r3, r3, #8
 8006ad6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	68db      	ldr	r3, [r3, #12]
 8006adc:	697a      	ldr	r2, [r7, #20]
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	f023 0304 	bic.w	r3, r3, #4
 8006ae8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	4a13      	ldr	r2, [pc, #76]	; (8006b3c <TIM_OC1_SetConfig+0xc8>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d111      	bne.n	8006b16 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006af8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	695b      	ldr	r3, [r3, #20]
 8006b06:	693a      	ldr	r2, [r7, #16]
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	699b      	ldr	r3, [r3, #24]
 8006b10:	693a      	ldr	r2, [r7, #16]
 8006b12:	4313      	orrs	r3, r2
 8006b14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	693a      	ldr	r2, [r7, #16]
 8006b1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	68fa      	ldr	r2, [r7, #12]
 8006b20:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	685a      	ldr	r2, [r3, #4]
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	697a      	ldr	r2, [r7, #20]
 8006b2e:	621a      	str	r2, [r3, #32]
}
 8006b30:	bf00      	nop
 8006b32:	371c      	adds	r7, #28
 8006b34:	46bd      	mov	sp, r7
 8006b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3a:	4770      	bx	lr
 8006b3c:	40010000 	.word	0x40010000

08006b40 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b087      	sub	sp, #28
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
 8006b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6a1b      	ldr	r3, [r3, #32]
 8006b4e:	f023 0210 	bic.w	r2, r3, #16
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6a1b      	ldr	r3, [r3, #32]
 8006b5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	699b      	ldr	r3, [r3, #24]
 8006b66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	021b      	lsls	r3, r3, #8
 8006b7e:	68fa      	ldr	r2, [r7, #12]
 8006b80:	4313      	orrs	r3, r2
 8006b82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	f023 0320 	bic.w	r3, r3, #32
 8006b8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	689b      	ldr	r3, [r3, #8]
 8006b90:	011b      	lsls	r3, r3, #4
 8006b92:	697a      	ldr	r2, [r7, #20]
 8006b94:	4313      	orrs	r3, r2
 8006b96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	4a1e      	ldr	r2, [pc, #120]	; (8006c14 <TIM_OC2_SetConfig+0xd4>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d10d      	bne.n	8006bbc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ba6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	68db      	ldr	r3, [r3, #12]
 8006bac:	011b      	lsls	r3, r3, #4
 8006bae:	697a      	ldr	r2, [r7, #20]
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006bb4:	697b      	ldr	r3, [r7, #20]
 8006bb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	4a15      	ldr	r2, [pc, #84]	; (8006c14 <TIM_OC2_SetConfig+0xd4>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d113      	bne.n	8006bec <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006bca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006bcc:	693b      	ldr	r3, [r7, #16]
 8006bce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006bd2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	695b      	ldr	r3, [r3, #20]
 8006bd8:	009b      	lsls	r3, r3, #2
 8006bda:	693a      	ldr	r2, [r7, #16]
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	699b      	ldr	r3, [r3, #24]
 8006be4:	009b      	lsls	r3, r3, #2
 8006be6:	693a      	ldr	r2, [r7, #16]
 8006be8:	4313      	orrs	r3, r2
 8006bea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	693a      	ldr	r2, [r7, #16]
 8006bf0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	68fa      	ldr	r2, [r7, #12]
 8006bf6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	685a      	ldr	r2, [r3, #4]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	697a      	ldr	r2, [r7, #20]
 8006c04:	621a      	str	r2, [r3, #32]
}
 8006c06:	bf00      	nop
 8006c08:	371c      	adds	r7, #28
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c10:	4770      	bx	lr
 8006c12:	bf00      	nop
 8006c14:	40010000 	.word	0x40010000

08006c18 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b087      	sub	sp, #28
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
 8006c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6a1b      	ldr	r3, [r3, #32]
 8006c26:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6a1b      	ldr	r3, [r3, #32]
 8006c32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	685b      	ldr	r3, [r3, #4]
 8006c38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	69db      	ldr	r3, [r3, #28]
 8006c3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	f023 0303 	bic.w	r3, r3, #3
 8006c4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	68fa      	ldr	r2, [r7, #12]
 8006c56:	4313      	orrs	r3, r2
 8006c58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006c5a:	697b      	ldr	r3, [r7, #20]
 8006c5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006c60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	689b      	ldr	r3, [r3, #8]
 8006c66:	021b      	lsls	r3, r3, #8
 8006c68:	697a      	ldr	r2, [r7, #20]
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	4a1d      	ldr	r2, [pc, #116]	; (8006ce8 <TIM_OC3_SetConfig+0xd0>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d10d      	bne.n	8006c92 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006c7c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	68db      	ldr	r3, [r3, #12]
 8006c82:	021b      	lsls	r3, r3, #8
 8006c84:	697a      	ldr	r2, [r7, #20]
 8006c86:	4313      	orrs	r3, r2
 8006c88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006c90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	4a14      	ldr	r2, [pc, #80]	; (8006ce8 <TIM_OC3_SetConfig+0xd0>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d113      	bne.n	8006cc2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006c9a:	693b      	ldr	r3, [r7, #16]
 8006c9c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ca0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006ca8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	695b      	ldr	r3, [r3, #20]
 8006cae:	011b      	lsls	r3, r3, #4
 8006cb0:	693a      	ldr	r2, [r7, #16]
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	699b      	ldr	r3, [r3, #24]
 8006cba:	011b      	lsls	r3, r3, #4
 8006cbc:	693a      	ldr	r2, [r7, #16]
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	693a      	ldr	r2, [r7, #16]
 8006cc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	68fa      	ldr	r2, [r7, #12]
 8006ccc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	685a      	ldr	r2, [r3, #4]
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	697a      	ldr	r2, [r7, #20]
 8006cda:	621a      	str	r2, [r3, #32]
}
 8006cdc:	bf00      	nop
 8006cde:	371c      	adds	r7, #28
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce6:	4770      	bx	lr
 8006ce8:	40010000 	.word	0x40010000

08006cec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b087      	sub	sp, #28
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
 8006cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6a1b      	ldr	r3, [r3, #32]
 8006cfa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6a1b      	ldr	r3, [r3, #32]
 8006d06:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	685b      	ldr	r3, [r3, #4]
 8006d0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	69db      	ldr	r3, [r3, #28]
 8006d12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	021b      	lsls	r3, r3, #8
 8006d2a:	68fa      	ldr	r2, [r7, #12]
 8006d2c:	4313      	orrs	r3, r2
 8006d2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006d36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	689b      	ldr	r3, [r3, #8]
 8006d3c:	031b      	lsls	r3, r3, #12
 8006d3e:	693a      	ldr	r2, [r7, #16]
 8006d40:	4313      	orrs	r3, r2
 8006d42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	4a10      	ldr	r2, [pc, #64]	; (8006d88 <TIM_OC4_SetConfig+0x9c>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d109      	bne.n	8006d60 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d52:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	695b      	ldr	r3, [r3, #20]
 8006d58:	019b      	lsls	r3, r3, #6
 8006d5a:	697a      	ldr	r2, [r7, #20]
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	697a      	ldr	r2, [r7, #20]
 8006d64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	68fa      	ldr	r2, [r7, #12]
 8006d6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	685a      	ldr	r2, [r3, #4]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	693a      	ldr	r2, [r7, #16]
 8006d78:	621a      	str	r2, [r3, #32]
}
 8006d7a:	bf00      	nop
 8006d7c:	371c      	adds	r7, #28
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d84:	4770      	bx	lr
 8006d86:	bf00      	nop
 8006d88:	40010000 	.word	0x40010000

08006d8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b087      	sub	sp, #28
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	60f8      	str	r0, [r7, #12]
 8006d94:	60b9      	str	r1, [r7, #8]
 8006d96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	6a1b      	ldr	r3, [r3, #32]
 8006d9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	6a1b      	ldr	r3, [r3, #32]
 8006da2:	f023 0201 	bic.w	r2, r3, #1
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	699b      	ldr	r3, [r3, #24]
 8006dae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006db6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	011b      	lsls	r3, r3, #4
 8006dbc:	693a      	ldr	r2, [r7, #16]
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	f023 030a 	bic.w	r3, r3, #10
 8006dc8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006dca:	697a      	ldr	r2, [r7, #20]
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	693a      	ldr	r2, [r7, #16]
 8006dd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	697a      	ldr	r2, [r7, #20]
 8006ddc:	621a      	str	r2, [r3, #32]
}
 8006dde:	bf00      	nop
 8006de0:	371c      	adds	r7, #28
 8006de2:	46bd      	mov	sp, r7
 8006de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de8:	4770      	bx	lr

08006dea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006dea:	b480      	push	{r7}
 8006dec:	b087      	sub	sp, #28
 8006dee:	af00      	add	r7, sp, #0
 8006df0:	60f8      	str	r0, [r7, #12]
 8006df2:	60b9      	str	r1, [r7, #8]
 8006df4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	6a1b      	ldr	r3, [r3, #32]
 8006dfa:	f023 0210 	bic.w	r2, r3, #16
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	699b      	ldr	r3, [r3, #24]
 8006e06:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	6a1b      	ldr	r3, [r3, #32]
 8006e0c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e14:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	031b      	lsls	r3, r3, #12
 8006e1a:	697a      	ldr	r2, [r7, #20]
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006e26:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	011b      	lsls	r3, r3, #4
 8006e2c:	693a      	ldr	r2, [r7, #16]
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	697a      	ldr	r2, [r7, #20]
 8006e36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	693a      	ldr	r2, [r7, #16]
 8006e3c:	621a      	str	r2, [r3, #32]
}
 8006e3e:	bf00      	nop
 8006e40:	371c      	adds	r7, #28
 8006e42:	46bd      	mov	sp, r7
 8006e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e48:	4770      	bx	lr

08006e4a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006e4a:	b480      	push	{r7}
 8006e4c:	b085      	sub	sp, #20
 8006e4e:	af00      	add	r7, sp, #0
 8006e50:	6078      	str	r0, [r7, #4]
 8006e52:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	689b      	ldr	r3, [r3, #8]
 8006e58:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e60:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006e62:	683a      	ldr	r2, [r7, #0]
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	4313      	orrs	r3, r2
 8006e68:	f043 0307 	orr.w	r3, r3, #7
 8006e6c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	68fa      	ldr	r2, [r7, #12]
 8006e72:	609a      	str	r2, [r3, #8]
}
 8006e74:	bf00      	nop
 8006e76:	3714      	adds	r7, #20
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7e:	4770      	bx	lr

08006e80 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006e80:	b480      	push	{r7}
 8006e82:	b087      	sub	sp, #28
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	60f8      	str	r0, [r7, #12]
 8006e88:	60b9      	str	r1, [r7, #8]
 8006e8a:	607a      	str	r2, [r7, #4]
 8006e8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	689b      	ldr	r3, [r3, #8]
 8006e92:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e9a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	021a      	lsls	r2, r3, #8
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	431a      	orrs	r2, r3
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	697a      	ldr	r2, [r7, #20]
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	697a      	ldr	r2, [r7, #20]
 8006eb2:	609a      	str	r2, [r3, #8]
}
 8006eb4:	bf00      	nop
 8006eb6:	371c      	adds	r7, #28
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebe:	4770      	bx	lr

08006ec0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b087      	sub	sp, #28
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	60f8      	str	r0, [r7, #12]
 8006ec8:	60b9      	str	r1, [r7, #8]
 8006eca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	f003 031f 	and.w	r3, r3, #31
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ed8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	6a1a      	ldr	r2, [r3, #32]
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	43db      	mvns	r3, r3
 8006ee2:	401a      	ands	r2, r3
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	6a1a      	ldr	r2, [r3, #32]
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	f003 031f 	and.w	r3, r3, #31
 8006ef2:	6879      	ldr	r1, [r7, #4]
 8006ef4:	fa01 f303 	lsl.w	r3, r1, r3
 8006ef8:	431a      	orrs	r2, r3
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	621a      	str	r2, [r3, #32]
}
 8006efe:	bf00      	nop
 8006f00:	371c      	adds	r7, #28
 8006f02:	46bd      	mov	sp, r7
 8006f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f08:	4770      	bx	lr
	...

08006f0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b085      	sub	sp, #20
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
 8006f14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f1c:	2b01      	cmp	r3, #1
 8006f1e:	d101      	bne.n	8006f24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f20:	2302      	movs	r3, #2
 8006f22:	e050      	b.n	8006fc6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2201      	movs	r2, #1
 8006f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2202      	movs	r2, #2
 8006f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	685b      	ldr	r3, [r3, #4]
 8006f3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	689b      	ldr	r3, [r3, #8]
 8006f42:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	68fa      	ldr	r2, [r7, #12]
 8006f52:	4313      	orrs	r3, r2
 8006f54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	68fa      	ldr	r2, [r7, #12]
 8006f5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a1c      	ldr	r2, [pc, #112]	; (8006fd4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d018      	beq.n	8006f9a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f70:	d013      	beq.n	8006f9a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a18      	ldr	r2, [pc, #96]	; (8006fd8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d00e      	beq.n	8006f9a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a16      	ldr	r2, [pc, #88]	; (8006fdc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d009      	beq.n	8006f9a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a15      	ldr	r2, [pc, #84]	; (8006fe0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d004      	beq.n	8006f9a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a13      	ldr	r2, [pc, #76]	; (8006fe4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d10c      	bne.n	8006fb4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006fa0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	68ba      	ldr	r2, [r7, #8]
 8006fa8:	4313      	orrs	r3, r2
 8006faa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	68ba      	ldr	r2, [r7, #8]
 8006fb2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006fc4:	2300      	movs	r3, #0
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3714      	adds	r7, #20
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd0:	4770      	bx	lr
 8006fd2:	bf00      	nop
 8006fd4:	40010000 	.word	0x40010000
 8006fd8:	40000400 	.word	0x40000400
 8006fdc:	40000800 	.word	0x40000800
 8006fe0:	40000c00 	.word	0x40000c00
 8006fe4:	40014000 	.word	0x40014000

08006fe8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b082      	sub	sp, #8
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d101      	bne.n	8006ffa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	e03f      	b.n	800707a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007000:	b2db      	uxtb	r3, r3
 8007002:	2b00      	cmp	r3, #0
 8007004:	d106      	bne.n	8007014 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2200      	movs	r2, #0
 800700a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f7fb f8d0 	bl	80021b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2224      	movs	r2, #36	; 0x24
 8007018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	68da      	ldr	r2, [r3, #12]
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800702a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f000 f929 	bl	8007284 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	691a      	ldr	r2, [r3, #16]
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007040:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	695a      	ldr	r2, [r3, #20]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007050:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	68da      	ldr	r2, [r3, #12]
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007060:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2200      	movs	r2, #0
 8007066:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2220      	movs	r2, #32
 800706c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2220      	movs	r2, #32
 8007074:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007078:	2300      	movs	r3, #0
}
 800707a:	4618      	mov	r0, r3
 800707c:	3708      	adds	r7, #8
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}

08007082 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007082:	b580      	push	{r7, lr}
 8007084:	b08a      	sub	sp, #40	; 0x28
 8007086:	af02      	add	r7, sp, #8
 8007088:	60f8      	str	r0, [r7, #12]
 800708a:	60b9      	str	r1, [r7, #8]
 800708c:	603b      	str	r3, [r7, #0]
 800708e:	4613      	mov	r3, r2
 8007090:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007092:	2300      	movs	r3, #0
 8007094:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800709c:	b2db      	uxtb	r3, r3
 800709e:	2b20      	cmp	r3, #32
 80070a0:	d17c      	bne.n	800719c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d002      	beq.n	80070ae <HAL_UART_Transmit+0x2c>
 80070a8:	88fb      	ldrh	r3, [r7, #6]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d101      	bne.n	80070b2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80070ae:	2301      	movs	r3, #1
 80070b0:	e075      	b.n	800719e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	d101      	bne.n	80070c0 <HAL_UART_Transmit+0x3e>
 80070bc:	2302      	movs	r3, #2
 80070be:	e06e      	b.n	800719e <HAL_UART_Transmit+0x11c>
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	2201      	movs	r2, #1
 80070c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	2200      	movs	r2, #0
 80070cc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2221      	movs	r2, #33	; 0x21
 80070d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80070d6:	f7fe f981 	bl	80053dc <HAL_GetTick>
 80070da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	88fa      	ldrh	r2, [r7, #6]
 80070e0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	88fa      	ldrh	r2, [r7, #6]
 80070e6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	689b      	ldr	r3, [r3, #8]
 80070ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070f0:	d108      	bne.n	8007104 <HAL_UART_Transmit+0x82>
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	691b      	ldr	r3, [r3, #16]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d104      	bne.n	8007104 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80070fa:	2300      	movs	r3, #0
 80070fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	61bb      	str	r3, [r7, #24]
 8007102:	e003      	b.n	800710c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007108:	2300      	movs	r3, #0
 800710a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	2200      	movs	r2, #0
 8007110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007114:	e02a      	b.n	800716c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	9300      	str	r3, [sp, #0]
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	2200      	movs	r2, #0
 800711e:	2180      	movs	r1, #128	; 0x80
 8007120:	68f8      	ldr	r0, [r7, #12]
 8007122:	f000 f840 	bl	80071a6 <UART_WaitOnFlagUntilTimeout>
 8007126:	4603      	mov	r3, r0
 8007128:	2b00      	cmp	r3, #0
 800712a:	d001      	beq.n	8007130 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800712c:	2303      	movs	r3, #3
 800712e:	e036      	b.n	800719e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007130:	69fb      	ldr	r3, [r7, #28]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d10b      	bne.n	800714e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007136:	69bb      	ldr	r3, [r7, #24]
 8007138:	881b      	ldrh	r3, [r3, #0]
 800713a:	461a      	mov	r2, r3
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007144:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007146:	69bb      	ldr	r3, [r7, #24]
 8007148:	3302      	adds	r3, #2
 800714a:	61bb      	str	r3, [r7, #24]
 800714c:	e007      	b.n	800715e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800714e:	69fb      	ldr	r3, [r7, #28]
 8007150:	781a      	ldrb	r2, [r3, #0]
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007158:	69fb      	ldr	r3, [r7, #28]
 800715a:	3301      	adds	r3, #1
 800715c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007162:	b29b      	uxth	r3, r3
 8007164:	3b01      	subs	r3, #1
 8007166:	b29a      	uxth	r2, r3
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007170:	b29b      	uxth	r3, r3
 8007172:	2b00      	cmp	r3, #0
 8007174:	d1cf      	bne.n	8007116 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	9300      	str	r3, [sp, #0]
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	2200      	movs	r2, #0
 800717e:	2140      	movs	r1, #64	; 0x40
 8007180:	68f8      	ldr	r0, [r7, #12]
 8007182:	f000 f810 	bl	80071a6 <UART_WaitOnFlagUntilTimeout>
 8007186:	4603      	mov	r3, r0
 8007188:	2b00      	cmp	r3, #0
 800718a:	d001      	beq.n	8007190 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800718c:	2303      	movs	r3, #3
 800718e:	e006      	b.n	800719e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	2220      	movs	r2, #32
 8007194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007198:	2300      	movs	r3, #0
 800719a:	e000      	b.n	800719e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800719c:	2302      	movs	r3, #2
  }
}
 800719e:	4618      	mov	r0, r3
 80071a0:	3720      	adds	r7, #32
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}

080071a6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80071a6:	b580      	push	{r7, lr}
 80071a8:	b090      	sub	sp, #64	; 0x40
 80071aa:	af00      	add	r7, sp, #0
 80071ac:	60f8      	str	r0, [r7, #12]
 80071ae:	60b9      	str	r1, [r7, #8]
 80071b0:	603b      	str	r3, [r7, #0]
 80071b2:	4613      	mov	r3, r2
 80071b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071b6:	e050      	b.n	800725a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80071b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071be:	d04c      	beq.n	800725a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80071c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d007      	beq.n	80071d6 <UART_WaitOnFlagUntilTimeout+0x30>
 80071c6:	f7fe f909 	bl	80053dc <HAL_GetTick>
 80071ca:	4602      	mov	r2, r0
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	1ad3      	subs	r3, r2, r3
 80071d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80071d2:	429a      	cmp	r2, r3
 80071d4:	d241      	bcs.n	800725a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	330c      	adds	r3, #12
 80071dc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071e0:	e853 3f00 	ldrex	r3, [r3]
 80071e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80071e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80071ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	330c      	adds	r3, #12
 80071f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80071f6:	637a      	str	r2, [r7, #52]	; 0x34
 80071f8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80071fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80071fe:	e841 2300 	strex	r3, r2, [r1]
 8007202:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007206:	2b00      	cmp	r3, #0
 8007208:	d1e5      	bne.n	80071d6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	3314      	adds	r3, #20
 8007210:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	e853 3f00 	ldrex	r3, [r3]
 8007218:	613b      	str	r3, [r7, #16]
   return(result);
 800721a:	693b      	ldr	r3, [r7, #16]
 800721c:	f023 0301 	bic.w	r3, r3, #1
 8007220:	63bb      	str	r3, [r7, #56]	; 0x38
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	3314      	adds	r3, #20
 8007228:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800722a:	623a      	str	r2, [r7, #32]
 800722c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800722e:	69f9      	ldr	r1, [r7, #28]
 8007230:	6a3a      	ldr	r2, [r7, #32]
 8007232:	e841 2300 	strex	r3, r2, [r1]
 8007236:	61bb      	str	r3, [r7, #24]
   return(result);
 8007238:	69bb      	ldr	r3, [r7, #24]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d1e5      	bne.n	800720a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	2220      	movs	r2, #32
 8007242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	2220      	movs	r2, #32
 800724a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	2200      	movs	r2, #0
 8007252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007256:	2303      	movs	r3, #3
 8007258:	e00f      	b.n	800727a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	681a      	ldr	r2, [r3, #0]
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	4013      	ands	r3, r2
 8007264:	68ba      	ldr	r2, [r7, #8]
 8007266:	429a      	cmp	r2, r3
 8007268:	bf0c      	ite	eq
 800726a:	2301      	moveq	r3, #1
 800726c:	2300      	movne	r3, #0
 800726e:	b2db      	uxtb	r3, r3
 8007270:	461a      	mov	r2, r3
 8007272:	79fb      	ldrb	r3, [r7, #7]
 8007274:	429a      	cmp	r2, r3
 8007276:	d09f      	beq.n	80071b8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007278:	2300      	movs	r3, #0
}
 800727a:	4618      	mov	r0, r3
 800727c:	3740      	adds	r7, #64	; 0x40
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}
	...

08007284 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007284:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007288:	b0c0      	sub	sp, #256	; 0x100
 800728a:	af00      	add	r7, sp, #0
 800728c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	691b      	ldr	r3, [r3, #16]
 8007298:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800729c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072a0:	68d9      	ldr	r1, [r3, #12]
 80072a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072a6:	681a      	ldr	r2, [r3, #0]
 80072a8:	ea40 0301 	orr.w	r3, r0, r1
 80072ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80072ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072b2:	689a      	ldr	r2, [r3, #8]
 80072b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072b8:	691b      	ldr	r3, [r3, #16]
 80072ba:	431a      	orrs	r2, r3
 80072bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072c0:	695b      	ldr	r3, [r3, #20]
 80072c2:	431a      	orrs	r2, r3
 80072c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072c8:	69db      	ldr	r3, [r3, #28]
 80072ca:	4313      	orrs	r3, r2
 80072cc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80072d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	68db      	ldr	r3, [r3, #12]
 80072d8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80072dc:	f021 010c 	bic.w	r1, r1, #12
 80072e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072e4:	681a      	ldr	r2, [r3, #0]
 80072e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80072ea:	430b      	orrs	r3, r1
 80072ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80072ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	695b      	ldr	r3, [r3, #20]
 80072f6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80072fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072fe:	6999      	ldr	r1, [r3, #24]
 8007300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007304:	681a      	ldr	r2, [r3, #0]
 8007306:	ea40 0301 	orr.w	r3, r0, r1
 800730a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800730c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007310:	681a      	ldr	r2, [r3, #0]
 8007312:	4b8f      	ldr	r3, [pc, #572]	; (8007550 <UART_SetConfig+0x2cc>)
 8007314:	429a      	cmp	r2, r3
 8007316:	d005      	beq.n	8007324 <UART_SetConfig+0xa0>
 8007318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800731c:	681a      	ldr	r2, [r3, #0]
 800731e:	4b8d      	ldr	r3, [pc, #564]	; (8007554 <UART_SetConfig+0x2d0>)
 8007320:	429a      	cmp	r2, r3
 8007322:	d104      	bne.n	800732e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007324:	f7fe ff2e 	bl	8006184 <HAL_RCC_GetPCLK2Freq>
 8007328:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800732c:	e003      	b.n	8007336 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800732e:	f7fe ff15 	bl	800615c <HAL_RCC_GetPCLK1Freq>
 8007332:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007336:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800733a:	69db      	ldr	r3, [r3, #28]
 800733c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007340:	f040 810c 	bne.w	800755c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007344:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007348:	2200      	movs	r2, #0
 800734a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800734e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007352:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007356:	4622      	mov	r2, r4
 8007358:	462b      	mov	r3, r5
 800735a:	1891      	adds	r1, r2, r2
 800735c:	65b9      	str	r1, [r7, #88]	; 0x58
 800735e:	415b      	adcs	r3, r3
 8007360:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007362:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007366:	4621      	mov	r1, r4
 8007368:	eb12 0801 	adds.w	r8, r2, r1
 800736c:	4629      	mov	r1, r5
 800736e:	eb43 0901 	adc.w	r9, r3, r1
 8007372:	f04f 0200 	mov.w	r2, #0
 8007376:	f04f 0300 	mov.w	r3, #0
 800737a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800737e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007382:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007386:	4690      	mov	r8, r2
 8007388:	4699      	mov	r9, r3
 800738a:	4623      	mov	r3, r4
 800738c:	eb18 0303 	adds.w	r3, r8, r3
 8007390:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007394:	462b      	mov	r3, r5
 8007396:	eb49 0303 	adc.w	r3, r9, r3
 800739a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800739e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073a2:	685b      	ldr	r3, [r3, #4]
 80073a4:	2200      	movs	r2, #0
 80073a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80073aa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80073ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80073b2:	460b      	mov	r3, r1
 80073b4:	18db      	adds	r3, r3, r3
 80073b6:	653b      	str	r3, [r7, #80]	; 0x50
 80073b8:	4613      	mov	r3, r2
 80073ba:	eb42 0303 	adc.w	r3, r2, r3
 80073be:	657b      	str	r3, [r7, #84]	; 0x54
 80073c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80073c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80073c8:	f7f9 fc66 	bl	8000c98 <__aeabi_uldivmod>
 80073cc:	4602      	mov	r2, r0
 80073ce:	460b      	mov	r3, r1
 80073d0:	4b61      	ldr	r3, [pc, #388]	; (8007558 <UART_SetConfig+0x2d4>)
 80073d2:	fba3 2302 	umull	r2, r3, r3, r2
 80073d6:	095b      	lsrs	r3, r3, #5
 80073d8:	011c      	lsls	r4, r3, #4
 80073da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80073de:	2200      	movs	r2, #0
 80073e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80073e4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80073e8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80073ec:	4642      	mov	r2, r8
 80073ee:	464b      	mov	r3, r9
 80073f0:	1891      	adds	r1, r2, r2
 80073f2:	64b9      	str	r1, [r7, #72]	; 0x48
 80073f4:	415b      	adcs	r3, r3
 80073f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80073f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80073fc:	4641      	mov	r1, r8
 80073fe:	eb12 0a01 	adds.w	sl, r2, r1
 8007402:	4649      	mov	r1, r9
 8007404:	eb43 0b01 	adc.w	fp, r3, r1
 8007408:	f04f 0200 	mov.w	r2, #0
 800740c:	f04f 0300 	mov.w	r3, #0
 8007410:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007414:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007418:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800741c:	4692      	mov	sl, r2
 800741e:	469b      	mov	fp, r3
 8007420:	4643      	mov	r3, r8
 8007422:	eb1a 0303 	adds.w	r3, sl, r3
 8007426:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800742a:	464b      	mov	r3, r9
 800742c:	eb4b 0303 	adc.w	r3, fp, r3
 8007430:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007438:	685b      	ldr	r3, [r3, #4]
 800743a:	2200      	movs	r2, #0
 800743c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007440:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007444:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007448:	460b      	mov	r3, r1
 800744a:	18db      	adds	r3, r3, r3
 800744c:	643b      	str	r3, [r7, #64]	; 0x40
 800744e:	4613      	mov	r3, r2
 8007450:	eb42 0303 	adc.w	r3, r2, r3
 8007454:	647b      	str	r3, [r7, #68]	; 0x44
 8007456:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800745a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800745e:	f7f9 fc1b 	bl	8000c98 <__aeabi_uldivmod>
 8007462:	4602      	mov	r2, r0
 8007464:	460b      	mov	r3, r1
 8007466:	4611      	mov	r1, r2
 8007468:	4b3b      	ldr	r3, [pc, #236]	; (8007558 <UART_SetConfig+0x2d4>)
 800746a:	fba3 2301 	umull	r2, r3, r3, r1
 800746e:	095b      	lsrs	r3, r3, #5
 8007470:	2264      	movs	r2, #100	; 0x64
 8007472:	fb02 f303 	mul.w	r3, r2, r3
 8007476:	1acb      	subs	r3, r1, r3
 8007478:	00db      	lsls	r3, r3, #3
 800747a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800747e:	4b36      	ldr	r3, [pc, #216]	; (8007558 <UART_SetConfig+0x2d4>)
 8007480:	fba3 2302 	umull	r2, r3, r3, r2
 8007484:	095b      	lsrs	r3, r3, #5
 8007486:	005b      	lsls	r3, r3, #1
 8007488:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800748c:	441c      	add	r4, r3
 800748e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007492:	2200      	movs	r2, #0
 8007494:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007498:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800749c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80074a0:	4642      	mov	r2, r8
 80074a2:	464b      	mov	r3, r9
 80074a4:	1891      	adds	r1, r2, r2
 80074a6:	63b9      	str	r1, [r7, #56]	; 0x38
 80074a8:	415b      	adcs	r3, r3
 80074aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80074ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80074b0:	4641      	mov	r1, r8
 80074b2:	1851      	adds	r1, r2, r1
 80074b4:	6339      	str	r1, [r7, #48]	; 0x30
 80074b6:	4649      	mov	r1, r9
 80074b8:	414b      	adcs	r3, r1
 80074ba:	637b      	str	r3, [r7, #52]	; 0x34
 80074bc:	f04f 0200 	mov.w	r2, #0
 80074c0:	f04f 0300 	mov.w	r3, #0
 80074c4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80074c8:	4659      	mov	r1, fp
 80074ca:	00cb      	lsls	r3, r1, #3
 80074cc:	4651      	mov	r1, sl
 80074ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80074d2:	4651      	mov	r1, sl
 80074d4:	00ca      	lsls	r2, r1, #3
 80074d6:	4610      	mov	r0, r2
 80074d8:	4619      	mov	r1, r3
 80074da:	4603      	mov	r3, r0
 80074dc:	4642      	mov	r2, r8
 80074de:	189b      	adds	r3, r3, r2
 80074e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80074e4:	464b      	mov	r3, r9
 80074e6:	460a      	mov	r2, r1
 80074e8:	eb42 0303 	adc.w	r3, r2, r3
 80074ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80074f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074f4:	685b      	ldr	r3, [r3, #4]
 80074f6:	2200      	movs	r2, #0
 80074f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80074fc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007500:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007504:	460b      	mov	r3, r1
 8007506:	18db      	adds	r3, r3, r3
 8007508:	62bb      	str	r3, [r7, #40]	; 0x28
 800750a:	4613      	mov	r3, r2
 800750c:	eb42 0303 	adc.w	r3, r2, r3
 8007510:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007512:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007516:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800751a:	f7f9 fbbd 	bl	8000c98 <__aeabi_uldivmod>
 800751e:	4602      	mov	r2, r0
 8007520:	460b      	mov	r3, r1
 8007522:	4b0d      	ldr	r3, [pc, #52]	; (8007558 <UART_SetConfig+0x2d4>)
 8007524:	fba3 1302 	umull	r1, r3, r3, r2
 8007528:	095b      	lsrs	r3, r3, #5
 800752a:	2164      	movs	r1, #100	; 0x64
 800752c:	fb01 f303 	mul.w	r3, r1, r3
 8007530:	1ad3      	subs	r3, r2, r3
 8007532:	00db      	lsls	r3, r3, #3
 8007534:	3332      	adds	r3, #50	; 0x32
 8007536:	4a08      	ldr	r2, [pc, #32]	; (8007558 <UART_SetConfig+0x2d4>)
 8007538:	fba2 2303 	umull	r2, r3, r2, r3
 800753c:	095b      	lsrs	r3, r3, #5
 800753e:	f003 0207 	and.w	r2, r3, #7
 8007542:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4422      	add	r2, r4
 800754a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800754c:	e105      	b.n	800775a <UART_SetConfig+0x4d6>
 800754e:	bf00      	nop
 8007550:	40011000 	.word	0x40011000
 8007554:	40011400 	.word	0x40011400
 8007558:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800755c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007560:	2200      	movs	r2, #0
 8007562:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007566:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800756a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800756e:	4642      	mov	r2, r8
 8007570:	464b      	mov	r3, r9
 8007572:	1891      	adds	r1, r2, r2
 8007574:	6239      	str	r1, [r7, #32]
 8007576:	415b      	adcs	r3, r3
 8007578:	627b      	str	r3, [r7, #36]	; 0x24
 800757a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800757e:	4641      	mov	r1, r8
 8007580:	1854      	adds	r4, r2, r1
 8007582:	4649      	mov	r1, r9
 8007584:	eb43 0501 	adc.w	r5, r3, r1
 8007588:	f04f 0200 	mov.w	r2, #0
 800758c:	f04f 0300 	mov.w	r3, #0
 8007590:	00eb      	lsls	r3, r5, #3
 8007592:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007596:	00e2      	lsls	r2, r4, #3
 8007598:	4614      	mov	r4, r2
 800759a:	461d      	mov	r5, r3
 800759c:	4643      	mov	r3, r8
 800759e:	18e3      	adds	r3, r4, r3
 80075a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80075a4:	464b      	mov	r3, r9
 80075a6:	eb45 0303 	adc.w	r3, r5, r3
 80075aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80075ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075b2:	685b      	ldr	r3, [r3, #4]
 80075b4:	2200      	movs	r2, #0
 80075b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80075ba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80075be:	f04f 0200 	mov.w	r2, #0
 80075c2:	f04f 0300 	mov.w	r3, #0
 80075c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80075ca:	4629      	mov	r1, r5
 80075cc:	008b      	lsls	r3, r1, #2
 80075ce:	4621      	mov	r1, r4
 80075d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80075d4:	4621      	mov	r1, r4
 80075d6:	008a      	lsls	r2, r1, #2
 80075d8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80075dc:	f7f9 fb5c 	bl	8000c98 <__aeabi_uldivmod>
 80075e0:	4602      	mov	r2, r0
 80075e2:	460b      	mov	r3, r1
 80075e4:	4b60      	ldr	r3, [pc, #384]	; (8007768 <UART_SetConfig+0x4e4>)
 80075e6:	fba3 2302 	umull	r2, r3, r3, r2
 80075ea:	095b      	lsrs	r3, r3, #5
 80075ec:	011c      	lsls	r4, r3, #4
 80075ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80075f2:	2200      	movs	r2, #0
 80075f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80075f8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80075fc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007600:	4642      	mov	r2, r8
 8007602:	464b      	mov	r3, r9
 8007604:	1891      	adds	r1, r2, r2
 8007606:	61b9      	str	r1, [r7, #24]
 8007608:	415b      	adcs	r3, r3
 800760a:	61fb      	str	r3, [r7, #28]
 800760c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007610:	4641      	mov	r1, r8
 8007612:	1851      	adds	r1, r2, r1
 8007614:	6139      	str	r1, [r7, #16]
 8007616:	4649      	mov	r1, r9
 8007618:	414b      	adcs	r3, r1
 800761a:	617b      	str	r3, [r7, #20]
 800761c:	f04f 0200 	mov.w	r2, #0
 8007620:	f04f 0300 	mov.w	r3, #0
 8007624:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007628:	4659      	mov	r1, fp
 800762a:	00cb      	lsls	r3, r1, #3
 800762c:	4651      	mov	r1, sl
 800762e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007632:	4651      	mov	r1, sl
 8007634:	00ca      	lsls	r2, r1, #3
 8007636:	4610      	mov	r0, r2
 8007638:	4619      	mov	r1, r3
 800763a:	4603      	mov	r3, r0
 800763c:	4642      	mov	r2, r8
 800763e:	189b      	adds	r3, r3, r2
 8007640:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007644:	464b      	mov	r3, r9
 8007646:	460a      	mov	r2, r1
 8007648:	eb42 0303 	adc.w	r3, r2, r3
 800764c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	2200      	movs	r2, #0
 8007658:	67bb      	str	r3, [r7, #120]	; 0x78
 800765a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800765c:	f04f 0200 	mov.w	r2, #0
 8007660:	f04f 0300 	mov.w	r3, #0
 8007664:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007668:	4649      	mov	r1, r9
 800766a:	008b      	lsls	r3, r1, #2
 800766c:	4641      	mov	r1, r8
 800766e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007672:	4641      	mov	r1, r8
 8007674:	008a      	lsls	r2, r1, #2
 8007676:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800767a:	f7f9 fb0d 	bl	8000c98 <__aeabi_uldivmod>
 800767e:	4602      	mov	r2, r0
 8007680:	460b      	mov	r3, r1
 8007682:	4b39      	ldr	r3, [pc, #228]	; (8007768 <UART_SetConfig+0x4e4>)
 8007684:	fba3 1302 	umull	r1, r3, r3, r2
 8007688:	095b      	lsrs	r3, r3, #5
 800768a:	2164      	movs	r1, #100	; 0x64
 800768c:	fb01 f303 	mul.w	r3, r1, r3
 8007690:	1ad3      	subs	r3, r2, r3
 8007692:	011b      	lsls	r3, r3, #4
 8007694:	3332      	adds	r3, #50	; 0x32
 8007696:	4a34      	ldr	r2, [pc, #208]	; (8007768 <UART_SetConfig+0x4e4>)
 8007698:	fba2 2303 	umull	r2, r3, r2, r3
 800769c:	095b      	lsrs	r3, r3, #5
 800769e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80076a2:	441c      	add	r4, r3
 80076a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80076a8:	2200      	movs	r2, #0
 80076aa:	673b      	str	r3, [r7, #112]	; 0x70
 80076ac:	677a      	str	r2, [r7, #116]	; 0x74
 80076ae:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80076b2:	4642      	mov	r2, r8
 80076b4:	464b      	mov	r3, r9
 80076b6:	1891      	adds	r1, r2, r2
 80076b8:	60b9      	str	r1, [r7, #8]
 80076ba:	415b      	adcs	r3, r3
 80076bc:	60fb      	str	r3, [r7, #12]
 80076be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80076c2:	4641      	mov	r1, r8
 80076c4:	1851      	adds	r1, r2, r1
 80076c6:	6039      	str	r1, [r7, #0]
 80076c8:	4649      	mov	r1, r9
 80076ca:	414b      	adcs	r3, r1
 80076cc:	607b      	str	r3, [r7, #4]
 80076ce:	f04f 0200 	mov.w	r2, #0
 80076d2:	f04f 0300 	mov.w	r3, #0
 80076d6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80076da:	4659      	mov	r1, fp
 80076dc:	00cb      	lsls	r3, r1, #3
 80076de:	4651      	mov	r1, sl
 80076e0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80076e4:	4651      	mov	r1, sl
 80076e6:	00ca      	lsls	r2, r1, #3
 80076e8:	4610      	mov	r0, r2
 80076ea:	4619      	mov	r1, r3
 80076ec:	4603      	mov	r3, r0
 80076ee:	4642      	mov	r2, r8
 80076f0:	189b      	adds	r3, r3, r2
 80076f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80076f4:	464b      	mov	r3, r9
 80076f6:	460a      	mov	r2, r1
 80076f8:	eb42 0303 	adc.w	r3, r2, r3
 80076fc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80076fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007702:	685b      	ldr	r3, [r3, #4]
 8007704:	2200      	movs	r2, #0
 8007706:	663b      	str	r3, [r7, #96]	; 0x60
 8007708:	667a      	str	r2, [r7, #100]	; 0x64
 800770a:	f04f 0200 	mov.w	r2, #0
 800770e:	f04f 0300 	mov.w	r3, #0
 8007712:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007716:	4649      	mov	r1, r9
 8007718:	008b      	lsls	r3, r1, #2
 800771a:	4641      	mov	r1, r8
 800771c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007720:	4641      	mov	r1, r8
 8007722:	008a      	lsls	r2, r1, #2
 8007724:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007728:	f7f9 fab6 	bl	8000c98 <__aeabi_uldivmod>
 800772c:	4602      	mov	r2, r0
 800772e:	460b      	mov	r3, r1
 8007730:	4b0d      	ldr	r3, [pc, #52]	; (8007768 <UART_SetConfig+0x4e4>)
 8007732:	fba3 1302 	umull	r1, r3, r3, r2
 8007736:	095b      	lsrs	r3, r3, #5
 8007738:	2164      	movs	r1, #100	; 0x64
 800773a:	fb01 f303 	mul.w	r3, r1, r3
 800773e:	1ad3      	subs	r3, r2, r3
 8007740:	011b      	lsls	r3, r3, #4
 8007742:	3332      	adds	r3, #50	; 0x32
 8007744:	4a08      	ldr	r2, [pc, #32]	; (8007768 <UART_SetConfig+0x4e4>)
 8007746:	fba2 2303 	umull	r2, r3, r2, r3
 800774a:	095b      	lsrs	r3, r3, #5
 800774c:	f003 020f 	and.w	r2, r3, #15
 8007750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	4422      	add	r2, r4
 8007758:	609a      	str	r2, [r3, #8]
}
 800775a:	bf00      	nop
 800775c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007760:	46bd      	mov	sp, r7
 8007762:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007766:	bf00      	nop
 8007768:	51eb851f 	.word	0x51eb851f

0800776c <__assert_func>:
 800776c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800776e:	4614      	mov	r4, r2
 8007770:	461a      	mov	r2, r3
 8007772:	4b09      	ldr	r3, [pc, #36]	; (8007798 <__assert_func+0x2c>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	4605      	mov	r5, r0
 8007778:	68d8      	ldr	r0, [r3, #12]
 800777a:	b14c      	cbz	r4, 8007790 <__assert_func+0x24>
 800777c:	4b07      	ldr	r3, [pc, #28]	; (800779c <__assert_func+0x30>)
 800777e:	9100      	str	r1, [sp, #0]
 8007780:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007784:	4906      	ldr	r1, [pc, #24]	; (80077a0 <__assert_func+0x34>)
 8007786:	462b      	mov	r3, r5
 8007788:	f000 f814 	bl	80077b4 <fiprintf>
 800778c:	f000 feec 	bl	8008568 <abort>
 8007790:	4b04      	ldr	r3, [pc, #16]	; (80077a4 <__assert_func+0x38>)
 8007792:	461c      	mov	r4, r3
 8007794:	e7f3      	b.n	800777e <__assert_func+0x12>
 8007796:	bf00      	nop
 8007798:	200017cc 	.word	0x200017cc
 800779c:	0800a590 	.word	0x0800a590
 80077a0:	0800a59d 	.word	0x0800a59d
 80077a4:	0800a5cb 	.word	0x0800a5cb

080077a8 <__errno>:
 80077a8:	4b01      	ldr	r3, [pc, #4]	; (80077b0 <__errno+0x8>)
 80077aa:	6818      	ldr	r0, [r3, #0]
 80077ac:	4770      	bx	lr
 80077ae:	bf00      	nop
 80077b0:	200017cc 	.word	0x200017cc

080077b4 <fiprintf>:
 80077b4:	b40e      	push	{r1, r2, r3}
 80077b6:	b503      	push	{r0, r1, lr}
 80077b8:	4601      	mov	r1, r0
 80077ba:	ab03      	add	r3, sp, #12
 80077bc:	4805      	ldr	r0, [pc, #20]	; (80077d4 <fiprintf+0x20>)
 80077be:	f853 2b04 	ldr.w	r2, [r3], #4
 80077c2:	6800      	ldr	r0, [r0, #0]
 80077c4:	9301      	str	r3, [sp, #4]
 80077c6:	f000 f85d 	bl	8007884 <_vfiprintf_r>
 80077ca:	b002      	add	sp, #8
 80077cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80077d0:	b003      	add	sp, #12
 80077d2:	4770      	bx	lr
 80077d4:	200017cc 	.word	0x200017cc

080077d8 <__libc_init_array>:
 80077d8:	b570      	push	{r4, r5, r6, lr}
 80077da:	4d0d      	ldr	r5, [pc, #52]	; (8007810 <__libc_init_array+0x38>)
 80077dc:	4c0d      	ldr	r4, [pc, #52]	; (8007814 <__libc_init_array+0x3c>)
 80077de:	1b64      	subs	r4, r4, r5
 80077e0:	10a4      	asrs	r4, r4, #2
 80077e2:	2600      	movs	r6, #0
 80077e4:	42a6      	cmp	r6, r4
 80077e6:	d109      	bne.n	80077fc <__libc_init_array+0x24>
 80077e8:	4d0b      	ldr	r5, [pc, #44]	; (8007818 <__libc_init_array+0x40>)
 80077ea:	4c0c      	ldr	r4, [pc, #48]	; (800781c <__libc_init_array+0x44>)
 80077ec:	f002 fda4 	bl	800a338 <_init>
 80077f0:	1b64      	subs	r4, r4, r5
 80077f2:	10a4      	asrs	r4, r4, #2
 80077f4:	2600      	movs	r6, #0
 80077f6:	42a6      	cmp	r6, r4
 80077f8:	d105      	bne.n	8007806 <__libc_init_array+0x2e>
 80077fa:	bd70      	pop	{r4, r5, r6, pc}
 80077fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007800:	4798      	blx	r3
 8007802:	3601      	adds	r6, #1
 8007804:	e7ee      	b.n	80077e4 <__libc_init_array+0xc>
 8007806:	f855 3b04 	ldr.w	r3, [r5], #4
 800780a:	4798      	blx	r3
 800780c:	3601      	adds	r6, #1
 800780e:	e7f2      	b.n	80077f6 <__libc_init_array+0x1e>
 8007810:	0800a978 	.word	0x0800a978
 8007814:	0800a978 	.word	0x0800a978
 8007818:	0800a978 	.word	0x0800a978
 800781c:	0800a97c 	.word	0x0800a97c

08007820 <memset>:
 8007820:	4402      	add	r2, r0
 8007822:	4603      	mov	r3, r0
 8007824:	4293      	cmp	r3, r2
 8007826:	d100      	bne.n	800782a <memset+0xa>
 8007828:	4770      	bx	lr
 800782a:	f803 1b01 	strb.w	r1, [r3], #1
 800782e:	e7f9      	b.n	8007824 <memset+0x4>

08007830 <__sfputc_r>:
 8007830:	6893      	ldr	r3, [r2, #8]
 8007832:	3b01      	subs	r3, #1
 8007834:	2b00      	cmp	r3, #0
 8007836:	b410      	push	{r4}
 8007838:	6093      	str	r3, [r2, #8]
 800783a:	da08      	bge.n	800784e <__sfputc_r+0x1e>
 800783c:	6994      	ldr	r4, [r2, #24]
 800783e:	42a3      	cmp	r3, r4
 8007840:	db01      	blt.n	8007846 <__sfputc_r+0x16>
 8007842:	290a      	cmp	r1, #10
 8007844:	d103      	bne.n	800784e <__sfputc_r+0x1e>
 8007846:	f85d 4b04 	ldr.w	r4, [sp], #4
 800784a:	f000 bdcd 	b.w	80083e8 <__swbuf_r>
 800784e:	6813      	ldr	r3, [r2, #0]
 8007850:	1c58      	adds	r0, r3, #1
 8007852:	6010      	str	r0, [r2, #0]
 8007854:	7019      	strb	r1, [r3, #0]
 8007856:	4608      	mov	r0, r1
 8007858:	f85d 4b04 	ldr.w	r4, [sp], #4
 800785c:	4770      	bx	lr

0800785e <__sfputs_r>:
 800785e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007860:	4606      	mov	r6, r0
 8007862:	460f      	mov	r7, r1
 8007864:	4614      	mov	r4, r2
 8007866:	18d5      	adds	r5, r2, r3
 8007868:	42ac      	cmp	r4, r5
 800786a:	d101      	bne.n	8007870 <__sfputs_r+0x12>
 800786c:	2000      	movs	r0, #0
 800786e:	e007      	b.n	8007880 <__sfputs_r+0x22>
 8007870:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007874:	463a      	mov	r2, r7
 8007876:	4630      	mov	r0, r6
 8007878:	f7ff ffda 	bl	8007830 <__sfputc_r>
 800787c:	1c43      	adds	r3, r0, #1
 800787e:	d1f3      	bne.n	8007868 <__sfputs_r+0xa>
 8007880:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007884 <_vfiprintf_r>:
 8007884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007888:	460d      	mov	r5, r1
 800788a:	b09d      	sub	sp, #116	; 0x74
 800788c:	4614      	mov	r4, r2
 800788e:	4698      	mov	r8, r3
 8007890:	4606      	mov	r6, r0
 8007892:	b118      	cbz	r0, 800789c <_vfiprintf_r+0x18>
 8007894:	6983      	ldr	r3, [r0, #24]
 8007896:	b90b      	cbnz	r3, 800789c <_vfiprintf_r+0x18>
 8007898:	f001 fe02 	bl	80094a0 <__sinit>
 800789c:	4b89      	ldr	r3, [pc, #548]	; (8007ac4 <_vfiprintf_r+0x240>)
 800789e:	429d      	cmp	r5, r3
 80078a0:	d11b      	bne.n	80078da <_vfiprintf_r+0x56>
 80078a2:	6875      	ldr	r5, [r6, #4]
 80078a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80078a6:	07d9      	lsls	r1, r3, #31
 80078a8:	d405      	bmi.n	80078b6 <_vfiprintf_r+0x32>
 80078aa:	89ab      	ldrh	r3, [r5, #12]
 80078ac:	059a      	lsls	r2, r3, #22
 80078ae:	d402      	bmi.n	80078b6 <_vfiprintf_r+0x32>
 80078b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80078b2:	f001 fe98 	bl	80095e6 <__retarget_lock_acquire_recursive>
 80078b6:	89ab      	ldrh	r3, [r5, #12]
 80078b8:	071b      	lsls	r3, r3, #28
 80078ba:	d501      	bpl.n	80078c0 <_vfiprintf_r+0x3c>
 80078bc:	692b      	ldr	r3, [r5, #16]
 80078be:	b9eb      	cbnz	r3, 80078fc <_vfiprintf_r+0x78>
 80078c0:	4629      	mov	r1, r5
 80078c2:	4630      	mov	r0, r6
 80078c4:	f000 fde2 	bl	800848c <__swsetup_r>
 80078c8:	b1c0      	cbz	r0, 80078fc <_vfiprintf_r+0x78>
 80078ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80078cc:	07dc      	lsls	r4, r3, #31
 80078ce:	d50e      	bpl.n	80078ee <_vfiprintf_r+0x6a>
 80078d0:	f04f 30ff 	mov.w	r0, #4294967295
 80078d4:	b01d      	add	sp, #116	; 0x74
 80078d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078da:	4b7b      	ldr	r3, [pc, #492]	; (8007ac8 <_vfiprintf_r+0x244>)
 80078dc:	429d      	cmp	r5, r3
 80078de:	d101      	bne.n	80078e4 <_vfiprintf_r+0x60>
 80078e0:	68b5      	ldr	r5, [r6, #8]
 80078e2:	e7df      	b.n	80078a4 <_vfiprintf_r+0x20>
 80078e4:	4b79      	ldr	r3, [pc, #484]	; (8007acc <_vfiprintf_r+0x248>)
 80078e6:	429d      	cmp	r5, r3
 80078e8:	bf08      	it	eq
 80078ea:	68f5      	ldreq	r5, [r6, #12]
 80078ec:	e7da      	b.n	80078a4 <_vfiprintf_r+0x20>
 80078ee:	89ab      	ldrh	r3, [r5, #12]
 80078f0:	0598      	lsls	r0, r3, #22
 80078f2:	d4ed      	bmi.n	80078d0 <_vfiprintf_r+0x4c>
 80078f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80078f6:	f001 fe77 	bl	80095e8 <__retarget_lock_release_recursive>
 80078fa:	e7e9      	b.n	80078d0 <_vfiprintf_r+0x4c>
 80078fc:	2300      	movs	r3, #0
 80078fe:	9309      	str	r3, [sp, #36]	; 0x24
 8007900:	2320      	movs	r3, #32
 8007902:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007906:	f8cd 800c 	str.w	r8, [sp, #12]
 800790a:	2330      	movs	r3, #48	; 0x30
 800790c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007ad0 <_vfiprintf_r+0x24c>
 8007910:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007914:	f04f 0901 	mov.w	r9, #1
 8007918:	4623      	mov	r3, r4
 800791a:	469a      	mov	sl, r3
 800791c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007920:	b10a      	cbz	r2, 8007926 <_vfiprintf_r+0xa2>
 8007922:	2a25      	cmp	r2, #37	; 0x25
 8007924:	d1f9      	bne.n	800791a <_vfiprintf_r+0x96>
 8007926:	ebba 0b04 	subs.w	fp, sl, r4
 800792a:	d00b      	beq.n	8007944 <_vfiprintf_r+0xc0>
 800792c:	465b      	mov	r3, fp
 800792e:	4622      	mov	r2, r4
 8007930:	4629      	mov	r1, r5
 8007932:	4630      	mov	r0, r6
 8007934:	f7ff ff93 	bl	800785e <__sfputs_r>
 8007938:	3001      	adds	r0, #1
 800793a:	f000 80aa 	beq.w	8007a92 <_vfiprintf_r+0x20e>
 800793e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007940:	445a      	add	r2, fp
 8007942:	9209      	str	r2, [sp, #36]	; 0x24
 8007944:	f89a 3000 	ldrb.w	r3, [sl]
 8007948:	2b00      	cmp	r3, #0
 800794a:	f000 80a2 	beq.w	8007a92 <_vfiprintf_r+0x20e>
 800794e:	2300      	movs	r3, #0
 8007950:	f04f 32ff 	mov.w	r2, #4294967295
 8007954:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007958:	f10a 0a01 	add.w	sl, sl, #1
 800795c:	9304      	str	r3, [sp, #16]
 800795e:	9307      	str	r3, [sp, #28]
 8007960:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007964:	931a      	str	r3, [sp, #104]	; 0x68
 8007966:	4654      	mov	r4, sl
 8007968:	2205      	movs	r2, #5
 800796a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800796e:	4858      	ldr	r0, [pc, #352]	; (8007ad0 <_vfiprintf_r+0x24c>)
 8007970:	f7f8 fc3e 	bl	80001f0 <memchr>
 8007974:	9a04      	ldr	r2, [sp, #16]
 8007976:	b9d8      	cbnz	r0, 80079b0 <_vfiprintf_r+0x12c>
 8007978:	06d1      	lsls	r1, r2, #27
 800797a:	bf44      	itt	mi
 800797c:	2320      	movmi	r3, #32
 800797e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007982:	0713      	lsls	r3, r2, #28
 8007984:	bf44      	itt	mi
 8007986:	232b      	movmi	r3, #43	; 0x2b
 8007988:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800798c:	f89a 3000 	ldrb.w	r3, [sl]
 8007990:	2b2a      	cmp	r3, #42	; 0x2a
 8007992:	d015      	beq.n	80079c0 <_vfiprintf_r+0x13c>
 8007994:	9a07      	ldr	r2, [sp, #28]
 8007996:	4654      	mov	r4, sl
 8007998:	2000      	movs	r0, #0
 800799a:	f04f 0c0a 	mov.w	ip, #10
 800799e:	4621      	mov	r1, r4
 80079a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80079a4:	3b30      	subs	r3, #48	; 0x30
 80079a6:	2b09      	cmp	r3, #9
 80079a8:	d94e      	bls.n	8007a48 <_vfiprintf_r+0x1c4>
 80079aa:	b1b0      	cbz	r0, 80079da <_vfiprintf_r+0x156>
 80079ac:	9207      	str	r2, [sp, #28]
 80079ae:	e014      	b.n	80079da <_vfiprintf_r+0x156>
 80079b0:	eba0 0308 	sub.w	r3, r0, r8
 80079b4:	fa09 f303 	lsl.w	r3, r9, r3
 80079b8:	4313      	orrs	r3, r2
 80079ba:	9304      	str	r3, [sp, #16]
 80079bc:	46a2      	mov	sl, r4
 80079be:	e7d2      	b.n	8007966 <_vfiprintf_r+0xe2>
 80079c0:	9b03      	ldr	r3, [sp, #12]
 80079c2:	1d19      	adds	r1, r3, #4
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	9103      	str	r1, [sp, #12]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	bfbb      	ittet	lt
 80079cc:	425b      	neglt	r3, r3
 80079ce:	f042 0202 	orrlt.w	r2, r2, #2
 80079d2:	9307      	strge	r3, [sp, #28]
 80079d4:	9307      	strlt	r3, [sp, #28]
 80079d6:	bfb8      	it	lt
 80079d8:	9204      	strlt	r2, [sp, #16]
 80079da:	7823      	ldrb	r3, [r4, #0]
 80079dc:	2b2e      	cmp	r3, #46	; 0x2e
 80079de:	d10c      	bne.n	80079fa <_vfiprintf_r+0x176>
 80079e0:	7863      	ldrb	r3, [r4, #1]
 80079e2:	2b2a      	cmp	r3, #42	; 0x2a
 80079e4:	d135      	bne.n	8007a52 <_vfiprintf_r+0x1ce>
 80079e6:	9b03      	ldr	r3, [sp, #12]
 80079e8:	1d1a      	adds	r2, r3, #4
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	9203      	str	r2, [sp, #12]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	bfb8      	it	lt
 80079f2:	f04f 33ff 	movlt.w	r3, #4294967295
 80079f6:	3402      	adds	r4, #2
 80079f8:	9305      	str	r3, [sp, #20]
 80079fa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007ae0 <_vfiprintf_r+0x25c>
 80079fe:	7821      	ldrb	r1, [r4, #0]
 8007a00:	2203      	movs	r2, #3
 8007a02:	4650      	mov	r0, sl
 8007a04:	f7f8 fbf4 	bl	80001f0 <memchr>
 8007a08:	b140      	cbz	r0, 8007a1c <_vfiprintf_r+0x198>
 8007a0a:	2340      	movs	r3, #64	; 0x40
 8007a0c:	eba0 000a 	sub.w	r0, r0, sl
 8007a10:	fa03 f000 	lsl.w	r0, r3, r0
 8007a14:	9b04      	ldr	r3, [sp, #16]
 8007a16:	4303      	orrs	r3, r0
 8007a18:	3401      	adds	r4, #1
 8007a1a:	9304      	str	r3, [sp, #16]
 8007a1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a20:	482c      	ldr	r0, [pc, #176]	; (8007ad4 <_vfiprintf_r+0x250>)
 8007a22:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007a26:	2206      	movs	r2, #6
 8007a28:	f7f8 fbe2 	bl	80001f0 <memchr>
 8007a2c:	2800      	cmp	r0, #0
 8007a2e:	d03f      	beq.n	8007ab0 <_vfiprintf_r+0x22c>
 8007a30:	4b29      	ldr	r3, [pc, #164]	; (8007ad8 <_vfiprintf_r+0x254>)
 8007a32:	bb1b      	cbnz	r3, 8007a7c <_vfiprintf_r+0x1f8>
 8007a34:	9b03      	ldr	r3, [sp, #12]
 8007a36:	3307      	adds	r3, #7
 8007a38:	f023 0307 	bic.w	r3, r3, #7
 8007a3c:	3308      	adds	r3, #8
 8007a3e:	9303      	str	r3, [sp, #12]
 8007a40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a42:	443b      	add	r3, r7
 8007a44:	9309      	str	r3, [sp, #36]	; 0x24
 8007a46:	e767      	b.n	8007918 <_vfiprintf_r+0x94>
 8007a48:	fb0c 3202 	mla	r2, ip, r2, r3
 8007a4c:	460c      	mov	r4, r1
 8007a4e:	2001      	movs	r0, #1
 8007a50:	e7a5      	b.n	800799e <_vfiprintf_r+0x11a>
 8007a52:	2300      	movs	r3, #0
 8007a54:	3401      	adds	r4, #1
 8007a56:	9305      	str	r3, [sp, #20]
 8007a58:	4619      	mov	r1, r3
 8007a5a:	f04f 0c0a 	mov.w	ip, #10
 8007a5e:	4620      	mov	r0, r4
 8007a60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a64:	3a30      	subs	r2, #48	; 0x30
 8007a66:	2a09      	cmp	r2, #9
 8007a68:	d903      	bls.n	8007a72 <_vfiprintf_r+0x1ee>
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d0c5      	beq.n	80079fa <_vfiprintf_r+0x176>
 8007a6e:	9105      	str	r1, [sp, #20]
 8007a70:	e7c3      	b.n	80079fa <_vfiprintf_r+0x176>
 8007a72:	fb0c 2101 	mla	r1, ip, r1, r2
 8007a76:	4604      	mov	r4, r0
 8007a78:	2301      	movs	r3, #1
 8007a7a:	e7f0      	b.n	8007a5e <_vfiprintf_r+0x1da>
 8007a7c:	ab03      	add	r3, sp, #12
 8007a7e:	9300      	str	r3, [sp, #0]
 8007a80:	462a      	mov	r2, r5
 8007a82:	4b16      	ldr	r3, [pc, #88]	; (8007adc <_vfiprintf_r+0x258>)
 8007a84:	a904      	add	r1, sp, #16
 8007a86:	4630      	mov	r0, r6
 8007a88:	f000 f8cc 	bl	8007c24 <_printf_float>
 8007a8c:	4607      	mov	r7, r0
 8007a8e:	1c78      	adds	r0, r7, #1
 8007a90:	d1d6      	bne.n	8007a40 <_vfiprintf_r+0x1bc>
 8007a92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a94:	07d9      	lsls	r1, r3, #31
 8007a96:	d405      	bmi.n	8007aa4 <_vfiprintf_r+0x220>
 8007a98:	89ab      	ldrh	r3, [r5, #12]
 8007a9a:	059a      	lsls	r2, r3, #22
 8007a9c:	d402      	bmi.n	8007aa4 <_vfiprintf_r+0x220>
 8007a9e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007aa0:	f001 fda2 	bl	80095e8 <__retarget_lock_release_recursive>
 8007aa4:	89ab      	ldrh	r3, [r5, #12]
 8007aa6:	065b      	lsls	r3, r3, #25
 8007aa8:	f53f af12 	bmi.w	80078d0 <_vfiprintf_r+0x4c>
 8007aac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007aae:	e711      	b.n	80078d4 <_vfiprintf_r+0x50>
 8007ab0:	ab03      	add	r3, sp, #12
 8007ab2:	9300      	str	r3, [sp, #0]
 8007ab4:	462a      	mov	r2, r5
 8007ab6:	4b09      	ldr	r3, [pc, #36]	; (8007adc <_vfiprintf_r+0x258>)
 8007ab8:	a904      	add	r1, sp, #16
 8007aba:	4630      	mov	r0, r6
 8007abc:	f000 fb56 	bl	800816c <_printf_i>
 8007ac0:	e7e4      	b.n	8007a8c <_vfiprintf_r+0x208>
 8007ac2:	bf00      	nop
 8007ac4:	0800a6c8 	.word	0x0800a6c8
 8007ac8:	0800a6e8 	.word	0x0800a6e8
 8007acc:	0800a6a8 	.word	0x0800a6a8
 8007ad0:	0800a5d0 	.word	0x0800a5d0
 8007ad4:	0800a5da 	.word	0x0800a5da
 8007ad8:	08007c25 	.word	0x08007c25
 8007adc:	0800785f 	.word	0x0800785f
 8007ae0:	0800a5d6 	.word	0x0800a5d6

08007ae4 <__cvt>:
 8007ae4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ae8:	ec55 4b10 	vmov	r4, r5, d0
 8007aec:	2d00      	cmp	r5, #0
 8007aee:	460e      	mov	r6, r1
 8007af0:	4619      	mov	r1, r3
 8007af2:	462b      	mov	r3, r5
 8007af4:	bfbb      	ittet	lt
 8007af6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007afa:	461d      	movlt	r5, r3
 8007afc:	2300      	movge	r3, #0
 8007afe:	232d      	movlt	r3, #45	; 0x2d
 8007b00:	700b      	strb	r3, [r1, #0]
 8007b02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b04:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007b08:	4691      	mov	r9, r2
 8007b0a:	f023 0820 	bic.w	r8, r3, #32
 8007b0e:	bfbc      	itt	lt
 8007b10:	4622      	movlt	r2, r4
 8007b12:	4614      	movlt	r4, r2
 8007b14:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007b18:	d005      	beq.n	8007b26 <__cvt+0x42>
 8007b1a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007b1e:	d100      	bne.n	8007b22 <__cvt+0x3e>
 8007b20:	3601      	adds	r6, #1
 8007b22:	2102      	movs	r1, #2
 8007b24:	e000      	b.n	8007b28 <__cvt+0x44>
 8007b26:	2103      	movs	r1, #3
 8007b28:	ab03      	add	r3, sp, #12
 8007b2a:	9301      	str	r3, [sp, #4]
 8007b2c:	ab02      	add	r3, sp, #8
 8007b2e:	9300      	str	r3, [sp, #0]
 8007b30:	ec45 4b10 	vmov	d0, r4, r5
 8007b34:	4653      	mov	r3, sl
 8007b36:	4632      	mov	r2, r6
 8007b38:	f000 fdaa 	bl	8008690 <_dtoa_r>
 8007b3c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007b40:	4607      	mov	r7, r0
 8007b42:	d102      	bne.n	8007b4a <__cvt+0x66>
 8007b44:	f019 0f01 	tst.w	r9, #1
 8007b48:	d022      	beq.n	8007b90 <__cvt+0xac>
 8007b4a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007b4e:	eb07 0906 	add.w	r9, r7, r6
 8007b52:	d110      	bne.n	8007b76 <__cvt+0x92>
 8007b54:	783b      	ldrb	r3, [r7, #0]
 8007b56:	2b30      	cmp	r3, #48	; 0x30
 8007b58:	d10a      	bne.n	8007b70 <__cvt+0x8c>
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	4620      	mov	r0, r4
 8007b60:	4629      	mov	r1, r5
 8007b62:	f7f8 ffb9 	bl	8000ad8 <__aeabi_dcmpeq>
 8007b66:	b918      	cbnz	r0, 8007b70 <__cvt+0x8c>
 8007b68:	f1c6 0601 	rsb	r6, r6, #1
 8007b6c:	f8ca 6000 	str.w	r6, [sl]
 8007b70:	f8da 3000 	ldr.w	r3, [sl]
 8007b74:	4499      	add	r9, r3
 8007b76:	2200      	movs	r2, #0
 8007b78:	2300      	movs	r3, #0
 8007b7a:	4620      	mov	r0, r4
 8007b7c:	4629      	mov	r1, r5
 8007b7e:	f7f8 ffab 	bl	8000ad8 <__aeabi_dcmpeq>
 8007b82:	b108      	cbz	r0, 8007b88 <__cvt+0xa4>
 8007b84:	f8cd 900c 	str.w	r9, [sp, #12]
 8007b88:	2230      	movs	r2, #48	; 0x30
 8007b8a:	9b03      	ldr	r3, [sp, #12]
 8007b8c:	454b      	cmp	r3, r9
 8007b8e:	d307      	bcc.n	8007ba0 <__cvt+0xbc>
 8007b90:	9b03      	ldr	r3, [sp, #12]
 8007b92:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007b94:	1bdb      	subs	r3, r3, r7
 8007b96:	4638      	mov	r0, r7
 8007b98:	6013      	str	r3, [r2, #0]
 8007b9a:	b004      	add	sp, #16
 8007b9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ba0:	1c59      	adds	r1, r3, #1
 8007ba2:	9103      	str	r1, [sp, #12]
 8007ba4:	701a      	strb	r2, [r3, #0]
 8007ba6:	e7f0      	b.n	8007b8a <__cvt+0xa6>

08007ba8 <__exponent>:
 8007ba8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007baa:	4603      	mov	r3, r0
 8007bac:	2900      	cmp	r1, #0
 8007bae:	bfb8      	it	lt
 8007bb0:	4249      	neglt	r1, r1
 8007bb2:	f803 2b02 	strb.w	r2, [r3], #2
 8007bb6:	bfb4      	ite	lt
 8007bb8:	222d      	movlt	r2, #45	; 0x2d
 8007bba:	222b      	movge	r2, #43	; 0x2b
 8007bbc:	2909      	cmp	r1, #9
 8007bbe:	7042      	strb	r2, [r0, #1]
 8007bc0:	dd2a      	ble.n	8007c18 <__exponent+0x70>
 8007bc2:	f10d 0407 	add.w	r4, sp, #7
 8007bc6:	46a4      	mov	ip, r4
 8007bc8:	270a      	movs	r7, #10
 8007bca:	46a6      	mov	lr, r4
 8007bcc:	460a      	mov	r2, r1
 8007bce:	fb91 f6f7 	sdiv	r6, r1, r7
 8007bd2:	fb07 1516 	mls	r5, r7, r6, r1
 8007bd6:	3530      	adds	r5, #48	; 0x30
 8007bd8:	2a63      	cmp	r2, #99	; 0x63
 8007bda:	f104 34ff 	add.w	r4, r4, #4294967295
 8007bde:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007be2:	4631      	mov	r1, r6
 8007be4:	dcf1      	bgt.n	8007bca <__exponent+0x22>
 8007be6:	3130      	adds	r1, #48	; 0x30
 8007be8:	f1ae 0502 	sub.w	r5, lr, #2
 8007bec:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007bf0:	1c44      	adds	r4, r0, #1
 8007bf2:	4629      	mov	r1, r5
 8007bf4:	4561      	cmp	r1, ip
 8007bf6:	d30a      	bcc.n	8007c0e <__exponent+0x66>
 8007bf8:	f10d 0209 	add.w	r2, sp, #9
 8007bfc:	eba2 020e 	sub.w	r2, r2, lr
 8007c00:	4565      	cmp	r5, ip
 8007c02:	bf88      	it	hi
 8007c04:	2200      	movhi	r2, #0
 8007c06:	4413      	add	r3, r2
 8007c08:	1a18      	subs	r0, r3, r0
 8007c0a:	b003      	add	sp, #12
 8007c0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007c12:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007c16:	e7ed      	b.n	8007bf4 <__exponent+0x4c>
 8007c18:	2330      	movs	r3, #48	; 0x30
 8007c1a:	3130      	adds	r1, #48	; 0x30
 8007c1c:	7083      	strb	r3, [r0, #2]
 8007c1e:	70c1      	strb	r1, [r0, #3]
 8007c20:	1d03      	adds	r3, r0, #4
 8007c22:	e7f1      	b.n	8007c08 <__exponent+0x60>

08007c24 <_printf_float>:
 8007c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c28:	ed2d 8b02 	vpush	{d8}
 8007c2c:	b08d      	sub	sp, #52	; 0x34
 8007c2e:	460c      	mov	r4, r1
 8007c30:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007c34:	4616      	mov	r6, r2
 8007c36:	461f      	mov	r7, r3
 8007c38:	4605      	mov	r5, r0
 8007c3a:	f001 fccf 	bl	80095dc <_localeconv_r>
 8007c3e:	f8d0 a000 	ldr.w	sl, [r0]
 8007c42:	4650      	mov	r0, sl
 8007c44:	f7f8 facc 	bl	80001e0 <strlen>
 8007c48:	2300      	movs	r3, #0
 8007c4a:	930a      	str	r3, [sp, #40]	; 0x28
 8007c4c:	6823      	ldr	r3, [r4, #0]
 8007c4e:	9305      	str	r3, [sp, #20]
 8007c50:	f8d8 3000 	ldr.w	r3, [r8]
 8007c54:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007c58:	3307      	adds	r3, #7
 8007c5a:	f023 0307 	bic.w	r3, r3, #7
 8007c5e:	f103 0208 	add.w	r2, r3, #8
 8007c62:	f8c8 2000 	str.w	r2, [r8]
 8007c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c6a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007c6e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007c72:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007c76:	9307      	str	r3, [sp, #28]
 8007c78:	f8cd 8018 	str.w	r8, [sp, #24]
 8007c7c:	ee08 0a10 	vmov	s16, r0
 8007c80:	4b9f      	ldr	r3, [pc, #636]	; (8007f00 <_printf_float+0x2dc>)
 8007c82:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007c86:	f04f 32ff 	mov.w	r2, #4294967295
 8007c8a:	f7f8 ff57 	bl	8000b3c <__aeabi_dcmpun>
 8007c8e:	bb88      	cbnz	r0, 8007cf4 <_printf_float+0xd0>
 8007c90:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007c94:	4b9a      	ldr	r3, [pc, #616]	; (8007f00 <_printf_float+0x2dc>)
 8007c96:	f04f 32ff 	mov.w	r2, #4294967295
 8007c9a:	f7f8 ff31 	bl	8000b00 <__aeabi_dcmple>
 8007c9e:	bb48      	cbnz	r0, 8007cf4 <_printf_float+0xd0>
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	4640      	mov	r0, r8
 8007ca6:	4649      	mov	r1, r9
 8007ca8:	f7f8 ff20 	bl	8000aec <__aeabi_dcmplt>
 8007cac:	b110      	cbz	r0, 8007cb4 <_printf_float+0x90>
 8007cae:	232d      	movs	r3, #45	; 0x2d
 8007cb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007cb4:	4b93      	ldr	r3, [pc, #588]	; (8007f04 <_printf_float+0x2e0>)
 8007cb6:	4894      	ldr	r0, [pc, #592]	; (8007f08 <_printf_float+0x2e4>)
 8007cb8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007cbc:	bf94      	ite	ls
 8007cbe:	4698      	movls	r8, r3
 8007cc0:	4680      	movhi	r8, r0
 8007cc2:	2303      	movs	r3, #3
 8007cc4:	6123      	str	r3, [r4, #16]
 8007cc6:	9b05      	ldr	r3, [sp, #20]
 8007cc8:	f023 0204 	bic.w	r2, r3, #4
 8007ccc:	6022      	str	r2, [r4, #0]
 8007cce:	f04f 0900 	mov.w	r9, #0
 8007cd2:	9700      	str	r7, [sp, #0]
 8007cd4:	4633      	mov	r3, r6
 8007cd6:	aa0b      	add	r2, sp, #44	; 0x2c
 8007cd8:	4621      	mov	r1, r4
 8007cda:	4628      	mov	r0, r5
 8007cdc:	f000 f9d8 	bl	8008090 <_printf_common>
 8007ce0:	3001      	adds	r0, #1
 8007ce2:	f040 8090 	bne.w	8007e06 <_printf_float+0x1e2>
 8007ce6:	f04f 30ff 	mov.w	r0, #4294967295
 8007cea:	b00d      	add	sp, #52	; 0x34
 8007cec:	ecbd 8b02 	vpop	{d8}
 8007cf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cf4:	4642      	mov	r2, r8
 8007cf6:	464b      	mov	r3, r9
 8007cf8:	4640      	mov	r0, r8
 8007cfa:	4649      	mov	r1, r9
 8007cfc:	f7f8 ff1e 	bl	8000b3c <__aeabi_dcmpun>
 8007d00:	b140      	cbz	r0, 8007d14 <_printf_float+0xf0>
 8007d02:	464b      	mov	r3, r9
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	bfbc      	itt	lt
 8007d08:	232d      	movlt	r3, #45	; 0x2d
 8007d0a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007d0e:	487f      	ldr	r0, [pc, #508]	; (8007f0c <_printf_float+0x2e8>)
 8007d10:	4b7f      	ldr	r3, [pc, #508]	; (8007f10 <_printf_float+0x2ec>)
 8007d12:	e7d1      	b.n	8007cb8 <_printf_float+0x94>
 8007d14:	6863      	ldr	r3, [r4, #4]
 8007d16:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007d1a:	9206      	str	r2, [sp, #24]
 8007d1c:	1c5a      	adds	r2, r3, #1
 8007d1e:	d13f      	bne.n	8007da0 <_printf_float+0x17c>
 8007d20:	2306      	movs	r3, #6
 8007d22:	6063      	str	r3, [r4, #4]
 8007d24:	9b05      	ldr	r3, [sp, #20]
 8007d26:	6861      	ldr	r1, [r4, #4]
 8007d28:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	9303      	str	r3, [sp, #12]
 8007d30:	ab0a      	add	r3, sp, #40	; 0x28
 8007d32:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007d36:	ab09      	add	r3, sp, #36	; 0x24
 8007d38:	ec49 8b10 	vmov	d0, r8, r9
 8007d3c:	9300      	str	r3, [sp, #0]
 8007d3e:	6022      	str	r2, [r4, #0]
 8007d40:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007d44:	4628      	mov	r0, r5
 8007d46:	f7ff fecd 	bl	8007ae4 <__cvt>
 8007d4a:	9b06      	ldr	r3, [sp, #24]
 8007d4c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007d4e:	2b47      	cmp	r3, #71	; 0x47
 8007d50:	4680      	mov	r8, r0
 8007d52:	d108      	bne.n	8007d66 <_printf_float+0x142>
 8007d54:	1cc8      	adds	r0, r1, #3
 8007d56:	db02      	blt.n	8007d5e <_printf_float+0x13a>
 8007d58:	6863      	ldr	r3, [r4, #4]
 8007d5a:	4299      	cmp	r1, r3
 8007d5c:	dd41      	ble.n	8007de2 <_printf_float+0x1be>
 8007d5e:	f1ab 0b02 	sub.w	fp, fp, #2
 8007d62:	fa5f fb8b 	uxtb.w	fp, fp
 8007d66:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007d6a:	d820      	bhi.n	8007dae <_printf_float+0x18a>
 8007d6c:	3901      	subs	r1, #1
 8007d6e:	465a      	mov	r2, fp
 8007d70:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007d74:	9109      	str	r1, [sp, #36]	; 0x24
 8007d76:	f7ff ff17 	bl	8007ba8 <__exponent>
 8007d7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007d7c:	1813      	adds	r3, r2, r0
 8007d7e:	2a01      	cmp	r2, #1
 8007d80:	4681      	mov	r9, r0
 8007d82:	6123      	str	r3, [r4, #16]
 8007d84:	dc02      	bgt.n	8007d8c <_printf_float+0x168>
 8007d86:	6822      	ldr	r2, [r4, #0]
 8007d88:	07d2      	lsls	r2, r2, #31
 8007d8a:	d501      	bpl.n	8007d90 <_printf_float+0x16c>
 8007d8c:	3301      	adds	r3, #1
 8007d8e:	6123      	str	r3, [r4, #16]
 8007d90:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d09c      	beq.n	8007cd2 <_printf_float+0xae>
 8007d98:	232d      	movs	r3, #45	; 0x2d
 8007d9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d9e:	e798      	b.n	8007cd2 <_printf_float+0xae>
 8007da0:	9a06      	ldr	r2, [sp, #24]
 8007da2:	2a47      	cmp	r2, #71	; 0x47
 8007da4:	d1be      	bne.n	8007d24 <_printf_float+0x100>
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d1bc      	bne.n	8007d24 <_printf_float+0x100>
 8007daa:	2301      	movs	r3, #1
 8007dac:	e7b9      	b.n	8007d22 <_printf_float+0xfe>
 8007dae:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007db2:	d118      	bne.n	8007de6 <_printf_float+0x1c2>
 8007db4:	2900      	cmp	r1, #0
 8007db6:	6863      	ldr	r3, [r4, #4]
 8007db8:	dd0b      	ble.n	8007dd2 <_printf_float+0x1ae>
 8007dba:	6121      	str	r1, [r4, #16]
 8007dbc:	b913      	cbnz	r3, 8007dc4 <_printf_float+0x1a0>
 8007dbe:	6822      	ldr	r2, [r4, #0]
 8007dc0:	07d0      	lsls	r0, r2, #31
 8007dc2:	d502      	bpl.n	8007dca <_printf_float+0x1a6>
 8007dc4:	3301      	adds	r3, #1
 8007dc6:	440b      	add	r3, r1
 8007dc8:	6123      	str	r3, [r4, #16]
 8007dca:	65a1      	str	r1, [r4, #88]	; 0x58
 8007dcc:	f04f 0900 	mov.w	r9, #0
 8007dd0:	e7de      	b.n	8007d90 <_printf_float+0x16c>
 8007dd2:	b913      	cbnz	r3, 8007dda <_printf_float+0x1b6>
 8007dd4:	6822      	ldr	r2, [r4, #0]
 8007dd6:	07d2      	lsls	r2, r2, #31
 8007dd8:	d501      	bpl.n	8007dde <_printf_float+0x1ba>
 8007dda:	3302      	adds	r3, #2
 8007ddc:	e7f4      	b.n	8007dc8 <_printf_float+0x1a4>
 8007dde:	2301      	movs	r3, #1
 8007de0:	e7f2      	b.n	8007dc8 <_printf_float+0x1a4>
 8007de2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007de6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007de8:	4299      	cmp	r1, r3
 8007dea:	db05      	blt.n	8007df8 <_printf_float+0x1d4>
 8007dec:	6823      	ldr	r3, [r4, #0]
 8007dee:	6121      	str	r1, [r4, #16]
 8007df0:	07d8      	lsls	r0, r3, #31
 8007df2:	d5ea      	bpl.n	8007dca <_printf_float+0x1a6>
 8007df4:	1c4b      	adds	r3, r1, #1
 8007df6:	e7e7      	b.n	8007dc8 <_printf_float+0x1a4>
 8007df8:	2900      	cmp	r1, #0
 8007dfa:	bfd4      	ite	le
 8007dfc:	f1c1 0202 	rsble	r2, r1, #2
 8007e00:	2201      	movgt	r2, #1
 8007e02:	4413      	add	r3, r2
 8007e04:	e7e0      	b.n	8007dc8 <_printf_float+0x1a4>
 8007e06:	6823      	ldr	r3, [r4, #0]
 8007e08:	055a      	lsls	r2, r3, #21
 8007e0a:	d407      	bmi.n	8007e1c <_printf_float+0x1f8>
 8007e0c:	6923      	ldr	r3, [r4, #16]
 8007e0e:	4642      	mov	r2, r8
 8007e10:	4631      	mov	r1, r6
 8007e12:	4628      	mov	r0, r5
 8007e14:	47b8      	blx	r7
 8007e16:	3001      	adds	r0, #1
 8007e18:	d12c      	bne.n	8007e74 <_printf_float+0x250>
 8007e1a:	e764      	b.n	8007ce6 <_printf_float+0xc2>
 8007e1c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007e20:	f240 80e0 	bls.w	8007fe4 <_printf_float+0x3c0>
 8007e24:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007e28:	2200      	movs	r2, #0
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	f7f8 fe54 	bl	8000ad8 <__aeabi_dcmpeq>
 8007e30:	2800      	cmp	r0, #0
 8007e32:	d034      	beq.n	8007e9e <_printf_float+0x27a>
 8007e34:	4a37      	ldr	r2, [pc, #220]	; (8007f14 <_printf_float+0x2f0>)
 8007e36:	2301      	movs	r3, #1
 8007e38:	4631      	mov	r1, r6
 8007e3a:	4628      	mov	r0, r5
 8007e3c:	47b8      	blx	r7
 8007e3e:	3001      	adds	r0, #1
 8007e40:	f43f af51 	beq.w	8007ce6 <_printf_float+0xc2>
 8007e44:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007e48:	429a      	cmp	r2, r3
 8007e4a:	db02      	blt.n	8007e52 <_printf_float+0x22e>
 8007e4c:	6823      	ldr	r3, [r4, #0]
 8007e4e:	07d8      	lsls	r0, r3, #31
 8007e50:	d510      	bpl.n	8007e74 <_printf_float+0x250>
 8007e52:	ee18 3a10 	vmov	r3, s16
 8007e56:	4652      	mov	r2, sl
 8007e58:	4631      	mov	r1, r6
 8007e5a:	4628      	mov	r0, r5
 8007e5c:	47b8      	blx	r7
 8007e5e:	3001      	adds	r0, #1
 8007e60:	f43f af41 	beq.w	8007ce6 <_printf_float+0xc2>
 8007e64:	f04f 0800 	mov.w	r8, #0
 8007e68:	f104 091a 	add.w	r9, r4, #26
 8007e6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e6e:	3b01      	subs	r3, #1
 8007e70:	4543      	cmp	r3, r8
 8007e72:	dc09      	bgt.n	8007e88 <_printf_float+0x264>
 8007e74:	6823      	ldr	r3, [r4, #0]
 8007e76:	079b      	lsls	r3, r3, #30
 8007e78:	f100 8105 	bmi.w	8008086 <_printf_float+0x462>
 8007e7c:	68e0      	ldr	r0, [r4, #12]
 8007e7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e80:	4298      	cmp	r0, r3
 8007e82:	bfb8      	it	lt
 8007e84:	4618      	movlt	r0, r3
 8007e86:	e730      	b.n	8007cea <_printf_float+0xc6>
 8007e88:	2301      	movs	r3, #1
 8007e8a:	464a      	mov	r2, r9
 8007e8c:	4631      	mov	r1, r6
 8007e8e:	4628      	mov	r0, r5
 8007e90:	47b8      	blx	r7
 8007e92:	3001      	adds	r0, #1
 8007e94:	f43f af27 	beq.w	8007ce6 <_printf_float+0xc2>
 8007e98:	f108 0801 	add.w	r8, r8, #1
 8007e9c:	e7e6      	b.n	8007e6c <_printf_float+0x248>
 8007e9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	dc39      	bgt.n	8007f18 <_printf_float+0x2f4>
 8007ea4:	4a1b      	ldr	r2, [pc, #108]	; (8007f14 <_printf_float+0x2f0>)
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	4631      	mov	r1, r6
 8007eaa:	4628      	mov	r0, r5
 8007eac:	47b8      	blx	r7
 8007eae:	3001      	adds	r0, #1
 8007eb0:	f43f af19 	beq.w	8007ce6 <_printf_float+0xc2>
 8007eb4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007eb8:	4313      	orrs	r3, r2
 8007eba:	d102      	bne.n	8007ec2 <_printf_float+0x29e>
 8007ebc:	6823      	ldr	r3, [r4, #0]
 8007ebe:	07d9      	lsls	r1, r3, #31
 8007ec0:	d5d8      	bpl.n	8007e74 <_printf_float+0x250>
 8007ec2:	ee18 3a10 	vmov	r3, s16
 8007ec6:	4652      	mov	r2, sl
 8007ec8:	4631      	mov	r1, r6
 8007eca:	4628      	mov	r0, r5
 8007ecc:	47b8      	blx	r7
 8007ece:	3001      	adds	r0, #1
 8007ed0:	f43f af09 	beq.w	8007ce6 <_printf_float+0xc2>
 8007ed4:	f04f 0900 	mov.w	r9, #0
 8007ed8:	f104 0a1a 	add.w	sl, r4, #26
 8007edc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ede:	425b      	negs	r3, r3
 8007ee0:	454b      	cmp	r3, r9
 8007ee2:	dc01      	bgt.n	8007ee8 <_printf_float+0x2c4>
 8007ee4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ee6:	e792      	b.n	8007e0e <_printf_float+0x1ea>
 8007ee8:	2301      	movs	r3, #1
 8007eea:	4652      	mov	r2, sl
 8007eec:	4631      	mov	r1, r6
 8007eee:	4628      	mov	r0, r5
 8007ef0:	47b8      	blx	r7
 8007ef2:	3001      	adds	r0, #1
 8007ef4:	f43f aef7 	beq.w	8007ce6 <_printf_float+0xc2>
 8007ef8:	f109 0901 	add.w	r9, r9, #1
 8007efc:	e7ee      	b.n	8007edc <_printf_float+0x2b8>
 8007efe:	bf00      	nop
 8007f00:	7fefffff 	.word	0x7fefffff
 8007f04:	0800a5e1 	.word	0x0800a5e1
 8007f08:	0800a5e5 	.word	0x0800a5e5
 8007f0c:	0800a5ed 	.word	0x0800a5ed
 8007f10:	0800a5e9 	.word	0x0800a5e9
 8007f14:	0800a5f1 	.word	0x0800a5f1
 8007f18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f1a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007f1c:	429a      	cmp	r2, r3
 8007f1e:	bfa8      	it	ge
 8007f20:	461a      	movge	r2, r3
 8007f22:	2a00      	cmp	r2, #0
 8007f24:	4691      	mov	r9, r2
 8007f26:	dc37      	bgt.n	8007f98 <_printf_float+0x374>
 8007f28:	f04f 0b00 	mov.w	fp, #0
 8007f2c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007f30:	f104 021a 	add.w	r2, r4, #26
 8007f34:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007f36:	9305      	str	r3, [sp, #20]
 8007f38:	eba3 0309 	sub.w	r3, r3, r9
 8007f3c:	455b      	cmp	r3, fp
 8007f3e:	dc33      	bgt.n	8007fa8 <_printf_float+0x384>
 8007f40:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007f44:	429a      	cmp	r2, r3
 8007f46:	db3b      	blt.n	8007fc0 <_printf_float+0x39c>
 8007f48:	6823      	ldr	r3, [r4, #0]
 8007f4a:	07da      	lsls	r2, r3, #31
 8007f4c:	d438      	bmi.n	8007fc0 <_printf_float+0x39c>
 8007f4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f50:	9a05      	ldr	r2, [sp, #20]
 8007f52:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007f54:	1a9a      	subs	r2, r3, r2
 8007f56:	eba3 0901 	sub.w	r9, r3, r1
 8007f5a:	4591      	cmp	r9, r2
 8007f5c:	bfa8      	it	ge
 8007f5e:	4691      	movge	r9, r2
 8007f60:	f1b9 0f00 	cmp.w	r9, #0
 8007f64:	dc35      	bgt.n	8007fd2 <_printf_float+0x3ae>
 8007f66:	f04f 0800 	mov.w	r8, #0
 8007f6a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007f6e:	f104 0a1a 	add.w	sl, r4, #26
 8007f72:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007f76:	1a9b      	subs	r3, r3, r2
 8007f78:	eba3 0309 	sub.w	r3, r3, r9
 8007f7c:	4543      	cmp	r3, r8
 8007f7e:	f77f af79 	ble.w	8007e74 <_printf_float+0x250>
 8007f82:	2301      	movs	r3, #1
 8007f84:	4652      	mov	r2, sl
 8007f86:	4631      	mov	r1, r6
 8007f88:	4628      	mov	r0, r5
 8007f8a:	47b8      	blx	r7
 8007f8c:	3001      	adds	r0, #1
 8007f8e:	f43f aeaa 	beq.w	8007ce6 <_printf_float+0xc2>
 8007f92:	f108 0801 	add.w	r8, r8, #1
 8007f96:	e7ec      	b.n	8007f72 <_printf_float+0x34e>
 8007f98:	4613      	mov	r3, r2
 8007f9a:	4631      	mov	r1, r6
 8007f9c:	4642      	mov	r2, r8
 8007f9e:	4628      	mov	r0, r5
 8007fa0:	47b8      	blx	r7
 8007fa2:	3001      	adds	r0, #1
 8007fa4:	d1c0      	bne.n	8007f28 <_printf_float+0x304>
 8007fa6:	e69e      	b.n	8007ce6 <_printf_float+0xc2>
 8007fa8:	2301      	movs	r3, #1
 8007faa:	4631      	mov	r1, r6
 8007fac:	4628      	mov	r0, r5
 8007fae:	9205      	str	r2, [sp, #20]
 8007fb0:	47b8      	blx	r7
 8007fb2:	3001      	adds	r0, #1
 8007fb4:	f43f ae97 	beq.w	8007ce6 <_printf_float+0xc2>
 8007fb8:	9a05      	ldr	r2, [sp, #20]
 8007fba:	f10b 0b01 	add.w	fp, fp, #1
 8007fbe:	e7b9      	b.n	8007f34 <_printf_float+0x310>
 8007fc0:	ee18 3a10 	vmov	r3, s16
 8007fc4:	4652      	mov	r2, sl
 8007fc6:	4631      	mov	r1, r6
 8007fc8:	4628      	mov	r0, r5
 8007fca:	47b8      	blx	r7
 8007fcc:	3001      	adds	r0, #1
 8007fce:	d1be      	bne.n	8007f4e <_printf_float+0x32a>
 8007fd0:	e689      	b.n	8007ce6 <_printf_float+0xc2>
 8007fd2:	9a05      	ldr	r2, [sp, #20]
 8007fd4:	464b      	mov	r3, r9
 8007fd6:	4442      	add	r2, r8
 8007fd8:	4631      	mov	r1, r6
 8007fda:	4628      	mov	r0, r5
 8007fdc:	47b8      	blx	r7
 8007fde:	3001      	adds	r0, #1
 8007fe0:	d1c1      	bne.n	8007f66 <_printf_float+0x342>
 8007fe2:	e680      	b.n	8007ce6 <_printf_float+0xc2>
 8007fe4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007fe6:	2a01      	cmp	r2, #1
 8007fe8:	dc01      	bgt.n	8007fee <_printf_float+0x3ca>
 8007fea:	07db      	lsls	r3, r3, #31
 8007fec:	d538      	bpl.n	8008060 <_printf_float+0x43c>
 8007fee:	2301      	movs	r3, #1
 8007ff0:	4642      	mov	r2, r8
 8007ff2:	4631      	mov	r1, r6
 8007ff4:	4628      	mov	r0, r5
 8007ff6:	47b8      	blx	r7
 8007ff8:	3001      	adds	r0, #1
 8007ffa:	f43f ae74 	beq.w	8007ce6 <_printf_float+0xc2>
 8007ffe:	ee18 3a10 	vmov	r3, s16
 8008002:	4652      	mov	r2, sl
 8008004:	4631      	mov	r1, r6
 8008006:	4628      	mov	r0, r5
 8008008:	47b8      	blx	r7
 800800a:	3001      	adds	r0, #1
 800800c:	f43f ae6b 	beq.w	8007ce6 <_printf_float+0xc2>
 8008010:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008014:	2200      	movs	r2, #0
 8008016:	2300      	movs	r3, #0
 8008018:	f7f8 fd5e 	bl	8000ad8 <__aeabi_dcmpeq>
 800801c:	b9d8      	cbnz	r0, 8008056 <_printf_float+0x432>
 800801e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008020:	f108 0201 	add.w	r2, r8, #1
 8008024:	3b01      	subs	r3, #1
 8008026:	4631      	mov	r1, r6
 8008028:	4628      	mov	r0, r5
 800802a:	47b8      	blx	r7
 800802c:	3001      	adds	r0, #1
 800802e:	d10e      	bne.n	800804e <_printf_float+0x42a>
 8008030:	e659      	b.n	8007ce6 <_printf_float+0xc2>
 8008032:	2301      	movs	r3, #1
 8008034:	4652      	mov	r2, sl
 8008036:	4631      	mov	r1, r6
 8008038:	4628      	mov	r0, r5
 800803a:	47b8      	blx	r7
 800803c:	3001      	adds	r0, #1
 800803e:	f43f ae52 	beq.w	8007ce6 <_printf_float+0xc2>
 8008042:	f108 0801 	add.w	r8, r8, #1
 8008046:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008048:	3b01      	subs	r3, #1
 800804a:	4543      	cmp	r3, r8
 800804c:	dcf1      	bgt.n	8008032 <_printf_float+0x40e>
 800804e:	464b      	mov	r3, r9
 8008050:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008054:	e6dc      	b.n	8007e10 <_printf_float+0x1ec>
 8008056:	f04f 0800 	mov.w	r8, #0
 800805a:	f104 0a1a 	add.w	sl, r4, #26
 800805e:	e7f2      	b.n	8008046 <_printf_float+0x422>
 8008060:	2301      	movs	r3, #1
 8008062:	4642      	mov	r2, r8
 8008064:	e7df      	b.n	8008026 <_printf_float+0x402>
 8008066:	2301      	movs	r3, #1
 8008068:	464a      	mov	r2, r9
 800806a:	4631      	mov	r1, r6
 800806c:	4628      	mov	r0, r5
 800806e:	47b8      	blx	r7
 8008070:	3001      	adds	r0, #1
 8008072:	f43f ae38 	beq.w	8007ce6 <_printf_float+0xc2>
 8008076:	f108 0801 	add.w	r8, r8, #1
 800807a:	68e3      	ldr	r3, [r4, #12]
 800807c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800807e:	1a5b      	subs	r3, r3, r1
 8008080:	4543      	cmp	r3, r8
 8008082:	dcf0      	bgt.n	8008066 <_printf_float+0x442>
 8008084:	e6fa      	b.n	8007e7c <_printf_float+0x258>
 8008086:	f04f 0800 	mov.w	r8, #0
 800808a:	f104 0919 	add.w	r9, r4, #25
 800808e:	e7f4      	b.n	800807a <_printf_float+0x456>

08008090 <_printf_common>:
 8008090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008094:	4616      	mov	r6, r2
 8008096:	4699      	mov	r9, r3
 8008098:	688a      	ldr	r2, [r1, #8]
 800809a:	690b      	ldr	r3, [r1, #16]
 800809c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80080a0:	4293      	cmp	r3, r2
 80080a2:	bfb8      	it	lt
 80080a4:	4613      	movlt	r3, r2
 80080a6:	6033      	str	r3, [r6, #0]
 80080a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80080ac:	4607      	mov	r7, r0
 80080ae:	460c      	mov	r4, r1
 80080b0:	b10a      	cbz	r2, 80080b6 <_printf_common+0x26>
 80080b2:	3301      	adds	r3, #1
 80080b4:	6033      	str	r3, [r6, #0]
 80080b6:	6823      	ldr	r3, [r4, #0]
 80080b8:	0699      	lsls	r1, r3, #26
 80080ba:	bf42      	ittt	mi
 80080bc:	6833      	ldrmi	r3, [r6, #0]
 80080be:	3302      	addmi	r3, #2
 80080c0:	6033      	strmi	r3, [r6, #0]
 80080c2:	6825      	ldr	r5, [r4, #0]
 80080c4:	f015 0506 	ands.w	r5, r5, #6
 80080c8:	d106      	bne.n	80080d8 <_printf_common+0x48>
 80080ca:	f104 0a19 	add.w	sl, r4, #25
 80080ce:	68e3      	ldr	r3, [r4, #12]
 80080d0:	6832      	ldr	r2, [r6, #0]
 80080d2:	1a9b      	subs	r3, r3, r2
 80080d4:	42ab      	cmp	r3, r5
 80080d6:	dc26      	bgt.n	8008126 <_printf_common+0x96>
 80080d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80080dc:	1e13      	subs	r3, r2, #0
 80080de:	6822      	ldr	r2, [r4, #0]
 80080e0:	bf18      	it	ne
 80080e2:	2301      	movne	r3, #1
 80080e4:	0692      	lsls	r2, r2, #26
 80080e6:	d42b      	bmi.n	8008140 <_printf_common+0xb0>
 80080e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80080ec:	4649      	mov	r1, r9
 80080ee:	4638      	mov	r0, r7
 80080f0:	47c0      	blx	r8
 80080f2:	3001      	adds	r0, #1
 80080f4:	d01e      	beq.n	8008134 <_printf_common+0xa4>
 80080f6:	6823      	ldr	r3, [r4, #0]
 80080f8:	68e5      	ldr	r5, [r4, #12]
 80080fa:	6832      	ldr	r2, [r6, #0]
 80080fc:	f003 0306 	and.w	r3, r3, #6
 8008100:	2b04      	cmp	r3, #4
 8008102:	bf08      	it	eq
 8008104:	1aad      	subeq	r5, r5, r2
 8008106:	68a3      	ldr	r3, [r4, #8]
 8008108:	6922      	ldr	r2, [r4, #16]
 800810a:	bf0c      	ite	eq
 800810c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008110:	2500      	movne	r5, #0
 8008112:	4293      	cmp	r3, r2
 8008114:	bfc4      	itt	gt
 8008116:	1a9b      	subgt	r3, r3, r2
 8008118:	18ed      	addgt	r5, r5, r3
 800811a:	2600      	movs	r6, #0
 800811c:	341a      	adds	r4, #26
 800811e:	42b5      	cmp	r5, r6
 8008120:	d11a      	bne.n	8008158 <_printf_common+0xc8>
 8008122:	2000      	movs	r0, #0
 8008124:	e008      	b.n	8008138 <_printf_common+0xa8>
 8008126:	2301      	movs	r3, #1
 8008128:	4652      	mov	r2, sl
 800812a:	4649      	mov	r1, r9
 800812c:	4638      	mov	r0, r7
 800812e:	47c0      	blx	r8
 8008130:	3001      	adds	r0, #1
 8008132:	d103      	bne.n	800813c <_printf_common+0xac>
 8008134:	f04f 30ff 	mov.w	r0, #4294967295
 8008138:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800813c:	3501      	adds	r5, #1
 800813e:	e7c6      	b.n	80080ce <_printf_common+0x3e>
 8008140:	18e1      	adds	r1, r4, r3
 8008142:	1c5a      	adds	r2, r3, #1
 8008144:	2030      	movs	r0, #48	; 0x30
 8008146:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800814a:	4422      	add	r2, r4
 800814c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008150:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008154:	3302      	adds	r3, #2
 8008156:	e7c7      	b.n	80080e8 <_printf_common+0x58>
 8008158:	2301      	movs	r3, #1
 800815a:	4622      	mov	r2, r4
 800815c:	4649      	mov	r1, r9
 800815e:	4638      	mov	r0, r7
 8008160:	47c0      	blx	r8
 8008162:	3001      	adds	r0, #1
 8008164:	d0e6      	beq.n	8008134 <_printf_common+0xa4>
 8008166:	3601      	adds	r6, #1
 8008168:	e7d9      	b.n	800811e <_printf_common+0x8e>
	...

0800816c <_printf_i>:
 800816c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008170:	7e0f      	ldrb	r7, [r1, #24]
 8008172:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008174:	2f78      	cmp	r7, #120	; 0x78
 8008176:	4691      	mov	r9, r2
 8008178:	4680      	mov	r8, r0
 800817a:	460c      	mov	r4, r1
 800817c:	469a      	mov	sl, r3
 800817e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008182:	d807      	bhi.n	8008194 <_printf_i+0x28>
 8008184:	2f62      	cmp	r7, #98	; 0x62
 8008186:	d80a      	bhi.n	800819e <_printf_i+0x32>
 8008188:	2f00      	cmp	r7, #0
 800818a:	f000 80d8 	beq.w	800833e <_printf_i+0x1d2>
 800818e:	2f58      	cmp	r7, #88	; 0x58
 8008190:	f000 80a3 	beq.w	80082da <_printf_i+0x16e>
 8008194:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008198:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800819c:	e03a      	b.n	8008214 <_printf_i+0xa8>
 800819e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80081a2:	2b15      	cmp	r3, #21
 80081a4:	d8f6      	bhi.n	8008194 <_printf_i+0x28>
 80081a6:	a101      	add	r1, pc, #4	; (adr r1, 80081ac <_printf_i+0x40>)
 80081a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80081ac:	08008205 	.word	0x08008205
 80081b0:	08008219 	.word	0x08008219
 80081b4:	08008195 	.word	0x08008195
 80081b8:	08008195 	.word	0x08008195
 80081bc:	08008195 	.word	0x08008195
 80081c0:	08008195 	.word	0x08008195
 80081c4:	08008219 	.word	0x08008219
 80081c8:	08008195 	.word	0x08008195
 80081cc:	08008195 	.word	0x08008195
 80081d0:	08008195 	.word	0x08008195
 80081d4:	08008195 	.word	0x08008195
 80081d8:	08008325 	.word	0x08008325
 80081dc:	08008249 	.word	0x08008249
 80081e0:	08008307 	.word	0x08008307
 80081e4:	08008195 	.word	0x08008195
 80081e8:	08008195 	.word	0x08008195
 80081ec:	08008347 	.word	0x08008347
 80081f0:	08008195 	.word	0x08008195
 80081f4:	08008249 	.word	0x08008249
 80081f8:	08008195 	.word	0x08008195
 80081fc:	08008195 	.word	0x08008195
 8008200:	0800830f 	.word	0x0800830f
 8008204:	682b      	ldr	r3, [r5, #0]
 8008206:	1d1a      	adds	r2, r3, #4
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	602a      	str	r2, [r5, #0]
 800820c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008210:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008214:	2301      	movs	r3, #1
 8008216:	e0a3      	b.n	8008360 <_printf_i+0x1f4>
 8008218:	6820      	ldr	r0, [r4, #0]
 800821a:	6829      	ldr	r1, [r5, #0]
 800821c:	0606      	lsls	r6, r0, #24
 800821e:	f101 0304 	add.w	r3, r1, #4
 8008222:	d50a      	bpl.n	800823a <_printf_i+0xce>
 8008224:	680e      	ldr	r6, [r1, #0]
 8008226:	602b      	str	r3, [r5, #0]
 8008228:	2e00      	cmp	r6, #0
 800822a:	da03      	bge.n	8008234 <_printf_i+0xc8>
 800822c:	232d      	movs	r3, #45	; 0x2d
 800822e:	4276      	negs	r6, r6
 8008230:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008234:	485e      	ldr	r0, [pc, #376]	; (80083b0 <_printf_i+0x244>)
 8008236:	230a      	movs	r3, #10
 8008238:	e019      	b.n	800826e <_printf_i+0x102>
 800823a:	680e      	ldr	r6, [r1, #0]
 800823c:	602b      	str	r3, [r5, #0]
 800823e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008242:	bf18      	it	ne
 8008244:	b236      	sxthne	r6, r6
 8008246:	e7ef      	b.n	8008228 <_printf_i+0xbc>
 8008248:	682b      	ldr	r3, [r5, #0]
 800824a:	6820      	ldr	r0, [r4, #0]
 800824c:	1d19      	adds	r1, r3, #4
 800824e:	6029      	str	r1, [r5, #0]
 8008250:	0601      	lsls	r1, r0, #24
 8008252:	d501      	bpl.n	8008258 <_printf_i+0xec>
 8008254:	681e      	ldr	r6, [r3, #0]
 8008256:	e002      	b.n	800825e <_printf_i+0xf2>
 8008258:	0646      	lsls	r6, r0, #25
 800825a:	d5fb      	bpl.n	8008254 <_printf_i+0xe8>
 800825c:	881e      	ldrh	r6, [r3, #0]
 800825e:	4854      	ldr	r0, [pc, #336]	; (80083b0 <_printf_i+0x244>)
 8008260:	2f6f      	cmp	r7, #111	; 0x6f
 8008262:	bf0c      	ite	eq
 8008264:	2308      	moveq	r3, #8
 8008266:	230a      	movne	r3, #10
 8008268:	2100      	movs	r1, #0
 800826a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800826e:	6865      	ldr	r5, [r4, #4]
 8008270:	60a5      	str	r5, [r4, #8]
 8008272:	2d00      	cmp	r5, #0
 8008274:	bfa2      	ittt	ge
 8008276:	6821      	ldrge	r1, [r4, #0]
 8008278:	f021 0104 	bicge.w	r1, r1, #4
 800827c:	6021      	strge	r1, [r4, #0]
 800827e:	b90e      	cbnz	r6, 8008284 <_printf_i+0x118>
 8008280:	2d00      	cmp	r5, #0
 8008282:	d04d      	beq.n	8008320 <_printf_i+0x1b4>
 8008284:	4615      	mov	r5, r2
 8008286:	fbb6 f1f3 	udiv	r1, r6, r3
 800828a:	fb03 6711 	mls	r7, r3, r1, r6
 800828e:	5dc7      	ldrb	r7, [r0, r7]
 8008290:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008294:	4637      	mov	r7, r6
 8008296:	42bb      	cmp	r3, r7
 8008298:	460e      	mov	r6, r1
 800829a:	d9f4      	bls.n	8008286 <_printf_i+0x11a>
 800829c:	2b08      	cmp	r3, #8
 800829e:	d10b      	bne.n	80082b8 <_printf_i+0x14c>
 80082a0:	6823      	ldr	r3, [r4, #0]
 80082a2:	07de      	lsls	r6, r3, #31
 80082a4:	d508      	bpl.n	80082b8 <_printf_i+0x14c>
 80082a6:	6923      	ldr	r3, [r4, #16]
 80082a8:	6861      	ldr	r1, [r4, #4]
 80082aa:	4299      	cmp	r1, r3
 80082ac:	bfde      	ittt	le
 80082ae:	2330      	movle	r3, #48	; 0x30
 80082b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80082b4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80082b8:	1b52      	subs	r2, r2, r5
 80082ba:	6122      	str	r2, [r4, #16]
 80082bc:	f8cd a000 	str.w	sl, [sp]
 80082c0:	464b      	mov	r3, r9
 80082c2:	aa03      	add	r2, sp, #12
 80082c4:	4621      	mov	r1, r4
 80082c6:	4640      	mov	r0, r8
 80082c8:	f7ff fee2 	bl	8008090 <_printf_common>
 80082cc:	3001      	adds	r0, #1
 80082ce:	d14c      	bne.n	800836a <_printf_i+0x1fe>
 80082d0:	f04f 30ff 	mov.w	r0, #4294967295
 80082d4:	b004      	add	sp, #16
 80082d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082da:	4835      	ldr	r0, [pc, #212]	; (80083b0 <_printf_i+0x244>)
 80082dc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80082e0:	6829      	ldr	r1, [r5, #0]
 80082e2:	6823      	ldr	r3, [r4, #0]
 80082e4:	f851 6b04 	ldr.w	r6, [r1], #4
 80082e8:	6029      	str	r1, [r5, #0]
 80082ea:	061d      	lsls	r5, r3, #24
 80082ec:	d514      	bpl.n	8008318 <_printf_i+0x1ac>
 80082ee:	07df      	lsls	r7, r3, #31
 80082f0:	bf44      	itt	mi
 80082f2:	f043 0320 	orrmi.w	r3, r3, #32
 80082f6:	6023      	strmi	r3, [r4, #0]
 80082f8:	b91e      	cbnz	r6, 8008302 <_printf_i+0x196>
 80082fa:	6823      	ldr	r3, [r4, #0]
 80082fc:	f023 0320 	bic.w	r3, r3, #32
 8008300:	6023      	str	r3, [r4, #0]
 8008302:	2310      	movs	r3, #16
 8008304:	e7b0      	b.n	8008268 <_printf_i+0xfc>
 8008306:	6823      	ldr	r3, [r4, #0]
 8008308:	f043 0320 	orr.w	r3, r3, #32
 800830c:	6023      	str	r3, [r4, #0]
 800830e:	2378      	movs	r3, #120	; 0x78
 8008310:	4828      	ldr	r0, [pc, #160]	; (80083b4 <_printf_i+0x248>)
 8008312:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008316:	e7e3      	b.n	80082e0 <_printf_i+0x174>
 8008318:	0659      	lsls	r1, r3, #25
 800831a:	bf48      	it	mi
 800831c:	b2b6      	uxthmi	r6, r6
 800831e:	e7e6      	b.n	80082ee <_printf_i+0x182>
 8008320:	4615      	mov	r5, r2
 8008322:	e7bb      	b.n	800829c <_printf_i+0x130>
 8008324:	682b      	ldr	r3, [r5, #0]
 8008326:	6826      	ldr	r6, [r4, #0]
 8008328:	6961      	ldr	r1, [r4, #20]
 800832a:	1d18      	adds	r0, r3, #4
 800832c:	6028      	str	r0, [r5, #0]
 800832e:	0635      	lsls	r5, r6, #24
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	d501      	bpl.n	8008338 <_printf_i+0x1cc>
 8008334:	6019      	str	r1, [r3, #0]
 8008336:	e002      	b.n	800833e <_printf_i+0x1d2>
 8008338:	0670      	lsls	r0, r6, #25
 800833a:	d5fb      	bpl.n	8008334 <_printf_i+0x1c8>
 800833c:	8019      	strh	r1, [r3, #0]
 800833e:	2300      	movs	r3, #0
 8008340:	6123      	str	r3, [r4, #16]
 8008342:	4615      	mov	r5, r2
 8008344:	e7ba      	b.n	80082bc <_printf_i+0x150>
 8008346:	682b      	ldr	r3, [r5, #0]
 8008348:	1d1a      	adds	r2, r3, #4
 800834a:	602a      	str	r2, [r5, #0]
 800834c:	681d      	ldr	r5, [r3, #0]
 800834e:	6862      	ldr	r2, [r4, #4]
 8008350:	2100      	movs	r1, #0
 8008352:	4628      	mov	r0, r5
 8008354:	f7f7 ff4c 	bl	80001f0 <memchr>
 8008358:	b108      	cbz	r0, 800835e <_printf_i+0x1f2>
 800835a:	1b40      	subs	r0, r0, r5
 800835c:	6060      	str	r0, [r4, #4]
 800835e:	6863      	ldr	r3, [r4, #4]
 8008360:	6123      	str	r3, [r4, #16]
 8008362:	2300      	movs	r3, #0
 8008364:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008368:	e7a8      	b.n	80082bc <_printf_i+0x150>
 800836a:	6923      	ldr	r3, [r4, #16]
 800836c:	462a      	mov	r2, r5
 800836e:	4649      	mov	r1, r9
 8008370:	4640      	mov	r0, r8
 8008372:	47d0      	blx	sl
 8008374:	3001      	adds	r0, #1
 8008376:	d0ab      	beq.n	80082d0 <_printf_i+0x164>
 8008378:	6823      	ldr	r3, [r4, #0]
 800837a:	079b      	lsls	r3, r3, #30
 800837c:	d413      	bmi.n	80083a6 <_printf_i+0x23a>
 800837e:	68e0      	ldr	r0, [r4, #12]
 8008380:	9b03      	ldr	r3, [sp, #12]
 8008382:	4298      	cmp	r0, r3
 8008384:	bfb8      	it	lt
 8008386:	4618      	movlt	r0, r3
 8008388:	e7a4      	b.n	80082d4 <_printf_i+0x168>
 800838a:	2301      	movs	r3, #1
 800838c:	4632      	mov	r2, r6
 800838e:	4649      	mov	r1, r9
 8008390:	4640      	mov	r0, r8
 8008392:	47d0      	blx	sl
 8008394:	3001      	adds	r0, #1
 8008396:	d09b      	beq.n	80082d0 <_printf_i+0x164>
 8008398:	3501      	adds	r5, #1
 800839a:	68e3      	ldr	r3, [r4, #12]
 800839c:	9903      	ldr	r1, [sp, #12]
 800839e:	1a5b      	subs	r3, r3, r1
 80083a0:	42ab      	cmp	r3, r5
 80083a2:	dcf2      	bgt.n	800838a <_printf_i+0x21e>
 80083a4:	e7eb      	b.n	800837e <_printf_i+0x212>
 80083a6:	2500      	movs	r5, #0
 80083a8:	f104 0619 	add.w	r6, r4, #25
 80083ac:	e7f5      	b.n	800839a <_printf_i+0x22e>
 80083ae:	bf00      	nop
 80083b0:	0800a5f3 	.word	0x0800a5f3
 80083b4:	0800a604 	.word	0x0800a604

080083b8 <iprintf>:
 80083b8:	b40f      	push	{r0, r1, r2, r3}
 80083ba:	4b0a      	ldr	r3, [pc, #40]	; (80083e4 <iprintf+0x2c>)
 80083bc:	b513      	push	{r0, r1, r4, lr}
 80083be:	681c      	ldr	r4, [r3, #0]
 80083c0:	b124      	cbz	r4, 80083cc <iprintf+0x14>
 80083c2:	69a3      	ldr	r3, [r4, #24]
 80083c4:	b913      	cbnz	r3, 80083cc <iprintf+0x14>
 80083c6:	4620      	mov	r0, r4
 80083c8:	f001 f86a 	bl	80094a0 <__sinit>
 80083cc:	ab05      	add	r3, sp, #20
 80083ce:	9a04      	ldr	r2, [sp, #16]
 80083d0:	68a1      	ldr	r1, [r4, #8]
 80083d2:	9301      	str	r3, [sp, #4]
 80083d4:	4620      	mov	r0, r4
 80083d6:	f7ff fa55 	bl	8007884 <_vfiprintf_r>
 80083da:	b002      	add	sp, #8
 80083dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80083e0:	b004      	add	sp, #16
 80083e2:	4770      	bx	lr
 80083e4:	200017cc 	.word	0x200017cc

080083e8 <__swbuf_r>:
 80083e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083ea:	460e      	mov	r6, r1
 80083ec:	4614      	mov	r4, r2
 80083ee:	4605      	mov	r5, r0
 80083f0:	b118      	cbz	r0, 80083fa <__swbuf_r+0x12>
 80083f2:	6983      	ldr	r3, [r0, #24]
 80083f4:	b90b      	cbnz	r3, 80083fa <__swbuf_r+0x12>
 80083f6:	f001 f853 	bl	80094a0 <__sinit>
 80083fa:	4b21      	ldr	r3, [pc, #132]	; (8008480 <__swbuf_r+0x98>)
 80083fc:	429c      	cmp	r4, r3
 80083fe:	d12b      	bne.n	8008458 <__swbuf_r+0x70>
 8008400:	686c      	ldr	r4, [r5, #4]
 8008402:	69a3      	ldr	r3, [r4, #24]
 8008404:	60a3      	str	r3, [r4, #8]
 8008406:	89a3      	ldrh	r3, [r4, #12]
 8008408:	071a      	lsls	r2, r3, #28
 800840a:	d52f      	bpl.n	800846c <__swbuf_r+0x84>
 800840c:	6923      	ldr	r3, [r4, #16]
 800840e:	b36b      	cbz	r3, 800846c <__swbuf_r+0x84>
 8008410:	6923      	ldr	r3, [r4, #16]
 8008412:	6820      	ldr	r0, [r4, #0]
 8008414:	1ac0      	subs	r0, r0, r3
 8008416:	6963      	ldr	r3, [r4, #20]
 8008418:	b2f6      	uxtb	r6, r6
 800841a:	4283      	cmp	r3, r0
 800841c:	4637      	mov	r7, r6
 800841e:	dc04      	bgt.n	800842a <__swbuf_r+0x42>
 8008420:	4621      	mov	r1, r4
 8008422:	4628      	mov	r0, r5
 8008424:	f000 ffa8 	bl	8009378 <_fflush_r>
 8008428:	bb30      	cbnz	r0, 8008478 <__swbuf_r+0x90>
 800842a:	68a3      	ldr	r3, [r4, #8]
 800842c:	3b01      	subs	r3, #1
 800842e:	60a3      	str	r3, [r4, #8]
 8008430:	6823      	ldr	r3, [r4, #0]
 8008432:	1c5a      	adds	r2, r3, #1
 8008434:	6022      	str	r2, [r4, #0]
 8008436:	701e      	strb	r6, [r3, #0]
 8008438:	6963      	ldr	r3, [r4, #20]
 800843a:	3001      	adds	r0, #1
 800843c:	4283      	cmp	r3, r0
 800843e:	d004      	beq.n	800844a <__swbuf_r+0x62>
 8008440:	89a3      	ldrh	r3, [r4, #12]
 8008442:	07db      	lsls	r3, r3, #31
 8008444:	d506      	bpl.n	8008454 <__swbuf_r+0x6c>
 8008446:	2e0a      	cmp	r6, #10
 8008448:	d104      	bne.n	8008454 <__swbuf_r+0x6c>
 800844a:	4621      	mov	r1, r4
 800844c:	4628      	mov	r0, r5
 800844e:	f000 ff93 	bl	8009378 <_fflush_r>
 8008452:	b988      	cbnz	r0, 8008478 <__swbuf_r+0x90>
 8008454:	4638      	mov	r0, r7
 8008456:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008458:	4b0a      	ldr	r3, [pc, #40]	; (8008484 <__swbuf_r+0x9c>)
 800845a:	429c      	cmp	r4, r3
 800845c:	d101      	bne.n	8008462 <__swbuf_r+0x7a>
 800845e:	68ac      	ldr	r4, [r5, #8]
 8008460:	e7cf      	b.n	8008402 <__swbuf_r+0x1a>
 8008462:	4b09      	ldr	r3, [pc, #36]	; (8008488 <__swbuf_r+0xa0>)
 8008464:	429c      	cmp	r4, r3
 8008466:	bf08      	it	eq
 8008468:	68ec      	ldreq	r4, [r5, #12]
 800846a:	e7ca      	b.n	8008402 <__swbuf_r+0x1a>
 800846c:	4621      	mov	r1, r4
 800846e:	4628      	mov	r0, r5
 8008470:	f000 f80c 	bl	800848c <__swsetup_r>
 8008474:	2800      	cmp	r0, #0
 8008476:	d0cb      	beq.n	8008410 <__swbuf_r+0x28>
 8008478:	f04f 37ff 	mov.w	r7, #4294967295
 800847c:	e7ea      	b.n	8008454 <__swbuf_r+0x6c>
 800847e:	bf00      	nop
 8008480:	0800a6c8 	.word	0x0800a6c8
 8008484:	0800a6e8 	.word	0x0800a6e8
 8008488:	0800a6a8 	.word	0x0800a6a8

0800848c <__swsetup_r>:
 800848c:	4b32      	ldr	r3, [pc, #200]	; (8008558 <__swsetup_r+0xcc>)
 800848e:	b570      	push	{r4, r5, r6, lr}
 8008490:	681d      	ldr	r5, [r3, #0]
 8008492:	4606      	mov	r6, r0
 8008494:	460c      	mov	r4, r1
 8008496:	b125      	cbz	r5, 80084a2 <__swsetup_r+0x16>
 8008498:	69ab      	ldr	r3, [r5, #24]
 800849a:	b913      	cbnz	r3, 80084a2 <__swsetup_r+0x16>
 800849c:	4628      	mov	r0, r5
 800849e:	f000 ffff 	bl	80094a0 <__sinit>
 80084a2:	4b2e      	ldr	r3, [pc, #184]	; (800855c <__swsetup_r+0xd0>)
 80084a4:	429c      	cmp	r4, r3
 80084a6:	d10f      	bne.n	80084c8 <__swsetup_r+0x3c>
 80084a8:	686c      	ldr	r4, [r5, #4]
 80084aa:	89a3      	ldrh	r3, [r4, #12]
 80084ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80084b0:	0719      	lsls	r1, r3, #28
 80084b2:	d42c      	bmi.n	800850e <__swsetup_r+0x82>
 80084b4:	06dd      	lsls	r5, r3, #27
 80084b6:	d411      	bmi.n	80084dc <__swsetup_r+0x50>
 80084b8:	2309      	movs	r3, #9
 80084ba:	6033      	str	r3, [r6, #0]
 80084bc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80084c0:	81a3      	strh	r3, [r4, #12]
 80084c2:	f04f 30ff 	mov.w	r0, #4294967295
 80084c6:	e03e      	b.n	8008546 <__swsetup_r+0xba>
 80084c8:	4b25      	ldr	r3, [pc, #148]	; (8008560 <__swsetup_r+0xd4>)
 80084ca:	429c      	cmp	r4, r3
 80084cc:	d101      	bne.n	80084d2 <__swsetup_r+0x46>
 80084ce:	68ac      	ldr	r4, [r5, #8]
 80084d0:	e7eb      	b.n	80084aa <__swsetup_r+0x1e>
 80084d2:	4b24      	ldr	r3, [pc, #144]	; (8008564 <__swsetup_r+0xd8>)
 80084d4:	429c      	cmp	r4, r3
 80084d6:	bf08      	it	eq
 80084d8:	68ec      	ldreq	r4, [r5, #12]
 80084da:	e7e6      	b.n	80084aa <__swsetup_r+0x1e>
 80084dc:	0758      	lsls	r0, r3, #29
 80084de:	d512      	bpl.n	8008506 <__swsetup_r+0x7a>
 80084e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80084e2:	b141      	cbz	r1, 80084f6 <__swsetup_r+0x6a>
 80084e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80084e8:	4299      	cmp	r1, r3
 80084ea:	d002      	beq.n	80084f2 <__swsetup_r+0x66>
 80084ec:	4630      	mov	r0, r6
 80084ee:	f001 fc91 	bl	8009e14 <_free_r>
 80084f2:	2300      	movs	r3, #0
 80084f4:	6363      	str	r3, [r4, #52]	; 0x34
 80084f6:	89a3      	ldrh	r3, [r4, #12]
 80084f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80084fc:	81a3      	strh	r3, [r4, #12]
 80084fe:	2300      	movs	r3, #0
 8008500:	6063      	str	r3, [r4, #4]
 8008502:	6923      	ldr	r3, [r4, #16]
 8008504:	6023      	str	r3, [r4, #0]
 8008506:	89a3      	ldrh	r3, [r4, #12]
 8008508:	f043 0308 	orr.w	r3, r3, #8
 800850c:	81a3      	strh	r3, [r4, #12]
 800850e:	6923      	ldr	r3, [r4, #16]
 8008510:	b94b      	cbnz	r3, 8008526 <__swsetup_r+0x9a>
 8008512:	89a3      	ldrh	r3, [r4, #12]
 8008514:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008518:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800851c:	d003      	beq.n	8008526 <__swsetup_r+0x9a>
 800851e:	4621      	mov	r1, r4
 8008520:	4630      	mov	r0, r6
 8008522:	f001 f887 	bl	8009634 <__smakebuf_r>
 8008526:	89a0      	ldrh	r0, [r4, #12]
 8008528:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800852c:	f010 0301 	ands.w	r3, r0, #1
 8008530:	d00a      	beq.n	8008548 <__swsetup_r+0xbc>
 8008532:	2300      	movs	r3, #0
 8008534:	60a3      	str	r3, [r4, #8]
 8008536:	6963      	ldr	r3, [r4, #20]
 8008538:	425b      	negs	r3, r3
 800853a:	61a3      	str	r3, [r4, #24]
 800853c:	6923      	ldr	r3, [r4, #16]
 800853e:	b943      	cbnz	r3, 8008552 <__swsetup_r+0xc6>
 8008540:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008544:	d1ba      	bne.n	80084bc <__swsetup_r+0x30>
 8008546:	bd70      	pop	{r4, r5, r6, pc}
 8008548:	0781      	lsls	r1, r0, #30
 800854a:	bf58      	it	pl
 800854c:	6963      	ldrpl	r3, [r4, #20]
 800854e:	60a3      	str	r3, [r4, #8]
 8008550:	e7f4      	b.n	800853c <__swsetup_r+0xb0>
 8008552:	2000      	movs	r0, #0
 8008554:	e7f7      	b.n	8008546 <__swsetup_r+0xba>
 8008556:	bf00      	nop
 8008558:	200017cc 	.word	0x200017cc
 800855c:	0800a6c8 	.word	0x0800a6c8
 8008560:	0800a6e8 	.word	0x0800a6e8
 8008564:	0800a6a8 	.word	0x0800a6a8

08008568 <abort>:
 8008568:	b508      	push	{r3, lr}
 800856a:	2006      	movs	r0, #6
 800856c:	f001 fd6a 	bl	800a044 <raise>
 8008570:	2001      	movs	r0, #1
 8008572:	f7f9 fea9 	bl	80022c8 <_exit>

08008576 <quorem>:
 8008576:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800857a:	6903      	ldr	r3, [r0, #16]
 800857c:	690c      	ldr	r4, [r1, #16]
 800857e:	42a3      	cmp	r3, r4
 8008580:	4607      	mov	r7, r0
 8008582:	f2c0 8081 	blt.w	8008688 <quorem+0x112>
 8008586:	3c01      	subs	r4, #1
 8008588:	f101 0814 	add.w	r8, r1, #20
 800858c:	f100 0514 	add.w	r5, r0, #20
 8008590:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008594:	9301      	str	r3, [sp, #4]
 8008596:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800859a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800859e:	3301      	adds	r3, #1
 80085a0:	429a      	cmp	r2, r3
 80085a2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80085a6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80085aa:	fbb2 f6f3 	udiv	r6, r2, r3
 80085ae:	d331      	bcc.n	8008614 <quorem+0x9e>
 80085b0:	f04f 0e00 	mov.w	lr, #0
 80085b4:	4640      	mov	r0, r8
 80085b6:	46ac      	mov	ip, r5
 80085b8:	46f2      	mov	sl, lr
 80085ba:	f850 2b04 	ldr.w	r2, [r0], #4
 80085be:	b293      	uxth	r3, r2
 80085c0:	fb06 e303 	mla	r3, r6, r3, lr
 80085c4:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80085c8:	b29b      	uxth	r3, r3
 80085ca:	ebaa 0303 	sub.w	r3, sl, r3
 80085ce:	f8dc a000 	ldr.w	sl, [ip]
 80085d2:	0c12      	lsrs	r2, r2, #16
 80085d4:	fa13 f38a 	uxtah	r3, r3, sl
 80085d8:	fb06 e202 	mla	r2, r6, r2, lr
 80085dc:	9300      	str	r3, [sp, #0]
 80085de:	9b00      	ldr	r3, [sp, #0]
 80085e0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80085e4:	b292      	uxth	r2, r2
 80085e6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80085ea:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80085ee:	f8bd 3000 	ldrh.w	r3, [sp]
 80085f2:	4581      	cmp	r9, r0
 80085f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80085f8:	f84c 3b04 	str.w	r3, [ip], #4
 80085fc:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008600:	d2db      	bcs.n	80085ba <quorem+0x44>
 8008602:	f855 300b 	ldr.w	r3, [r5, fp]
 8008606:	b92b      	cbnz	r3, 8008614 <quorem+0x9e>
 8008608:	9b01      	ldr	r3, [sp, #4]
 800860a:	3b04      	subs	r3, #4
 800860c:	429d      	cmp	r5, r3
 800860e:	461a      	mov	r2, r3
 8008610:	d32e      	bcc.n	8008670 <quorem+0xfa>
 8008612:	613c      	str	r4, [r7, #16]
 8008614:	4638      	mov	r0, r7
 8008616:	f001 fae5 	bl	8009be4 <__mcmp>
 800861a:	2800      	cmp	r0, #0
 800861c:	db24      	blt.n	8008668 <quorem+0xf2>
 800861e:	3601      	adds	r6, #1
 8008620:	4628      	mov	r0, r5
 8008622:	f04f 0c00 	mov.w	ip, #0
 8008626:	f858 2b04 	ldr.w	r2, [r8], #4
 800862a:	f8d0 e000 	ldr.w	lr, [r0]
 800862e:	b293      	uxth	r3, r2
 8008630:	ebac 0303 	sub.w	r3, ip, r3
 8008634:	0c12      	lsrs	r2, r2, #16
 8008636:	fa13 f38e 	uxtah	r3, r3, lr
 800863a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800863e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008642:	b29b      	uxth	r3, r3
 8008644:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008648:	45c1      	cmp	r9, r8
 800864a:	f840 3b04 	str.w	r3, [r0], #4
 800864e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008652:	d2e8      	bcs.n	8008626 <quorem+0xb0>
 8008654:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008658:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800865c:	b922      	cbnz	r2, 8008668 <quorem+0xf2>
 800865e:	3b04      	subs	r3, #4
 8008660:	429d      	cmp	r5, r3
 8008662:	461a      	mov	r2, r3
 8008664:	d30a      	bcc.n	800867c <quorem+0x106>
 8008666:	613c      	str	r4, [r7, #16]
 8008668:	4630      	mov	r0, r6
 800866a:	b003      	add	sp, #12
 800866c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008670:	6812      	ldr	r2, [r2, #0]
 8008672:	3b04      	subs	r3, #4
 8008674:	2a00      	cmp	r2, #0
 8008676:	d1cc      	bne.n	8008612 <quorem+0x9c>
 8008678:	3c01      	subs	r4, #1
 800867a:	e7c7      	b.n	800860c <quorem+0x96>
 800867c:	6812      	ldr	r2, [r2, #0]
 800867e:	3b04      	subs	r3, #4
 8008680:	2a00      	cmp	r2, #0
 8008682:	d1f0      	bne.n	8008666 <quorem+0xf0>
 8008684:	3c01      	subs	r4, #1
 8008686:	e7eb      	b.n	8008660 <quorem+0xea>
 8008688:	2000      	movs	r0, #0
 800868a:	e7ee      	b.n	800866a <quorem+0xf4>
 800868c:	0000      	movs	r0, r0
	...

08008690 <_dtoa_r>:
 8008690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008694:	ed2d 8b04 	vpush	{d8-d9}
 8008698:	ec57 6b10 	vmov	r6, r7, d0
 800869c:	b093      	sub	sp, #76	; 0x4c
 800869e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80086a0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80086a4:	9106      	str	r1, [sp, #24]
 80086a6:	ee10 aa10 	vmov	sl, s0
 80086aa:	4604      	mov	r4, r0
 80086ac:	9209      	str	r2, [sp, #36]	; 0x24
 80086ae:	930c      	str	r3, [sp, #48]	; 0x30
 80086b0:	46bb      	mov	fp, r7
 80086b2:	b975      	cbnz	r5, 80086d2 <_dtoa_r+0x42>
 80086b4:	2010      	movs	r0, #16
 80086b6:	f000 fffd 	bl	80096b4 <malloc>
 80086ba:	4602      	mov	r2, r0
 80086bc:	6260      	str	r0, [r4, #36]	; 0x24
 80086be:	b920      	cbnz	r0, 80086ca <_dtoa_r+0x3a>
 80086c0:	4ba7      	ldr	r3, [pc, #668]	; (8008960 <_dtoa_r+0x2d0>)
 80086c2:	21ea      	movs	r1, #234	; 0xea
 80086c4:	48a7      	ldr	r0, [pc, #668]	; (8008964 <_dtoa_r+0x2d4>)
 80086c6:	f7ff f851 	bl	800776c <__assert_func>
 80086ca:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80086ce:	6005      	str	r5, [r0, #0]
 80086d0:	60c5      	str	r5, [r0, #12]
 80086d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80086d4:	6819      	ldr	r1, [r3, #0]
 80086d6:	b151      	cbz	r1, 80086ee <_dtoa_r+0x5e>
 80086d8:	685a      	ldr	r2, [r3, #4]
 80086da:	604a      	str	r2, [r1, #4]
 80086dc:	2301      	movs	r3, #1
 80086de:	4093      	lsls	r3, r2
 80086e0:	608b      	str	r3, [r1, #8]
 80086e2:	4620      	mov	r0, r4
 80086e4:	f001 f83c 	bl	8009760 <_Bfree>
 80086e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80086ea:	2200      	movs	r2, #0
 80086ec:	601a      	str	r2, [r3, #0]
 80086ee:	1e3b      	subs	r3, r7, #0
 80086f0:	bfaa      	itet	ge
 80086f2:	2300      	movge	r3, #0
 80086f4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80086f8:	f8c8 3000 	strge.w	r3, [r8]
 80086fc:	4b9a      	ldr	r3, [pc, #616]	; (8008968 <_dtoa_r+0x2d8>)
 80086fe:	bfbc      	itt	lt
 8008700:	2201      	movlt	r2, #1
 8008702:	f8c8 2000 	strlt.w	r2, [r8]
 8008706:	ea33 030b 	bics.w	r3, r3, fp
 800870a:	d11b      	bne.n	8008744 <_dtoa_r+0xb4>
 800870c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800870e:	f242 730f 	movw	r3, #9999	; 0x270f
 8008712:	6013      	str	r3, [r2, #0]
 8008714:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008718:	4333      	orrs	r3, r6
 800871a:	f000 8592 	beq.w	8009242 <_dtoa_r+0xbb2>
 800871e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008720:	b963      	cbnz	r3, 800873c <_dtoa_r+0xac>
 8008722:	4b92      	ldr	r3, [pc, #584]	; (800896c <_dtoa_r+0x2dc>)
 8008724:	e022      	b.n	800876c <_dtoa_r+0xdc>
 8008726:	4b92      	ldr	r3, [pc, #584]	; (8008970 <_dtoa_r+0x2e0>)
 8008728:	9301      	str	r3, [sp, #4]
 800872a:	3308      	adds	r3, #8
 800872c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800872e:	6013      	str	r3, [r2, #0]
 8008730:	9801      	ldr	r0, [sp, #4]
 8008732:	b013      	add	sp, #76	; 0x4c
 8008734:	ecbd 8b04 	vpop	{d8-d9}
 8008738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800873c:	4b8b      	ldr	r3, [pc, #556]	; (800896c <_dtoa_r+0x2dc>)
 800873e:	9301      	str	r3, [sp, #4]
 8008740:	3303      	adds	r3, #3
 8008742:	e7f3      	b.n	800872c <_dtoa_r+0x9c>
 8008744:	2200      	movs	r2, #0
 8008746:	2300      	movs	r3, #0
 8008748:	4650      	mov	r0, sl
 800874a:	4659      	mov	r1, fp
 800874c:	f7f8 f9c4 	bl	8000ad8 <__aeabi_dcmpeq>
 8008750:	ec4b ab19 	vmov	d9, sl, fp
 8008754:	4680      	mov	r8, r0
 8008756:	b158      	cbz	r0, 8008770 <_dtoa_r+0xe0>
 8008758:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800875a:	2301      	movs	r3, #1
 800875c:	6013      	str	r3, [r2, #0]
 800875e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008760:	2b00      	cmp	r3, #0
 8008762:	f000 856b 	beq.w	800923c <_dtoa_r+0xbac>
 8008766:	4883      	ldr	r0, [pc, #524]	; (8008974 <_dtoa_r+0x2e4>)
 8008768:	6018      	str	r0, [r3, #0]
 800876a:	1e43      	subs	r3, r0, #1
 800876c:	9301      	str	r3, [sp, #4]
 800876e:	e7df      	b.n	8008730 <_dtoa_r+0xa0>
 8008770:	ec4b ab10 	vmov	d0, sl, fp
 8008774:	aa10      	add	r2, sp, #64	; 0x40
 8008776:	a911      	add	r1, sp, #68	; 0x44
 8008778:	4620      	mov	r0, r4
 800877a:	f001 fad9 	bl	8009d30 <__d2b>
 800877e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008782:	ee08 0a10 	vmov	s16, r0
 8008786:	2d00      	cmp	r5, #0
 8008788:	f000 8084 	beq.w	8008894 <_dtoa_r+0x204>
 800878c:	ee19 3a90 	vmov	r3, s19
 8008790:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008794:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008798:	4656      	mov	r6, sl
 800879a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800879e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80087a2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80087a6:	4b74      	ldr	r3, [pc, #464]	; (8008978 <_dtoa_r+0x2e8>)
 80087a8:	2200      	movs	r2, #0
 80087aa:	4630      	mov	r0, r6
 80087ac:	4639      	mov	r1, r7
 80087ae:	f7f7 fd73 	bl	8000298 <__aeabi_dsub>
 80087b2:	a365      	add	r3, pc, #404	; (adr r3, 8008948 <_dtoa_r+0x2b8>)
 80087b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087b8:	f7f7 ff26 	bl	8000608 <__aeabi_dmul>
 80087bc:	a364      	add	r3, pc, #400	; (adr r3, 8008950 <_dtoa_r+0x2c0>)
 80087be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087c2:	f7f7 fd6b 	bl	800029c <__adddf3>
 80087c6:	4606      	mov	r6, r0
 80087c8:	4628      	mov	r0, r5
 80087ca:	460f      	mov	r7, r1
 80087cc:	f7f7 feb2 	bl	8000534 <__aeabi_i2d>
 80087d0:	a361      	add	r3, pc, #388	; (adr r3, 8008958 <_dtoa_r+0x2c8>)
 80087d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087d6:	f7f7 ff17 	bl	8000608 <__aeabi_dmul>
 80087da:	4602      	mov	r2, r0
 80087dc:	460b      	mov	r3, r1
 80087de:	4630      	mov	r0, r6
 80087e0:	4639      	mov	r1, r7
 80087e2:	f7f7 fd5b 	bl	800029c <__adddf3>
 80087e6:	4606      	mov	r6, r0
 80087e8:	460f      	mov	r7, r1
 80087ea:	f7f8 f9bd 	bl	8000b68 <__aeabi_d2iz>
 80087ee:	2200      	movs	r2, #0
 80087f0:	9000      	str	r0, [sp, #0]
 80087f2:	2300      	movs	r3, #0
 80087f4:	4630      	mov	r0, r6
 80087f6:	4639      	mov	r1, r7
 80087f8:	f7f8 f978 	bl	8000aec <__aeabi_dcmplt>
 80087fc:	b150      	cbz	r0, 8008814 <_dtoa_r+0x184>
 80087fe:	9800      	ldr	r0, [sp, #0]
 8008800:	f7f7 fe98 	bl	8000534 <__aeabi_i2d>
 8008804:	4632      	mov	r2, r6
 8008806:	463b      	mov	r3, r7
 8008808:	f7f8 f966 	bl	8000ad8 <__aeabi_dcmpeq>
 800880c:	b910      	cbnz	r0, 8008814 <_dtoa_r+0x184>
 800880e:	9b00      	ldr	r3, [sp, #0]
 8008810:	3b01      	subs	r3, #1
 8008812:	9300      	str	r3, [sp, #0]
 8008814:	9b00      	ldr	r3, [sp, #0]
 8008816:	2b16      	cmp	r3, #22
 8008818:	d85a      	bhi.n	80088d0 <_dtoa_r+0x240>
 800881a:	9a00      	ldr	r2, [sp, #0]
 800881c:	4b57      	ldr	r3, [pc, #348]	; (800897c <_dtoa_r+0x2ec>)
 800881e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008826:	ec51 0b19 	vmov	r0, r1, d9
 800882a:	f7f8 f95f 	bl	8000aec <__aeabi_dcmplt>
 800882e:	2800      	cmp	r0, #0
 8008830:	d050      	beq.n	80088d4 <_dtoa_r+0x244>
 8008832:	9b00      	ldr	r3, [sp, #0]
 8008834:	3b01      	subs	r3, #1
 8008836:	9300      	str	r3, [sp, #0]
 8008838:	2300      	movs	r3, #0
 800883a:	930b      	str	r3, [sp, #44]	; 0x2c
 800883c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800883e:	1b5d      	subs	r5, r3, r5
 8008840:	1e6b      	subs	r3, r5, #1
 8008842:	9305      	str	r3, [sp, #20]
 8008844:	bf45      	ittet	mi
 8008846:	f1c5 0301 	rsbmi	r3, r5, #1
 800884a:	9304      	strmi	r3, [sp, #16]
 800884c:	2300      	movpl	r3, #0
 800884e:	2300      	movmi	r3, #0
 8008850:	bf4c      	ite	mi
 8008852:	9305      	strmi	r3, [sp, #20]
 8008854:	9304      	strpl	r3, [sp, #16]
 8008856:	9b00      	ldr	r3, [sp, #0]
 8008858:	2b00      	cmp	r3, #0
 800885a:	db3d      	blt.n	80088d8 <_dtoa_r+0x248>
 800885c:	9b05      	ldr	r3, [sp, #20]
 800885e:	9a00      	ldr	r2, [sp, #0]
 8008860:	920a      	str	r2, [sp, #40]	; 0x28
 8008862:	4413      	add	r3, r2
 8008864:	9305      	str	r3, [sp, #20]
 8008866:	2300      	movs	r3, #0
 8008868:	9307      	str	r3, [sp, #28]
 800886a:	9b06      	ldr	r3, [sp, #24]
 800886c:	2b09      	cmp	r3, #9
 800886e:	f200 8089 	bhi.w	8008984 <_dtoa_r+0x2f4>
 8008872:	2b05      	cmp	r3, #5
 8008874:	bfc4      	itt	gt
 8008876:	3b04      	subgt	r3, #4
 8008878:	9306      	strgt	r3, [sp, #24]
 800887a:	9b06      	ldr	r3, [sp, #24]
 800887c:	f1a3 0302 	sub.w	r3, r3, #2
 8008880:	bfcc      	ite	gt
 8008882:	2500      	movgt	r5, #0
 8008884:	2501      	movle	r5, #1
 8008886:	2b03      	cmp	r3, #3
 8008888:	f200 8087 	bhi.w	800899a <_dtoa_r+0x30a>
 800888c:	e8df f003 	tbb	[pc, r3]
 8008890:	59383a2d 	.word	0x59383a2d
 8008894:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008898:	441d      	add	r5, r3
 800889a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800889e:	2b20      	cmp	r3, #32
 80088a0:	bfc1      	itttt	gt
 80088a2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80088a6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80088aa:	fa0b f303 	lslgt.w	r3, fp, r3
 80088ae:	fa26 f000 	lsrgt.w	r0, r6, r0
 80088b2:	bfda      	itte	le
 80088b4:	f1c3 0320 	rsble	r3, r3, #32
 80088b8:	fa06 f003 	lslle.w	r0, r6, r3
 80088bc:	4318      	orrgt	r0, r3
 80088be:	f7f7 fe29 	bl	8000514 <__aeabi_ui2d>
 80088c2:	2301      	movs	r3, #1
 80088c4:	4606      	mov	r6, r0
 80088c6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80088ca:	3d01      	subs	r5, #1
 80088cc:	930e      	str	r3, [sp, #56]	; 0x38
 80088ce:	e76a      	b.n	80087a6 <_dtoa_r+0x116>
 80088d0:	2301      	movs	r3, #1
 80088d2:	e7b2      	b.n	800883a <_dtoa_r+0x1aa>
 80088d4:	900b      	str	r0, [sp, #44]	; 0x2c
 80088d6:	e7b1      	b.n	800883c <_dtoa_r+0x1ac>
 80088d8:	9b04      	ldr	r3, [sp, #16]
 80088da:	9a00      	ldr	r2, [sp, #0]
 80088dc:	1a9b      	subs	r3, r3, r2
 80088de:	9304      	str	r3, [sp, #16]
 80088e0:	4253      	negs	r3, r2
 80088e2:	9307      	str	r3, [sp, #28]
 80088e4:	2300      	movs	r3, #0
 80088e6:	930a      	str	r3, [sp, #40]	; 0x28
 80088e8:	e7bf      	b.n	800886a <_dtoa_r+0x1da>
 80088ea:	2300      	movs	r3, #0
 80088ec:	9308      	str	r3, [sp, #32]
 80088ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	dc55      	bgt.n	80089a0 <_dtoa_r+0x310>
 80088f4:	2301      	movs	r3, #1
 80088f6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80088fa:	461a      	mov	r2, r3
 80088fc:	9209      	str	r2, [sp, #36]	; 0x24
 80088fe:	e00c      	b.n	800891a <_dtoa_r+0x28a>
 8008900:	2301      	movs	r3, #1
 8008902:	e7f3      	b.n	80088ec <_dtoa_r+0x25c>
 8008904:	2300      	movs	r3, #0
 8008906:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008908:	9308      	str	r3, [sp, #32]
 800890a:	9b00      	ldr	r3, [sp, #0]
 800890c:	4413      	add	r3, r2
 800890e:	9302      	str	r3, [sp, #8]
 8008910:	3301      	adds	r3, #1
 8008912:	2b01      	cmp	r3, #1
 8008914:	9303      	str	r3, [sp, #12]
 8008916:	bfb8      	it	lt
 8008918:	2301      	movlt	r3, #1
 800891a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800891c:	2200      	movs	r2, #0
 800891e:	6042      	str	r2, [r0, #4]
 8008920:	2204      	movs	r2, #4
 8008922:	f102 0614 	add.w	r6, r2, #20
 8008926:	429e      	cmp	r6, r3
 8008928:	6841      	ldr	r1, [r0, #4]
 800892a:	d93d      	bls.n	80089a8 <_dtoa_r+0x318>
 800892c:	4620      	mov	r0, r4
 800892e:	f000 fed7 	bl	80096e0 <_Balloc>
 8008932:	9001      	str	r0, [sp, #4]
 8008934:	2800      	cmp	r0, #0
 8008936:	d13b      	bne.n	80089b0 <_dtoa_r+0x320>
 8008938:	4b11      	ldr	r3, [pc, #68]	; (8008980 <_dtoa_r+0x2f0>)
 800893a:	4602      	mov	r2, r0
 800893c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008940:	e6c0      	b.n	80086c4 <_dtoa_r+0x34>
 8008942:	2301      	movs	r3, #1
 8008944:	e7df      	b.n	8008906 <_dtoa_r+0x276>
 8008946:	bf00      	nop
 8008948:	636f4361 	.word	0x636f4361
 800894c:	3fd287a7 	.word	0x3fd287a7
 8008950:	8b60c8b3 	.word	0x8b60c8b3
 8008954:	3fc68a28 	.word	0x3fc68a28
 8008958:	509f79fb 	.word	0x509f79fb
 800895c:	3fd34413 	.word	0x3fd34413
 8008960:	0800a622 	.word	0x0800a622
 8008964:	0800a639 	.word	0x0800a639
 8008968:	7ff00000 	.word	0x7ff00000
 800896c:	0800a61e 	.word	0x0800a61e
 8008970:	0800a615 	.word	0x0800a615
 8008974:	0800a5f2 	.word	0x0800a5f2
 8008978:	3ff80000 	.word	0x3ff80000
 800897c:	0800a790 	.word	0x0800a790
 8008980:	0800a694 	.word	0x0800a694
 8008984:	2501      	movs	r5, #1
 8008986:	2300      	movs	r3, #0
 8008988:	9306      	str	r3, [sp, #24]
 800898a:	9508      	str	r5, [sp, #32]
 800898c:	f04f 33ff 	mov.w	r3, #4294967295
 8008990:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008994:	2200      	movs	r2, #0
 8008996:	2312      	movs	r3, #18
 8008998:	e7b0      	b.n	80088fc <_dtoa_r+0x26c>
 800899a:	2301      	movs	r3, #1
 800899c:	9308      	str	r3, [sp, #32]
 800899e:	e7f5      	b.n	800898c <_dtoa_r+0x2fc>
 80089a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089a2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80089a6:	e7b8      	b.n	800891a <_dtoa_r+0x28a>
 80089a8:	3101      	adds	r1, #1
 80089aa:	6041      	str	r1, [r0, #4]
 80089ac:	0052      	lsls	r2, r2, #1
 80089ae:	e7b8      	b.n	8008922 <_dtoa_r+0x292>
 80089b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80089b2:	9a01      	ldr	r2, [sp, #4]
 80089b4:	601a      	str	r2, [r3, #0]
 80089b6:	9b03      	ldr	r3, [sp, #12]
 80089b8:	2b0e      	cmp	r3, #14
 80089ba:	f200 809d 	bhi.w	8008af8 <_dtoa_r+0x468>
 80089be:	2d00      	cmp	r5, #0
 80089c0:	f000 809a 	beq.w	8008af8 <_dtoa_r+0x468>
 80089c4:	9b00      	ldr	r3, [sp, #0]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	dd32      	ble.n	8008a30 <_dtoa_r+0x3a0>
 80089ca:	4ab7      	ldr	r2, [pc, #732]	; (8008ca8 <_dtoa_r+0x618>)
 80089cc:	f003 030f 	and.w	r3, r3, #15
 80089d0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80089d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80089d8:	9b00      	ldr	r3, [sp, #0]
 80089da:	05d8      	lsls	r0, r3, #23
 80089dc:	ea4f 1723 	mov.w	r7, r3, asr #4
 80089e0:	d516      	bpl.n	8008a10 <_dtoa_r+0x380>
 80089e2:	4bb2      	ldr	r3, [pc, #712]	; (8008cac <_dtoa_r+0x61c>)
 80089e4:	ec51 0b19 	vmov	r0, r1, d9
 80089e8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80089ec:	f7f7 ff36 	bl	800085c <__aeabi_ddiv>
 80089f0:	f007 070f 	and.w	r7, r7, #15
 80089f4:	4682      	mov	sl, r0
 80089f6:	468b      	mov	fp, r1
 80089f8:	2503      	movs	r5, #3
 80089fa:	4eac      	ldr	r6, [pc, #688]	; (8008cac <_dtoa_r+0x61c>)
 80089fc:	b957      	cbnz	r7, 8008a14 <_dtoa_r+0x384>
 80089fe:	4642      	mov	r2, r8
 8008a00:	464b      	mov	r3, r9
 8008a02:	4650      	mov	r0, sl
 8008a04:	4659      	mov	r1, fp
 8008a06:	f7f7 ff29 	bl	800085c <__aeabi_ddiv>
 8008a0a:	4682      	mov	sl, r0
 8008a0c:	468b      	mov	fp, r1
 8008a0e:	e028      	b.n	8008a62 <_dtoa_r+0x3d2>
 8008a10:	2502      	movs	r5, #2
 8008a12:	e7f2      	b.n	80089fa <_dtoa_r+0x36a>
 8008a14:	07f9      	lsls	r1, r7, #31
 8008a16:	d508      	bpl.n	8008a2a <_dtoa_r+0x39a>
 8008a18:	4640      	mov	r0, r8
 8008a1a:	4649      	mov	r1, r9
 8008a1c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008a20:	f7f7 fdf2 	bl	8000608 <__aeabi_dmul>
 8008a24:	3501      	adds	r5, #1
 8008a26:	4680      	mov	r8, r0
 8008a28:	4689      	mov	r9, r1
 8008a2a:	107f      	asrs	r7, r7, #1
 8008a2c:	3608      	adds	r6, #8
 8008a2e:	e7e5      	b.n	80089fc <_dtoa_r+0x36c>
 8008a30:	f000 809b 	beq.w	8008b6a <_dtoa_r+0x4da>
 8008a34:	9b00      	ldr	r3, [sp, #0]
 8008a36:	4f9d      	ldr	r7, [pc, #628]	; (8008cac <_dtoa_r+0x61c>)
 8008a38:	425e      	negs	r6, r3
 8008a3a:	4b9b      	ldr	r3, [pc, #620]	; (8008ca8 <_dtoa_r+0x618>)
 8008a3c:	f006 020f 	and.w	r2, r6, #15
 8008a40:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a48:	ec51 0b19 	vmov	r0, r1, d9
 8008a4c:	f7f7 fddc 	bl	8000608 <__aeabi_dmul>
 8008a50:	1136      	asrs	r6, r6, #4
 8008a52:	4682      	mov	sl, r0
 8008a54:	468b      	mov	fp, r1
 8008a56:	2300      	movs	r3, #0
 8008a58:	2502      	movs	r5, #2
 8008a5a:	2e00      	cmp	r6, #0
 8008a5c:	d17a      	bne.n	8008b54 <_dtoa_r+0x4c4>
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d1d3      	bne.n	8008a0a <_dtoa_r+0x37a>
 8008a62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	f000 8082 	beq.w	8008b6e <_dtoa_r+0x4de>
 8008a6a:	4b91      	ldr	r3, [pc, #580]	; (8008cb0 <_dtoa_r+0x620>)
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	4650      	mov	r0, sl
 8008a70:	4659      	mov	r1, fp
 8008a72:	f7f8 f83b 	bl	8000aec <__aeabi_dcmplt>
 8008a76:	2800      	cmp	r0, #0
 8008a78:	d079      	beq.n	8008b6e <_dtoa_r+0x4de>
 8008a7a:	9b03      	ldr	r3, [sp, #12]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d076      	beq.n	8008b6e <_dtoa_r+0x4de>
 8008a80:	9b02      	ldr	r3, [sp, #8]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	dd36      	ble.n	8008af4 <_dtoa_r+0x464>
 8008a86:	9b00      	ldr	r3, [sp, #0]
 8008a88:	4650      	mov	r0, sl
 8008a8a:	4659      	mov	r1, fp
 8008a8c:	1e5f      	subs	r7, r3, #1
 8008a8e:	2200      	movs	r2, #0
 8008a90:	4b88      	ldr	r3, [pc, #544]	; (8008cb4 <_dtoa_r+0x624>)
 8008a92:	f7f7 fdb9 	bl	8000608 <__aeabi_dmul>
 8008a96:	9e02      	ldr	r6, [sp, #8]
 8008a98:	4682      	mov	sl, r0
 8008a9a:	468b      	mov	fp, r1
 8008a9c:	3501      	adds	r5, #1
 8008a9e:	4628      	mov	r0, r5
 8008aa0:	f7f7 fd48 	bl	8000534 <__aeabi_i2d>
 8008aa4:	4652      	mov	r2, sl
 8008aa6:	465b      	mov	r3, fp
 8008aa8:	f7f7 fdae 	bl	8000608 <__aeabi_dmul>
 8008aac:	4b82      	ldr	r3, [pc, #520]	; (8008cb8 <_dtoa_r+0x628>)
 8008aae:	2200      	movs	r2, #0
 8008ab0:	f7f7 fbf4 	bl	800029c <__adddf3>
 8008ab4:	46d0      	mov	r8, sl
 8008ab6:	46d9      	mov	r9, fp
 8008ab8:	4682      	mov	sl, r0
 8008aba:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008abe:	2e00      	cmp	r6, #0
 8008ac0:	d158      	bne.n	8008b74 <_dtoa_r+0x4e4>
 8008ac2:	4b7e      	ldr	r3, [pc, #504]	; (8008cbc <_dtoa_r+0x62c>)
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	4640      	mov	r0, r8
 8008ac8:	4649      	mov	r1, r9
 8008aca:	f7f7 fbe5 	bl	8000298 <__aeabi_dsub>
 8008ace:	4652      	mov	r2, sl
 8008ad0:	465b      	mov	r3, fp
 8008ad2:	4680      	mov	r8, r0
 8008ad4:	4689      	mov	r9, r1
 8008ad6:	f7f8 f827 	bl	8000b28 <__aeabi_dcmpgt>
 8008ada:	2800      	cmp	r0, #0
 8008adc:	f040 8295 	bne.w	800900a <_dtoa_r+0x97a>
 8008ae0:	4652      	mov	r2, sl
 8008ae2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008ae6:	4640      	mov	r0, r8
 8008ae8:	4649      	mov	r1, r9
 8008aea:	f7f7 ffff 	bl	8000aec <__aeabi_dcmplt>
 8008aee:	2800      	cmp	r0, #0
 8008af0:	f040 8289 	bne.w	8009006 <_dtoa_r+0x976>
 8008af4:	ec5b ab19 	vmov	sl, fp, d9
 8008af8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	f2c0 8148 	blt.w	8008d90 <_dtoa_r+0x700>
 8008b00:	9a00      	ldr	r2, [sp, #0]
 8008b02:	2a0e      	cmp	r2, #14
 8008b04:	f300 8144 	bgt.w	8008d90 <_dtoa_r+0x700>
 8008b08:	4b67      	ldr	r3, [pc, #412]	; (8008ca8 <_dtoa_r+0x618>)
 8008b0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008b0e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008b12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	f280 80d5 	bge.w	8008cc4 <_dtoa_r+0x634>
 8008b1a:	9b03      	ldr	r3, [sp, #12]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	f300 80d1 	bgt.w	8008cc4 <_dtoa_r+0x634>
 8008b22:	f040 826f 	bne.w	8009004 <_dtoa_r+0x974>
 8008b26:	4b65      	ldr	r3, [pc, #404]	; (8008cbc <_dtoa_r+0x62c>)
 8008b28:	2200      	movs	r2, #0
 8008b2a:	4640      	mov	r0, r8
 8008b2c:	4649      	mov	r1, r9
 8008b2e:	f7f7 fd6b 	bl	8000608 <__aeabi_dmul>
 8008b32:	4652      	mov	r2, sl
 8008b34:	465b      	mov	r3, fp
 8008b36:	f7f7 ffed 	bl	8000b14 <__aeabi_dcmpge>
 8008b3a:	9e03      	ldr	r6, [sp, #12]
 8008b3c:	4637      	mov	r7, r6
 8008b3e:	2800      	cmp	r0, #0
 8008b40:	f040 8245 	bne.w	8008fce <_dtoa_r+0x93e>
 8008b44:	9d01      	ldr	r5, [sp, #4]
 8008b46:	2331      	movs	r3, #49	; 0x31
 8008b48:	f805 3b01 	strb.w	r3, [r5], #1
 8008b4c:	9b00      	ldr	r3, [sp, #0]
 8008b4e:	3301      	adds	r3, #1
 8008b50:	9300      	str	r3, [sp, #0]
 8008b52:	e240      	b.n	8008fd6 <_dtoa_r+0x946>
 8008b54:	07f2      	lsls	r2, r6, #31
 8008b56:	d505      	bpl.n	8008b64 <_dtoa_r+0x4d4>
 8008b58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b5c:	f7f7 fd54 	bl	8000608 <__aeabi_dmul>
 8008b60:	3501      	adds	r5, #1
 8008b62:	2301      	movs	r3, #1
 8008b64:	1076      	asrs	r6, r6, #1
 8008b66:	3708      	adds	r7, #8
 8008b68:	e777      	b.n	8008a5a <_dtoa_r+0x3ca>
 8008b6a:	2502      	movs	r5, #2
 8008b6c:	e779      	b.n	8008a62 <_dtoa_r+0x3d2>
 8008b6e:	9f00      	ldr	r7, [sp, #0]
 8008b70:	9e03      	ldr	r6, [sp, #12]
 8008b72:	e794      	b.n	8008a9e <_dtoa_r+0x40e>
 8008b74:	9901      	ldr	r1, [sp, #4]
 8008b76:	4b4c      	ldr	r3, [pc, #304]	; (8008ca8 <_dtoa_r+0x618>)
 8008b78:	4431      	add	r1, r6
 8008b7a:	910d      	str	r1, [sp, #52]	; 0x34
 8008b7c:	9908      	ldr	r1, [sp, #32]
 8008b7e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008b82:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008b86:	2900      	cmp	r1, #0
 8008b88:	d043      	beq.n	8008c12 <_dtoa_r+0x582>
 8008b8a:	494d      	ldr	r1, [pc, #308]	; (8008cc0 <_dtoa_r+0x630>)
 8008b8c:	2000      	movs	r0, #0
 8008b8e:	f7f7 fe65 	bl	800085c <__aeabi_ddiv>
 8008b92:	4652      	mov	r2, sl
 8008b94:	465b      	mov	r3, fp
 8008b96:	f7f7 fb7f 	bl	8000298 <__aeabi_dsub>
 8008b9a:	9d01      	ldr	r5, [sp, #4]
 8008b9c:	4682      	mov	sl, r0
 8008b9e:	468b      	mov	fp, r1
 8008ba0:	4649      	mov	r1, r9
 8008ba2:	4640      	mov	r0, r8
 8008ba4:	f7f7 ffe0 	bl	8000b68 <__aeabi_d2iz>
 8008ba8:	4606      	mov	r6, r0
 8008baa:	f7f7 fcc3 	bl	8000534 <__aeabi_i2d>
 8008bae:	4602      	mov	r2, r0
 8008bb0:	460b      	mov	r3, r1
 8008bb2:	4640      	mov	r0, r8
 8008bb4:	4649      	mov	r1, r9
 8008bb6:	f7f7 fb6f 	bl	8000298 <__aeabi_dsub>
 8008bba:	3630      	adds	r6, #48	; 0x30
 8008bbc:	f805 6b01 	strb.w	r6, [r5], #1
 8008bc0:	4652      	mov	r2, sl
 8008bc2:	465b      	mov	r3, fp
 8008bc4:	4680      	mov	r8, r0
 8008bc6:	4689      	mov	r9, r1
 8008bc8:	f7f7 ff90 	bl	8000aec <__aeabi_dcmplt>
 8008bcc:	2800      	cmp	r0, #0
 8008bce:	d163      	bne.n	8008c98 <_dtoa_r+0x608>
 8008bd0:	4642      	mov	r2, r8
 8008bd2:	464b      	mov	r3, r9
 8008bd4:	4936      	ldr	r1, [pc, #216]	; (8008cb0 <_dtoa_r+0x620>)
 8008bd6:	2000      	movs	r0, #0
 8008bd8:	f7f7 fb5e 	bl	8000298 <__aeabi_dsub>
 8008bdc:	4652      	mov	r2, sl
 8008bde:	465b      	mov	r3, fp
 8008be0:	f7f7 ff84 	bl	8000aec <__aeabi_dcmplt>
 8008be4:	2800      	cmp	r0, #0
 8008be6:	f040 80b5 	bne.w	8008d54 <_dtoa_r+0x6c4>
 8008bea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008bec:	429d      	cmp	r5, r3
 8008bee:	d081      	beq.n	8008af4 <_dtoa_r+0x464>
 8008bf0:	4b30      	ldr	r3, [pc, #192]	; (8008cb4 <_dtoa_r+0x624>)
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	4650      	mov	r0, sl
 8008bf6:	4659      	mov	r1, fp
 8008bf8:	f7f7 fd06 	bl	8000608 <__aeabi_dmul>
 8008bfc:	4b2d      	ldr	r3, [pc, #180]	; (8008cb4 <_dtoa_r+0x624>)
 8008bfe:	4682      	mov	sl, r0
 8008c00:	468b      	mov	fp, r1
 8008c02:	4640      	mov	r0, r8
 8008c04:	4649      	mov	r1, r9
 8008c06:	2200      	movs	r2, #0
 8008c08:	f7f7 fcfe 	bl	8000608 <__aeabi_dmul>
 8008c0c:	4680      	mov	r8, r0
 8008c0e:	4689      	mov	r9, r1
 8008c10:	e7c6      	b.n	8008ba0 <_dtoa_r+0x510>
 8008c12:	4650      	mov	r0, sl
 8008c14:	4659      	mov	r1, fp
 8008c16:	f7f7 fcf7 	bl	8000608 <__aeabi_dmul>
 8008c1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008c1c:	9d01      	ldr	r5, [sp, #4]
 8008c1e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008c20:	4682      	mov	sl, r0
 8008c22:	468b      	mov	fp, r1
 8008c24:	4649      	mov	r1, r9
 8008c26:	4640      	mov	r0, r8
 8008c28:	f7f7 ff9e 	bl	8000b68 <__aeabi_d2iz>
 8008c2c:	4606      	mov	r6, r0
 8008c2e:	f7f7 fc81 	bl	8000534 <__aeabi_i2d>
 8008c32:	3630      	adds	r6, #48	; 0x30
 8008c34:	4602      	mov	r2, r0
 8008c36:	460b      	mov	r3, r1
 8008c38:	4640      	mov	r0, r8
 8008c3a:	4649      	mov	r1, r9
 8008c3c:	f7f7 fb2c 	bl	8000298 <__aeabi_dsub>
 8008c40:	f805 6b01 	strb.w	r6, [r5], #1
 8008c44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008c46:	429d      	cmp	r5, r3
 8008c48:	4680      	mov	r8, r0
 8008c4a:	4689      	mov	r9, r1
 8008c4c:	f04f 0200 	mov.w	r2, #0
 8008c50:	d124      	bne.n	8008c9c <_dtoa_r+0x60c>
 8008c52:	4b1b      	ldr	r3, [pc, #108]	; (8008cc0 <_dtoa_r+0x630>)
 8008c54:	4650      	mov	r0, sl
 8008c56:	4659      	mov	r1, fp
 8008c58:	f7f7 fb20 	bl	800029c <__adddf3>
 8008c5c:	4602      	mov	r2, r0
 8008c5e:	460b      	mov	r3, r1
 8008c60:	4640      	mov	r0, r8
 8008c62:	4649      	mov	r1, r9
 8008c64:	f7f7 ff60 	bl	8000b28 <__aeabi_dcmpgt>
 8008c68:	2800      	cmp	r0, #0
 8008c6a:	d173      	bne.n	8008d54 <_dtoa_r+0x6c4>
 8008c6c:	4652      	mov	r2, sl
 8008c6e:	465b      	mov	r3, fp
 8008c70:	4913      	ldr	r1, [pc, #76]	; (8008cc0 <_dtoa_r+0x630>)
 8008c72:	2000      	movs	r0, #0
 8008c74:	f7f7 fb10 	bl	8000298 <__aeabi_dsub>
 8008c78:	4602      	mov	r2, r0
 8008c7a:	460b      	mov	r3, r1
 8008c7c:	4640      	mov	r0, r8
 8008c7e:	4649      	mov	r1, r9
 8008c80:	f7f7 ff34 	bl	8000aec <__aeabi_dcmplt>
 8008c84:	2800      	cmp	r0, #0
 8008c86:	f43f af35 	beq.w	8008af4 <_dtoa_r+0x464>
 8008c8a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008c8c:	1e6b      	subs	r3, r5, #1
 8008c8e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008c90:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008c94:	2b30      	cmp	r3, #48	; 0x30
 8008c96:	d0f8      	beq.n	8008c8a <_dtoa_r+0x5fa>
 8008c98:	9700      	str	r7, [sp, #0]
 8008c9a:	e049      	b.n	8008d30 <_dtoa_r+0x6a0>
 8008c9c:	4b05      	ldr	r3, [pc, #20]	; (8008cb4 <_dtoa_r+0x624>)
 8008c9e:	f7f7 fcb3 	bl	8000608 <__aeabi_dmul>
 8008ca2:	4680      	mov	r8, r0
 8008ca4:	4689      	mov	r9, r1
 8008ca6:	e7bd      	b.n	8008c24 <_dtoa_r+0x594>
 8008ca8:	0800a790 	.word	0x0800a790
 8008cac:	0800a768 	.word	0x0800a768
 8008cb0:	3ff00000 	.word	0x3ff00000
 8008cb4:	40240000 	.word	0x40240000
 8008cb8:	401c0000 	.word	0x401c0000
 8008cbc:	40140000 	.word	0x40140000
 8008cc0:	3fe00000 	.word	0x3fe00000
 8008cc4:	9d01      	ldr	r5, [sp, #4]
 8008cc6:	4656      	mov	r6, sl
 8008cc8:	465f      	mov	r7, fp
 8008cca:	4642      	mov	r2, r8
 8008ccc:	464b      	mov	r3, r9
 8008cce:	4630      	mov	r0, r6
 8008cd0:	4639      	mov	r1, r7
 8008cd2:	f7f7 fdc3 	bl	800085c <__aeabi_ddiv>
 8008cd6:	f7f7 ff47 	bl	8000b68 <__aeabi_d2iz>
 8008cda:	4682      	mov	sl, r0
 8008cdc:	f7f7 fc2a 	bl	8000534 <__aeabi_i2d>
 8008ce0:	4642      	mov	r2, r8
 8008ce2:	464b      	mov	r3, r9
 8008ce4:	f7f7 fc90 	bl	8000608 <__aeabi_dmul>
 8008ce8:	4602      	mov	r2, r0
 8008cea:	460b      	mov	r3, r1
 8008cec:	4630      	mov	r0, r6
 8008cee:	4639      	mov	r1, r7
 8008cf0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8008cf4:	f7f7 fad0 	bl	8000298 <__aeabi_dsub>
 8008cf8:	f805 6b01 	strb.w	r6, [r5], #1
 8008cfc:	9e01      	ldr	r6, [sp, #4]
 8008cfe:	9f03      	ldr	r7, [sp, #12]
 8008d00:	1bae      	subs	r6, r5, r6
 8008d02:	42b7      	cmp	r7, r6
 8008d04:	4602      	mov	r2, r0
 8008d06:	460b      	mov	r3, r1
 8008d08:	d135      	bne.n	8008d76 <_dtoa_r+0x6e6>
 8008d0a:	f7f7 fac7 	bl	800029c <__adddf3>
 8008d0e:	4642      	mov	r2, r8
 8008d10:	464b      	mov	r3, r9
 8008d12:	4606      	mov	r6, r0
 8008d14:	460f      	mov	r7, r1
 8008d16:	f7f7 ff07 	bl	8000b28 <__aeabi_dcmpgt>
 8008d1a:	b9d0      	cbnz	r0, 8008d52 <_dtoa_r+0x6c2>
 8008d1c:	4642      	mov	r2, r8
 8008d1e:	464b      	mov	r3, r9
 8008d20:	4630      	mov	r0, r6
 8008d22:	4639      	mov	r1, r7
 8008d24:	f7f7 fed8 	bl	8000ad8 <__aeabi_dcmpeq>
 8008d28:	b110      	cbz	r0, 8008d30 <_dtoa_r+0x6a0>
 8008d2a:	f01a 0f01 	tst.w	sl, #1
 8008d2e:	d110      	bne.n	8008d52 <_dtoa_r+0x6c2>
 8008d30:	4620      	mov	r0, r4
 8008d32:	ee18 1a10 	vmov	r1, s16
 8008d36:	f000 fd13 	bl	8009760 <_Bfree>
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	9800      	ldr	r0, [sp, #0]
 8008d3e:	702b      	strb	r3, [r5, #0]
 8008d40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008d42:	3001      	adds	r0, #1
 8008d44:	6018      	str	r0, [r3, #0]
 8008d46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	f43f acf1 	beq.w	8008730 <_dtoa_r+0xa0>
 8008d4e:	601d      	str	r5, [r3, #0]
 8008d50:	e4ee      	b.n	8008730 <_dtoa_r+0xa0>
 8008d52:	9f00      	ldr	r7, [sp, #0]
 8008d54:	462b      	mov	r3, r5
 8008d56:	461d      	mov	r5, r3
 8008d58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008d5c:	2a39      	cmp	r2, #57	; 0x39
 8008d5e:	d106      	bne.n	8008d6e <_dtoa_r+0x6de>
 8008d60:	9a01      	ldr	r2, [sp, #4]
 8008d62:	429a      	cmp	r2, r3
 8008d64:	d1f7      	bne.n	8008d56 <_dtoa_r+0x6c6>
 8008d66:	9901      	ldr	r1, [sp, #4]
 8008d68:	2230      	movs	r2, #48	; 0x30
 8008d6a:	3701      	adds	r7, #1
 8008d6c:	700a      	strb	r2, [r1, #0]
 8008d6e:	781a      	ldrb	r2, [r3, #0]
 8008d70:	3201      	adds	r2, #1
 8008d72:	701a      	strb	r2, [r3, #0]
 8008d74:	e790      	b.n	8008c98 <_dtoa_r+0x608>
 8008d76:	4ba6      	ldr	r3, [pc, #664]	; (8009010 <_dtoa_r+0x980>)
 8008d78:	2200      	movs	r2, #0
 8008d7a:	f7f7 fc45 	bl	8000608 <__aeabi_dmul>
 8008d7e:	2200      	movs	r2, #0
 8008d80:	2300      	movs	r3, #0
 8008d82:	4606      	mov	r6, r0
 8008d84:	460f      	mov	r7, r1
 8008d86:	f7f7 fea7 	bl	8000ad8 <__aeabi_dcmpeq>
 8008d8a:	2800      	cmp	r0, #0
 8008d8c:	d09d      	beq.n	8008cca <_dtoa_r+0x63a>
 8008d8e:	e7cf      	b.n	8008d30 <_dtoa_r+0x6a0>
 8008d90:	9a08      	ldr	r2, [sp, #32]
 8008d92:	2a00      	cmp	r2, #0
 8008d94:	f000 80d7 	beq.w	8008f46 <_dtoa_r+0x8b6>
 8008d98:	9a06      	ldr	r2, [sp, #24]
 8008d9a:	2a01      	cmp	r2, #1
 8008d9c:	f300 80ba 	bgt.w	8008f14 <_dtoa_r+0x884>
 8008da0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008da2:	2a00      	cmp	r2, #0
 8008da4:	f000 80b2 	beq.w	8008f0c <_dtoa_r+0x87c>
 8008da8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008dac:	9e07      	ldr	r6, [sp, #28]
 8008dae:	9d04      	ldr	r5, [sp, #16]
 8008db0:	9a04      	ldr	r2, [sp, #16]
 8008db2:	441a      	add	r2, r3
 8008db4:	9204      	str	r2, [sp, #16]
 8008db6:	9a05      	ldr	r2, [sp, #20]
 8008db8:	2101      	movs	r1, #1
 8008dba:	441a      	add	r2, r3
 8008dbc:	4620      	mov	r0, r4
 8008dbe:	9205      	str	r2, [sp, #20]
 8008dc0:	f000 fd86 	bl	80098d0 <__i2b>
 8008dc4:	4607      	mov	r7, r0
 8008dc6:	2d00      	cmp	r5, #0
 8008dc8:	dd0c      	ble.n	8008de4 <_dtoa_r+0x754>
 8008dca:	9b05      	ldr	r3, [sp, #20]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	dd09      	ble.n	8008de4 <_dtoa_r+0x754>
 8008dd0:	42ab      	cmp	r3, r5
 8008dd2:	9a04      	ldr	r2, [sp, #16]
 8008dd4:	bfa8      	it	ge
 8008dd6:	462b      	movge	r3, r5
 8008dd8:	1ad2      	subs	r2, r2, r3
 8008dda:	9204      	str	r2, [sp, #16]
 8008ddc:	9a05      	ldr	r2, [sp, #20]
 8008dde:	1aed      	subs	r5, r5, r3
 8008de0:	1ad3      	subs	r3, r2, r3
 8008de2:	9305      	str	r3, [sp, #20]
 8008de4:	9b07      	ldr	r3, [sp, #28]
 8008de6:	b31b      	cbz	r3, 8008e30 <_dtoa_r+0x7a0>
 8008de8:	9b08      	ldr	r3, [sp, #32]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	f000 80af 	beq.w	8008f4e <_dtoa_r+0x8be>
 8008df0:	2e00      	cmp	r6, #0
 8008df2:	dd13      	ble.n	8008e1c <_dtoa_r+0x78c>
 8008df4:	4639      	mov	r1, r7
 8008df6:	4632      	mov	r2, r6
 8008df8:	4620      	mov	r0, r4
 8008dfa:	f000 fe29 	bl	8009a50 <__pow5mult>
 8008dfe:	ee18 2a10 	vmov	r2, s16
 8008e02:	4601      	mov	r1, r0
 8008e04:	4607      	mov	r7, r0
 8008e06:	4620      	mov	r0, r4
 8008e08:	f000 fd78 	bl	80098fc <__multiply>
 8008e0c:	ee18 1a10 	vmov	r1, s16
 8008e10:	4680      	mov	r8, r0
 8008e12:	4620      	mov	r0, r4
 8008e14:	f000 fca4 	bl	8009760 <_Bfree>
 8008e18:	ee08 8a10 	vmov	s16, r8
 8008e1c:	9b07      	ldr	r3, [sp, #28]
 8008e1e:	1b9a      	subs	r2, r3, r6
 8008e20:	d006      	beq.n	8008e30 <_dtoa_r+0x7a0>
 8008e22:	ee18 1a10 	vmov	r1, s16
 8008e26:	4620      	mov	r0, r4
 8008e28:	f000 fe12 	bl	8009a50 <__pow5mult>
 8008e2c:	ee08 0a10 	vmov	s16, r0
 8008e30:	2101      	movs	r1, #1
 8008e32:	4620      	mov	r0, r4
 8008e34:	f000 fd4c 	bl	80098d0 <__i2b>
 8008e38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	4606      	mov	r6, r0
 8008e3e:	f340 8088 	ble.w	8008f52 <_dtoa_r+0x8c2>
 8008e42:	461a      	mov	r2, r3
 8008e44:	4601      	mov	r1, r0
 8008e46:	4620      	mov	r0, r4
 8008e48:	f000 fe02 	bl	8009a50 <__pow5mult>
 8008e4c:	9b06      	ldr	r3, [sp, #24]
 8008e4e:	2b01      	cmp	r3, #1
 8008e50:	4606      	mov	r6, r0
 8008e52:	f340 8081 	ble.w	8008f58 <_dtoa_r+0x8c8>
 8008e56:	f04f 0800 	mov.w	r8, #0
 8008e5a:	6933      	ldr	r3, [r6, #16]
 8008e5c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008e60:	6918      	ldr	r0, [r3, #16]
 8008e62:	f000 fce5 	bl	8009830 <__hi0bits>
 8008e66:	f1c0 0020 	rsb	r0, r0, #32
 8008e6a:	9b05      	ldr	r3, [sp, #20]
 8008e6c:	4418      	add	r0, r3
 8008e6e:	f010 001f 	ands.w	r0, r0, #31
 8008e72:	f000 8092 	beq.w	8008f9a <_dtoa_r+0x90a>
 8008e76:	f1c0 0320 	rsb	r3, r0, #32
 8008e7a:	2b04      	cmp	r3, #4
 8008e7c:	f340 808a 	ble.w	8008f94 <_dtoa_r+0x904>
 8008e80:	f1c0 001c 	rsb	r0, r0, #28
 8008e84:	9b04      	ldr	r3, [sp, #16]
 8008e86:	4403      	add	r3, r0
 8008e88:	9304      	str	r3, [sp, #16]
 8008e8a:	9b05      	ldr	r3, [sp, #20]
 8008e8c:	4403      	add	r3, r0
 8008e8e:	4405      	add	r5, r0
 8008e90:	9305      	str	r3, [sp, #20]
 8008e92:	9b04      	ldr	r3, [sp, #16]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	dd07      	ble.n	8008ea8 <_dtoa_r+0x818>
 8008e98:	ee18 1a10 	vmov	r1, s16
 8008e9c:	461a      	mov	r2, r3
 8008e9e:	4620      	mov	r0, r4
 8008ea0:	f000 fe30 	bl	8009b04 <__lshift>
 8008ea4:	ee08 0a10 	vmov	s16, r0
 8008ea8:	9b05      	ldr	r3, [sp, #20]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	dd05      	ble.n	8008eba <_dtoa_r+0x82a>
 8008eae:	4631      	mov	r1, r6
 8008eb0:	461a      	mov	r2, r3
 8008eb2:	4620      	mov	r0, r4
 8008eb4:	f000 fe26 	bl	8009b04 <__lshift>
 8008eb8:	4606      	mov	r6, r0
 8008eba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d06e      	beq.n	8008f9e <_dtoa_r+0x90e>
 8008ec0:	ee18 0a10 	vmov	r0, s16
 8008ec4:	4631      	mov	r1, r6
 8008ec6:	f000 fe8d 	bl	8009be4 <__mcmp>
 8008eca:	2800      	cmp	r0, #0
 8008ecc:	da67      	bge.n	8008f9e <_dtoa_r+0x90e>
 8008ece:	9b00      	ldr	r3, [sp, #0]
 8008ed0:	3b01      	subs	r3, #1
 8008ed2:	ee18 1a10 	vmov	r1, s16
 8008ed6:	9300      	str	r3, [sp, #0]
 8008ed8:	220a      	movs	r2, #10
 8008eda:	2300      	movs	r3, #0
 8008edc:	4620      	mov	r0, r4
 8008ede:	f000 fc61 	bl	80097a4 <__multadd>
 8008ee2:	9b08      	ldr	r3, [sp, #32]
 8008ee4:	ee08 0a10 	vmov	s16, r0
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	f000 81b1 	beq.w	8009250 <_dtoa_r+0xbc0>
 8008eee:	2300      	movs	r3, #0
 8008ef0:	4639      	mov	r1, r7
 8008ef2:	220a      	movs	r2, #10
 8008ef4:	4620      	mov	r0, r4
 8008ef6:	f000 fc55 	bl	80097a4 <__multadd>
 8008efa:	9b02      	ldr	r3, [sp, #8]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	4607      	mov	r7, r0
 8008f00:	f300 808e 	bgt.w	8009020 <_dtoa_r+0x990>
 8008f04:	9b06      	ldr	r3, [sp, #24]
 8008f06:	2b02      	cmp	r3, #2
 8008f08:	dc51      	bgt.n	8008fae <_dtoa_r+0x91e>
 8008f0a:	e089      	b.n	8009020 <_dtoa_r+0x990>
 8008f0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008f0e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008f12:	e74b      	b.n	8008dac <_dtoa_r+0x71c>
 8008f14:	9b03      	ldr	r3, [sp, #12]
 8008f16:	1e5e      	subs	r6, r3, #1
 8008f18:	9b07      	ldr	r3, [sp, #28]
 8008f1a:	42b3      	cmp	r3, r6
 8008f1c:	bfbf      	itttt	lt
 8008f1e:	9b07      	ldrlt	r3, [sp, #28]
 8008f20:	9607      	strlt	r6, [sp, #28]
 8008f22:	1af2      	sublt	r2, r6, r3
 8008f24:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008f26:	bfb6      	itet	lt
 8008f28:	189b      	addlt	r3, r3, r2
 8008f2a:	1b9e      	subge	r6, r3, r6
 8008f2c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008f2e:	9b03      	ldr	r3, [sp, #12]
 8008f30:	bfb8      	it	lt
 8008f32:	2600      	movlt	r6, #0
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	bfb7      	itett	lt
 8008f38:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008f3c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008f40:	1a9d      	sublt	r5, r3, r2
 8008f42:	2300      	movlt	r3, #0
 8008f44:	e734      	b.n	8008db0 <_dtoa_r+0x720>
 8008f46:	9e07      	ldr	r6, [sp, #28]
 8008f48:	9d04      	ldr	r5, [sp, #16]
 8008f4a:	9f08      	ldr	r7, [sp, #32]
 8008f4c:	e73b      	b.n	8008dc6 <_dtoa_r+0x736>
 8008f4e:	9a07      	ldr	r2, [sp, #28]
 8008f50:	e767      	b.n	8008e22 <_dtoa_r+0x792>
 8008f52:	9b06      	ldr	r3, [sp, #24]
 8008f54:	2b01      	cmp	r3, #1
 8008f56:	dc18      	bgt.n	8008f8a <_dtoa_r+0x8fa>
 8008f58:	f1ba 0f00 	cmp.w	sl, #0
 8008f5c:	d115      	bne.n	8008f8a <_dtoa_r+0x8fa>
 8008f5e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008f62:	b993      	cbnz	r3, 8008f8a <_dtoa_r+0x8fa>
 8008f64:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008f68:	0d1b      	lsrs	r3, r3, #20
 8008f6a:	051b      	lsls	r3, r3, #20
 8008f6c:	b183      	cbz	r3, 8008f90 <_dtoa_r+0x900>
 8008f6e:	9b04      	ldr	r3, [sp, #16]
 8008f70:	3301      	adds	r3, #1
 8008f72:	9304      	str	r3, [sp, #16]
 8008f74:	9b05      	ldr	r3, [sp, #20]
 8008f76:	3301      	adds	r3, #1
 8008f78:	9305      	str	r3, [sp, #20]
 8008f7a:	f04f 0801 	mov.w	r8, #1
 8008f7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	f47f af6a 	bne.w	8008e5a <_dtoa_r+0x7ca>
 8008f86:	2001      	movs	r0, #1
 8008f88:	e76f      	b.n	8008e6a <_dtoa_r+0x7da>
 8008f8a:	f04f 0800 	mov.w	r8, #0
 8008f8e:	e7f6      	b.n	8008f7e <_dtoa_r+0x8ee>
 8008f90:	4698      	mov	r8, r3
 8008f92:	e7f4      	b.n	8008f7e <_dtoa_r+0x8ee>
 8008f94:	f43f af7d 	beq.w	8008e92 <_dtoa_r+0x802>
 8008f98:	4618      	mov	r0, r3
 8008f9a:	301c      	adds	r0, #28
 8008f9c:	e772      	b.n	8008e84 <_dtoa_r+0x7f4>
 8008f9e:	9b03      	ldr	r3, [sp, #12]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	dc37      	bgt.n	8009014 <_dtoa_r+0x984>
 8008fa4:	9b06      	ldr	r3, [sp, #24]
 8008fa6:	2b02      	cmp	r3, #2
 8008fa8:	dd34      	ble.n	8009014 <_dtoa_r+0x984>
 8008faa:	9b03      	ldr	r3, [sp, #12]
 8008fac:	9302      	str	r3, [sp, #8]
 8008fae:	9b02      	ldr	r3, [sp, #8]
 8008fb0:	b96b      	cbnz	r3, 8008fce <_dtoa_r+0x93e>
 8008fb2:	4631      	mov	r1, r6
 8008fb4:	2205      	movs	r2, #5
 8008fb6:	4620      	mov	r0, r4
 8008fb8:	f000 fbf4 	bl	80097a4 <__multadd>
 8008fbc:	4601      	mov	r1, r0
 8008fbe:	4606      	mov	r6, r0
 8008fc0:	ee18 0a10 	vmov	r0, s16
 8008fc4:	f000 fe0e 	bl	8009be4 <__mcmp>
 8008fc8:	2800      	cmp	r0, #0
 8008fca:	f73f adbb 	bgt.w	8008b44 <_dtoa_r+0x4b4>
 8008fce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fd0:	9d01      	ldr	r5, [sp, #4]
 8008fd2:	43db      	mvns	r3, r3
 8008fd4:	9300      	str	r3, [sp, #0]
 8008fd6:	f04f 0800 	mov.w	r8, #0
 8008fda:	4631      	mov	r1, r6
 8008fdc:	4620      	mov	r0, r4
 8008fde:	f000 fbbf 	bl	8009760 <_Bfree>
 8008fe2:	2f00      	cmp	r7, #0
 8008fe4:	f43f aea4 	beq.w	8008d30 <_dtoa_r+0x6a0>
 8008fe8:	f1b8 0f00 	cmp.w	r8, #0
 8008fec:	d005      	beq.n	8008ffa <_dtoa_r+0x96a>
 8008fee:	45b8      	cmp	r8, r7
 8008ff0:	d003      	beq.n	8008ffa <_dtoa_r+0x96a>
 8008ff2:	4641      	mov	r1, r8
 8008ff4:	4620      	mov	r0, r4
 8008ff6:	f000 fbb3 	bl	8009760 <_Bfree>
 8008ffa:	4639      	mov	r1, r7
 8008ffc:	4620      	mov	r0, r4
 8008ffe:	f000 fbaf 	bl	8009760 <_Bfree>
 8009002:	e695      	b.n	8008d30 <_dtoa_r+0x6a0>
 8009004:	2600      	movs	r6, #0
 8009006:	4637      	mov	r7, r6
 8009008:	e7e1      	b.n	8008fce <_dtoa_r+0x93e>
 800900a:	9700      	str	r7, [sp, #0]
 800900c:	4637      	mov	r7, r6
 800900e:	e599      	b.n	8008b44 <_dtoa_r+0x4b4>
 8009010:	40240000 	.word	0x40240000
 8009014:	9b08      	ldr	r3, [sp, #32]
 8009016:	2b00      	cmp	r3, #0
 8009018:	f000 80ca 	beq.w	80091b0 <_dtoa_r+0xb20>
 800901c:	9b03      	ldr	r3, [sp, #12]
 800901e:	9302      	str	r3, [sp, #8]
 8009020:	2d00      	cmp	r5, #0
 8009022:	dd05      	ble.n	8009030 <_dtoa_r+0x9a0>
 8009024:	4639      	mov	r1, r7
 8009026:	462a      	mov	r2, r5
 8009028:	4620      	mov	r0, r4
 800902a:	f000 fd6b 	bl	8009b04 <__lshift>
 800902e:	4607      	mov	r7, r0
 8009030:	f1b8 0f00 	cmp.w	r8, #0
 8009034:	d05b      	beq.n	80090ee <_dtoa_r+0xa5e>
 8009036:	6879      	ldr	r1, [r7, #4]
 8009038:	4620      	mov	r0, r4
 800903a:	f000 fb51 	bl	80096e0 <_Balloc>
 800903e:	4605      	mov	r5, r0
 8009040:	b928      	cbnz	r0, 800904e <_dtoa_r+0x9be>
 8009042:	4b87      	ldr	r3, [pc, #540]	; (8009260 <_dtoa_r+0xbd0>)
 8009044:	4602      	mov	r2, r0
 8009046:	f240 21ea 	movw	r1, #746	; 0x2ea
 800904a:	f7ff bb3b 	b.w	80086c4 <_dtoa_r+0x34>
 800904e:	693a      	ldr	r2, [r7, #16]
 8009050:	3202      	adds	r2, #2
 8009052:	0092      	lsls	r2, r2, #2
 8009054:	f107 010c 	add.w	r1, r7, #12
 8009058:	300c      	adds	r0, #12
 800905a:	f000 fb33 	bl	80096c4 <memcpy>
 800905e:	2201      	movs	r2, #1
 8009060:	4629      	mov	r1, r5
 8009062:	4620      	mov	r0, r4
 8009064:	f000 fd4e 	bl	8009b04 <__lshift>
 8009068:	9b01      	ldr	r3, [sp, #4]
 800906a:	f103 0901 	add.w	r9, r3, #1
 800906e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8009072:	4413      	add	r3, r2
 8009074:	9305      	str	r3, [sp, #20]
 8009076:	f00a 0301 	and.w	r3, sl, #1
 800907a:	46b8      	mov	r8, r7
 800907c:	9304      	str	r3, [sp, #16]
 800907e:	4607      	mov	r7, r0
 8009080:	4631      	mov	r1, r6
 8009082:	ee18 0a10 	vmov	r0, s16
 8009086:	f7ff fa76 	bl	8008576 <quorem>
 800908a:	4641      	mov	r1, r8
 800908c:	9002      	str	r0, [sp, #8]
 800908e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009092:	ee18 0a10 	vmov	r0, s16
 8009096:	f000 fda5 	bl	8009be4 <__mcmp>
 800909a:	463a      	mov	r2, r7
 800909c:	9003      	str	r0, [sp, #12]
 800909e:	4631      	mov	r1, r6
 80090a0:	4620      	mov	r0, r4
 80090a2:	f000 fdbb 	bl	8009c1c <__mdiff>
 80090a6:	68c2      	ldr	r2, [r0, #12]
 80090a8:	f109 3bff 	add.w	fp, r9, #4294967295
 80090ac:	4605      	mov	r5, r0
 80090ae:	bb02      	cbnz	r2, 80090f2 <_dtoa_r+0xa62>
 80090b0:	4601      	mov	r1, r0
 80090b2:	ee18 0a10 	vmov	r0, s16
 80090b6:	f000 fd95 	bl	8009be4 <__mcmp>
 80090ba:	4602      	mov	r2, r0
 80090bc:	4629      	mov	r1, r5
 80090be:	4620      	mov	r0, r4
 80090c0:	9207      	str	r2, [sp, #28]
 80090c2:	f000 fb4d 	bl	8009760 <_Bfree>
 80090c6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80090ca:	ea43 0102 	orr.w	r1, r3, r2
 80090ce:	9b04      	ldr	r3, [sp, #16]
 80090d0:	430b      	orrs	r3, r1
 80090d2:	464d      	mov	r5, r9
 80090d4:	d10f      	bne.n	80090f6 <_dtoa_r+0xa66>
 80090d6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80090da:	d02a      	beq.n	8009132 <_dtoa_r+0xaa2>
 80090dc:	9b03      	ldr	r3, [sp, #12]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	dd02      	ble.n	80090e8 <_dtoa_r+0xa58>
 80090e2:	9b02      	ldr	r3, [sp, #8]
 80090e4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80090e8:	f88b a000 	strb.w	sl, [fp]
 80090ec:	e775      	b.n	8008fda <_dtoa_r+0x94a>
 80090ee:	4638      	mov	r0, r7
 80090f0:	e7ba      	b.n	8009068 <_dtoa_r+0x9d8>
 80090f2:	2201      	movs	r2, #1
 80090f4:	e7e2      	b.n	80090bc <_dtoa_r+0xa2c>
 80090f6:	9b03      	ldr	r3, [sp, #12]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	db04      	blt.n	8009106 <_dtoa_r+0xa76>
 80090fc:	9906      	ldr	r1, [sp, #24]
 80090fe:	430b      	orrs	r3, r1
 8009100:	9904      	ldr	r1, [sp, #16]
 8009102:	430b      	orrs	r3, r1
 8009104:	d122      	bne.n	800914c <_dtoa_r+0xabc>
 8009106:	2a00      	cmp	r2, #0
 8009108:	ddee      	ble.n	80090e8 <_dtoa_r+0xa58>
 800910a:	ee18 1a10 	vmov	r1, s16
 800910e:	2201      	movs	r2, #1
 8009110:	4620      	mov	r0, r4
 8009112:	f000 fcf7 	bl	8009b04 <__lshift>
 8009116:	4631      	mov	r1, r6
 8009118:	ee08 0a10 	vmov	s16, r0
 800911c:	f000 fd62 	bl	8009be4 <__mcmp>
 8009120:	2800      	cmp	r0, #0
 8009122:	dc03      	bgt.n	800912c <_dtoa_r+0xa9c>
 8009124:	d1e0      	bne.n	80090e8 <_dtoa_r+0xa58>
 8009126:	f01a 0f01 	tst.w	sl, #1
 800912a:	d0dd      	beq.n	80090e8 <_dtoa_r+0xa58>
 800912c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009130:	d1d7      	bne.n	80090e2 <_dtoa_r+0xa52>
 8009132:	2339      	movs	r3, #57	; 0x39
 8009134:	f88b 3000 	strb.w	r3, [fp]
 8009138:	462b      	mov	r3, r5
 800913a:	461d      	mov	r5, r3
 800913c:	3b01      	subs	r3, #1
 800913e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009142:	2a39      	cmp	r2, #57	; 0x39
 8009144:	d071      	beq.n	800922a <_dtoa_r+0xb9a>
 8009146:	3201      	adds	r2, #1
 8009148:	701a      	strb	r2, [r3, #0]
 800914a:	e746      	b.n	8008fda <_dtoa_r+0x94a>
 800914c:	2a00      	cmp	r2, #0
 800914e:	dd07      	ble.n	8009160 <_dtoa_r+0xad0>
 8009150:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009154:	d0ed      	beq.n	8009132 <_dtoa_r+0xaa2>
 8009156:	f10a 0301 	add.w	r3, sl, #1
 800915a:	f88b 3000 	strb.w	r3, [fp]
 800915e:	e73c      	b.n	8008fda <_dtoa_r+0x94a>
 8009160:	9b05      	ldr	r3, [sp, #20]
 8009162:	f809 ac01 	strb.w	sl, [r9, #-1]
 8009166:	4599      	cmp	r9, r3
 8009168:	d047      	beq.n	80091fa <_dtoa_r+0xb6a>
 800916a:	ee18 1a10 	vmov	r1, s16
 800916e:	2300      	movs	r3, #0
 8009170:	220a      	movs	r2, #10
 8009172:	4620      	mov	r0, r4
 8009174:	f000 fb16 	bl	80097a4 <__multadd>
 8009178:	45b8      	cmp	r8, r7
 800917a:	ee08 0a10 	vmov	s16, r0
 800917e:	f04f 0300 	mov.w	r3, #0
 8009182:	f04f 020a 	mov.w	r2, #10
 8009186:	4641      	mov	r1, r8
 8009188:	4620      	mov	r0, r4
 800918a:	d106      	bne.n	800919a <_dtoa_r+0xb0a>
 800918c:	f000 fb0a 	bl	80097a4 <__multadd>
 8009190:	4680      	mov	r8, r0
 8009192:	4607      	mov	r7, r0
 8009194:	f109 0901 	add.w	r9, r9, #1
 8009198:	e772      	b.n	8009080 <_dtoa_r+0x9f0>
 800919a:	f000 fb03 	bl	80097a4 <__multadd>
 800919e:	4639      	mov	r1, r7
 80091a0:	4680      	mov	r8, r0
 80091a2:	2300      	movs	r3, #0
 80091a4:	220a      	movs	r2, #10
 80091a6:	4620      	mov	r0, r4
 80091a8:	f000 fafc 	bl	80097a4 <__multadd>
 80091ac:	4607      	mov	r7, r0
 80091ae:	e7f1      	b.n	8009194 <_dtoa_r+0xb04>
 80091b0:	9b03      	ldr	r3, [sp, #12]
 80091b2:	9302      	str	r3, [sp, #8]
 80091b4:	9d01      	ldr	r5, [sp, #4]
 80091b6:	ee18 0a10 	vmov	r0, s16
 80091ba:	4631      	mov	r1, r6
 80091bc:	f7ff f9db 	bl	8008576 <quorem>
 80091c0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80091c4:	9b01      	ldr	r3, [sp, #4]
 80091c6:	f805 ab01 	strb.w	sl, [r5], #1
 80091ca:	1aea      	subs	r2, r5, r3
 80091cc:	9b02      	ldr	r3, [sp, #8]
 80091ce:	4293      	cmp	r3, r2
 80091d0:	dd09      	ble.n	80091e6 <_dtoa_r+0xb56>
 80091d2:	ee18 1a10 	vmov	r1, s16
 80091d6:	2300      	movs	r3, #0
 80091d8:	220a      	movs	r2, #10
 80091da:	4620      	mov	r0, r4
 80091dc:	f000 fae2 	bl	80097a4 <__multadd>
 80091e0:	ee08 0a10 	vmov	s16, r0
 80091e4:	e7e7      	b.n	80091b6 <_dtoa_r+0xb26>
 80091e6:	9b02      	ldr	r3, [sp, #8]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	bfc8      	it	gt
 80091ec:	461d      	movgt	r5, r3
 80091ee:	9b01      	ldr	r3, [sp, #4]
 80091f0:	bfd8      	it	le
 80091f2:	2501      	movle	r5, #1
 80091f4:	441d      	add	r5, r3
 80091f6:	f04f 0800 	mov.w	r8, #0
 80091fa:	ee18 1a10 	vmov	r1, s16
 80091fe:	2201      	movs	r2, #1
 8009200:	4620      	mov	r0, r4
 8009202:	f000 fc7f 	bl	8009b04 <__lshift>
 8009206:	4631      	mov	r1, r6
 8009208:	ee08 0a10 	vmov	s16, r0
 800920c:	f000 fcea 	bl	8009be4 <__mcmp>
 8009210:	2800      	cmp	r0, #0
 8009212:	dc91      	bgt.n	8009138 <_dtoa_r+0xaa8>
 8009214:	d102      	bne.n	800921c <_dtoa_r+0xb8c>
 8009216:	f01a 0f01 	tst.w	sl, #1
 800921a:	d18d      	bne.n	8009138 <_dtoa_r+0xaa8>
 800921c:	462b      	mov	r3, r5
 800921e:	461d      	mov	r5, r3
 8009220:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009224:	2a30      	cmp	r2, #48	; 0x30
 8009226:	d0fa      	beq.n	800921e <_dtoa_r+0xb8e>
 8009228:	e6d7      	b.n	8008fda <_dtoa_r+0x94a>
 800922a:	9a01      	ldr	r2, [sp, #4]
 800922c:	429a      	cmp	r2, r3
 800922e:	d184      	bne.n	800913a <_dtoa_r+0xaaa>
 8009230:	9b00      	ldr	r3, [sp, #0]
 8009232:	3301      	adds	r3, #1
 8009234:	9300      	str	r3, [sp, #0]
 8009236:	2331      	movs	r3, #49	; 0x31
 8009238:	7013      	strb	r3, [r2, #0]
 800923a:	e6ce      	b.n	8008fda <_dtoa_r+0x94a>
 800923c:	4b09      	ldr	r3, [pc, #36]	; (8009264 <_dtoa_r+0xbd4>)
 800923e:	f7ff ba95 	b.w	800876c <_dtoa_r+0xdc>
 8009242:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009244:	2b00      	cmp	r3, #0
 8009246:	f47f aa6e 	bne.w	8008726 <_dtoa_r+0x96>
 800924a:	4b07      	ldr	r3, [pc, #28]	; (8009268 <_dtoa_r+0xbd8>)
 800924c:	f7ff ba8e 	b.w	800876c <_dtoa_r+0xdc>
 8009250:	9b02      	ldr	r3, [sp, #8]
 8009252:	2b00      	cmp	r3, #0
 8009254:	dcae      	bgt.n	80091b4 <_dtoa_r+0xb24>
 8009256:	9b06      	ldr	r3, [sp, #24]
 8009258:	2b02      	cmp	r3, #2
 800925a:	f73f aea8 	bgt.w	8008fae <_dtoa_r+0x91e>
 800925e:	e7a9      	b.n	80091b4 <_dtoa_r+0xb24>
 8009260:	0800a694 	.word	0x0800a694
 8009264:	0800a5f1 	.word	0x0800a5f1
 8009268:	0800a615 	.word	0x0800a615

0800926c <__sflush_r>:
 800926c:	898a      	ldrh	r2, [r1, #12]
 800926e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009272:	4605      	mov	r5, r0
 8009274:	0710      	lsls	r0, r2, #28
 8009276:	460c      	mov	r4, r1
 8009278:	d458      	bmi.n	800932c <__sflush_r+0xc0>
 800927a:	684b      	ldr	r3, [r1, #4]
 800927c:	2b00      	cmp	r3, #0
 800927e:	dc05      	bgt.n	800928c <__sflush_r+0x20>
 8009280:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009282:	2b00      	cmp	r3, #0
 8009284:	dc02      	bgt.n	800928c <__sflush_r+0x20>
 8009286:	2000      	movs	r0, #0
 8009288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800928c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800928e:	2e00      	cmp	r6, #0
 8009290:	d0f9      	beq.n	8009286 <__sflush_r+0x1a>
 8009292:	2300      	movs	r3, #0
 8009294:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009298:	682f      	ldr	r7, [r5, #0]
 800929a:	602b      	str	r3, [r5, #0]
 800929c:	d032      	beq.n	8009304 <__sflush_r+0x98>
 800929e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80092a0:	89a3      	ldrh	r3, [r4, #12]
 80092a2:	075a      	lsls	r2, r3, #29
 80092a4:	d505      	bpl.n	80092b2 <__sflush_r+0x46>
 80092a6:	6863      	ldr	r3, [r4, #4]
 80092a8:	1ac0      	subs	r0, r0, r3
 80092aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80092ac:	b10b      	cbz	r3, 80092b2 <__sflush_r+0x46>
 80092ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80092b0:	1ac0      	subs	r0, r0, r3
 80092b2:	2300      	movs	r3, #0
 80092b4:	4602      	mov	r2, r0
 80092b6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80092b8:	6a21      	ldr	r1, [r4, #32]
 80092ba:	4628      	mov	r0, r5
 80092bc:	47b0      	blx	r6
 80092be:	1c43      	adds	r3, r0, #1
 80092c0:	89a3      	ldrh	r3, [r4, #12]
 80092c2:	d106      	bne.n	80092d2 <__sflush_r+0x66>
 80092c4:	6829      	ldr	r1, [r5, #0]
 80092c6:	291d      	cmp	r1, #29
 80092c8:	d82c      	bhi.n	8009324 <__sflush_r+0xb8>
 80092ca:	4a2a      	ldr	r2, [pc, #168]	; (8009374 <__sflush_r+0x108>)
 80092cc:	40ca      	lsrs	r2, r1
 80092ce:	07d6      	lsls	r6, r2, #31
 80092d0:	d528      	bpl.n	8009324 <__sflush_r+0xb8>
 80092d2:	2200      	movs	r2, #0
 80092d4:	6062      	str	r2, [r4, #4]
 80092d6:	04d9      	lsls	r1, r3, #19
 80092d8:	6922      	ldr	r2, [r4, #16]
 80092da:	6022      	str	r2, [r4, #0]
 80092dc:	d504      	bpl.n	80092e8 <__sflush_r+0x7c>
 80092de:	1c42      	adds	r2, r0, #1
 80092e0:	d101      	bne.n	80092e6 <__sflush_r+0x7a>
 80092e2:	682b      	ldr	r3, [r5, #0]
 80092e4:	b903      	cbnz	r3, 80092e8 <__sflush_r+0x7c>
 80092e6:	6560      	str	r0, [r4, #84]	; 0x54
 80092e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80092ea:	602f      	str	r7, [r5, #0]
 80092ec:	2900      	cmp	r1, #0
 80092ee:	d0ca      	beq.n	8009286 <__sflush_r+0x1a>
 80092f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80092f4:	4299      	cmp	r1, r3
 80092f6:	d002      	beq.n	80092fe <__sflush_r+0x92>
 80092f8:	4628      	mov	r0, r5
 80092fa:	f000 fd8b 	bl	8009e14 <_free_r>
 80092fe:	2000      	movs	r0, #0
 8009300:	6360      	str	r0, [r4, #52]	; 0x34
 8009302:	e7c1      	b.n	8009288 <__sflush_r+0x1c>
 8009304:	6a21      	ldr	r1, [r4, #32]
 8009306:	2301      	movs	r3, #1
 8009308:	4628      	mov	r0, r5
 800930a:	47b0      	blx	r6
 800930c:	1c41      	adds	r1, r0, #1
 800930e:	d1c7      	bne.n	80092a0 <__sflush_r+0x34>
 8009310:	682b      	ldr	r3, [r5, #0]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d0c4      	beq.n	80092a0 <__sflush_r+0x34>
 8009316:	2b1d      	cmp	r3, #29
 8009318:	d001      	beq.n	800931e <__sflush_r+0xb2>
 800931a:	2b16      	cmp	r3, #22
 800931c:	d101      	bne.n	8009322 <__sflush_r+0xb6>
 800931e:	602f      	str	r7, [r5, #0]
 8009320:	e7b1      	b.n	8009286 <__sflush_r+0x1a>
 8009322:	89a3      	ldrh	r3, [r4, #12]
 8009324:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009328:	81a3      	strh	r3, [r4, #12]
 800932a:	e7ad      	b.n	8009288 <__sflush_r+0x1c>
 800932c:	690f      	ldr	r7, [r1, #16]
 800932e:	2f00      	cmp	r7, #0
 8009330:	d0a9      	beq.n	8009286 <__sflush_r+0x1a>
 8009332:	0793      	lsls	r3, r2, #30
 8009334:	680e      	ldr	r6, [r1, #0]
 8009336:	bf08      	it	eq
 8009338:	694b      	ldreq	r3, [r1, #20]
 800933a:	600f      	str	r7, [r1, #0]
 800933c:	bf18      	it	ne
 800933e:	2300      	movne	r3, #0
 8009340:	eba6 0807 	sub.w	r8, r6, r7
 8009344:	608b      	str	r3, [r1, #8]
 8009346:	f1b8 0f00 	cmp.w	r8, #0
 800934a:	dd9c      	ble.n	8009286 <__sflush_r+0x1a>
 800934c:	6a21      	ldr	r1, [r4, #32]
 800934e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009350:	4643      	mov	r3, r8
 8009352:	463a      	mov	r2, r7
 8009354:	4628      	mov	r0, r5
 8009356:	47b0      	blx	r6
 8009358:	2800      	cmp	r0, #0
 800935a:	dc06      	bgt.n	800936a <__sflush_r+0xfe>
 800935c:	89a3      	ldrh	r3, [r4, #12]
 800935e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009362:	81a3      	strh	r3, [r4, #12]
 8009364:	f04f 30ff 	mov.w	r0, #4294967295
 8009368:	e78e      	b.n	8009288 <__sflush_r+0x1c>
 800936a:	4407      	add	r7, r0
 800936c:	eba8 0800 	sub.w	r8, r8, r0
 8009370:	e7e9      	b.n	8009346 <__sflush_r+0xda>
 8009372:	bf00      	nop
 8009374:	20400001 	.word	0x20400001

08009378 <_fflush_r>:
 8009378:	b538      	push	{r3, r4, r5, lr}
 800937a:	690b      	ldr	r3, [r1, #16]
 800937c:	4605      	mov	r5, r0
 800937e:	460c      	mov	r4, r1
 8009380:	b913      	cbnz	r3, 8009388 <_fflush_r+0x10>
 8009382:	2500      	movs	r5, #0
 8009384:	4628      	mov	r0, r5
 8009386:	bd38      	pop	{r3, r4, r5, pc}
 8009388:	b118      	cbz	r0, 8009392 <_fflush_r+0x1a>
 800938a:	6983      	ldr	r3, [r0, #24]
 800938c:	b90b      	cbnz	r3, 8009392 <_fflush_r+0x1a>
 800938e:	f000 f887 	bl	80094a0 <__sinit>
 8009392:	4b14      	ldr	r3, [pc, #80]	; (80093e4 <_fflush_r+0x6c>)
 8009394:	429c      	cmp	r4, r3
 8009396:	d11b      	bne.n	80093d0 <_fflush_r+0x58>
 8009398:	686c      	ldr	r4, [r5, #4]
 800939a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d0ef      	beq.n	8009382 <_fflush_r+0xa>
 80093a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80093a4:	07d0      	lsls	r0, r2, #31
 80093a6:	d404      	bmi.n	80093b2 <_fflush_r+0x3a>
 80093a8:	0599      	lsls	r1, r3, #22
 80093aa:	d402      	bmi.n	80093b2 <_fflush_r+0x3a>
 80093ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80093ae:	f000 f91a 	bl	80095e6 <__retarget_lock_acquire_recursive>
 80093b2:	4628      	mov	r0, r5
 80093b4:	4621      	mov	r1, r4
 80093b6:	f7ff ff59 	bl	800926c <__sflush_r>
 80093ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80093bc:	07da      	lsls	r2, r3, #31
 80093be:	4605      	mov	r5, r0
 80093c0:	d4e0      	bmi.n	8009384 <_fflush_r+0xc>
 80093c2:	89a3      	ldrh	r3, [r4, #12]
 80093c4:	059b      	lsls	r3, r3, #22
 80093c6:	d4dd      	bmi.n	8009384 <_fflush_r+0xc>
 80093c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80093ca:	f000 f90d 	bl	80095e8 <__retarget_lock_release_recursive>
 80093ce:	e7d9      	b.n	8009384 <_fflush_r+0xc>
 80093d0:	4b05      	ldr	r3, [pc, #20]	; (80093e8 <_fflush_r+0x70>)
 80093d2:	429c      	cmp	r4, r3
 80093d4:	d101      	bne.n	80093da <_fflush_r+0x62>
 80093d6:	68ac      	ldr	r4, [r5, #8]
 80093d8:	e7df      	b.n	800939a <_fflush_r+0x22>
 80093da:	4b04      	ldr	r3, [pc, #16]	; (80093ec <_fflush_r+0x74>)
 80093dc:	429c      	cmp	r4, r3
 80093de:	bf08      	it	eq
 80093e0:	68ec      	ldreq	r4, [r5, #12]
 80093e2:	e7da      	b.n	800939a <_fflush_r+0x22>
 80093e4:	0800a6c8 	.word	0x0800a6c8
 80093e8:	0800a6e8 	.word	0x0800a6e8
 80093ec:	0800a6a8 	.word	0x0800a6a8

080093f0 <std>:
 80093f0:	2300      	movs	r3, #0
 80093f2:	b510      	push	{r4, lr}
 80093f4:	4604      	mov	r4, r0
 80093f6:	e9c0 3300 	strd	r3, r3, [r0]
 80093fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80093fe:	6083      	str	r3, [r0, #8]
 8009400:	8181      	strh	r1, [r0, #12]
 8009402:	6643      	str	r3, [r0, #100]	; 0x64
 8009404:	81c2      	strh	r2, [r0, #14]
 8009406:	6183      	str	r3, [r0, #24]
 8009408:	4619      	mov	r1, r3
 800940a:	2208      	movs	r2, #8
 800940c:	305c      	adds	r0, #92	; 0x5c
 800940e:	f7fe fa07 	bl	8007820 <memset>
 8009412:	4b05      	ldr	r3, [pc, #20]	; (8009428 <std+0x38>)
 8009414:	6263      	str	r3, [r4, #36]	; 0x24
 8009416:	4b05      	ldr	r3, [pc, #20]	; (800942c <std+0x3c>)
 8009418:	62a3      	str	r3, [r4, #40]	; 0x28
 800941a:	4b05      	ldr	r3, [pc, #20]	; (8009430 <std+0x40>)
 800941c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800941e:	4b05      	ldr	r3, [pc, #20]	; (8009434 <std+0x44>)
 8009420:	6224      	str	r4, [r4, #32]
 8009422:	6323      	str	r3, [r4, #48]	; 0x30
 8009424:	bd10      	pop	{r4, pc}
 8009426:	bf00      	nop
 8009428:	0800a07d 	.word	0x0800a07d
 800942c:	0800a09f 	.word	0x0800a09f
 8009430:	0800a0d7 	.word	0x0800a0d7
 8009434:	0800a0fb 	.word	0x0800a0fb

08009438 <_cleanup_r>:
 8009438:	4901      	ldr	r1, [pc, #4]	; (8009440 <_cleanup_r+0x8>)
 800943a:	f000 b8af 	b.w	800959c <_fwalk_reent>
 800943e:	bf00      	nop
 8009440:	08009379 	.word	0x08009379

08009444 <__sfmoreglue>:
 8009444:	b570      	push	{r4, r5, r6, lr}
 8009446:	2268      	movs	r2, #104	; 0x68
 8009448:	1e4d      	subs	r5, r1, #1
 800944a:	4355      	muls	r5, r2
 800944c:	460e      	mov	r6, r1
 800944e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009452:	f000 fd4b 	bl	8009eec <_malloc_r>
 8009456:	4604      	mov	r4, r0
 8009458:	b140      	cbz	r0, 800946c <__sfmoreglue+0x28>
 800945a:	2100      	movs	r1, #0
 800945c:	e9c0 1600 	strd	r1, r6, [r0]
 8009460:	300c      	adds	r0, #12
 8009462:	60a0      	str	r0, [r4, #8]
 8009464:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009468:	f7fe f9da 	bl	8007820 <memset>
 800946c:	4620      	mov	r0, r4
 800946e:	bd70      	pop	{r4, r5, r6, pc}

08009470 <__sfp_lock_acquire>:
 8009470:	4801      	ldr	r0, [pc, #4]	; (8009478 <__sfp_lock_acquire+0x8>)
 8009472:	f000 b8b8 	b.w	80095e6 <__retarget_lock_acquire_recursive>
 8009476:	bf00      	nop
 8009478:	2000256d 	.word	0x2000256d

0800947c <__sfp_lock_release>:
 800947c:	4801      	ldr	r0, [pc, #4]	; (8009484 <__sfp_lock_release+0x8>)
 800947e:	f000 b8b3 	b.w	80095e8 <__retarget_lock_release_recursive>
 8009482:	bf00      	nop
 8009484:	2000256d 	.word	0x2000256d

08009488 <__sinit_lock_acquire>:
 8009488:	4801      	ldr	r0, [pc, #4]	; (8009490 <__sinit_lock_acquire+0x8>)
 800948a:	f000 b8ac 	b.w	80095e6 <__retarget_lock_acquire_recursive>
 800948e:	bf00      	nop
 8009490:	2000256e 	.word	0x2000256e

08009494 <__sinit_lock_release>:
 8009494:	4801      	ldr	r0, [pc, #4]	; (800949c <__sinit_lock_release+0x8>)
 8009496:	f000 b8a7 	b.w	80095e8 <__retarget_lock_release_recursive>
 800949a:	bf00      	nop
 800949c:	2000256e 	.word	0x2000256e

080094a0 <__sinit>:
 80094a0:	b510      	push	{r4, lr}
 80094a2:	4604      	mov	r4, r0
 80094a4:	f7ff fff0 	bl	8009488 <__sinit_lock_acquire>
 80094a8:	69a3      	ldr	r3, [r4, #24]
 80094aa:	b11b      	cbz	r3, 80094b4 <__sinit+0x14>
 80094ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80094b0:	f7ff bff0 	b.w	8009494 <__sinit_lock_release>
 80094b4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80094b8:	6523      	str	r3, [r4, #80]	; 0x50
 80094ba:	4b13      	ldr	r3, [pc, #76]	; (8009508 <__sinit+0x68>)
 80094bc:	4a13      	ldr	r2, [pc, #76]	; (800950c <__sinit+0x6c>)
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	62a2      	str	r2, [r4, #40]	; 0x28
 80094c2:	42a3      	cmp	r3, r4
 80094c4:	bf04      	itt	eq
 80094c6:	2301      	moveq	r3, #1
 80094c8:	61a3      	streq	r3, [r4, #24]
 80094ca:	4620      	mov	r0, r4
 80094cc:	f000 f820 	bl	8009510 <__sfp>
 80094d0:	6060      	str	r0, [r4, #4]
 80094d2:	4620      	mov	r0, r4
 80094d4:	f000 f81c 	bl	8009510 <__sfp>
 80094d8:	60a0      	str	r0, [r4, #8]
 80094da:	4620      	mov	r0, r4
 80094dc:	f000 f818 	bl	8009510 <__sfp>
 80094e0:	2200      	movs	r2, #0
 80094e2:	60e0      	str	r0, [r4, #12]
 80094e4:	2104      	movs	r1, #4
 80094e6:	6860      	ldr	r0, [r4, #4]
 80094e8:	f7ff ff82 	bl	80093f0 <std>
 80094ec:	68a0      	ldr	r0, [r4, #8]
 80094ee:	2201      	movs	r2, #1
 80094f0:	2109      	movs	r1, #9
 80094f2:	f7ff ff7d 	bl	80093f0 <std>
 80094f6:	68e0      	ldr	r0, [r4, #12]
 80094f8:	2202      	movs	r2, #2
 80094fa:	2112      	movs	r1, #18
 80094fc:	f7ff ff78 	bl	80093f0 <std>
 8009500:	2301      	movs	r3, #1
 8009502:	61a3      	str	r3, [r4, #24]
 8009504:	e7d2      	b.n	80094ac <__sinit+0xc>
 8009506:	bf00      	nop
 8009508:	0800a5cc 	.word	0x0800a5cc
 800950c:	08009439 	.word	0x08009439

08009510 <__sfp>:
 8009510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009512:	4607      	mov	r7, r0
 8009514:	f7ff ffac 	bl	8009470 <__sfp_lock_acquire>
 8009518:	4b1e      	ldr	r3, [pc, #120]	; (8009594 <__sfp+0x84>)
 800951a:	681e      	ldr	r6, [r3, #0]
 800951c:	69b3      	ldr	r3, [r6, #24]
 800951e:	b913      	cbnz	r3, 8009526 <__sfp+0x16>
 8009520:	4630      	mov	r0, r6
 8009522:	f7ff ffbd 	bl	80094a0 <__sinit>
 8009526:	3648      	adds	r6, #72	; 0x48
 8009528:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800952c:	3b01      	subs	r3, #1
 800952e:	d503      	bpl.n	8009538 <__sfp+0x28>
 8009530:	6833      	ldr	r3, [r6, #0]
 8009532:	b30b      	cbz	r3, 8009578 <__sfp+0x68>
 8009534:	6836      	ldr	r6, [r6, #0]
 8009536:	e7f7      	b.n	8009528 <__sfp+0x18>
 8009538:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800953c:	b9d5      	cbnz	r5, 8009574 <__sfp+0x64>
 800953e:	4b16      	ldr	r3, [pc, #88]	; (8009598 <__sfp+0x88>)
 8009540:	60e3      	str	r3, [r4, #12]
 8009542:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009546:	6665      	str	r5, [r4, #100]	; 0x64
 8009548:	f000 f84c 	bl	80095e4 <__retarget_lock_init_recursive>
 800954c:	f7ff ff96 	bl	800947c <__sfp_lock_release>
 8009550:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009554:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009558:	6025      	str	r5, [r4, #0]
 800955a:	61a5      	str	r5, [r4, #24]
 800955c:	2208      	movs	r2, #8
 800955e:	4629      	mov	r1, r5
 8009560:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009564:	f7fe f95c 	bl	8007820 <memset>
 8009568:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800956c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009570:	4620      	mov	r0, r4
 8009572:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009574:	3468      	adds	r4, #104	; 0x68
 8009576:	e7d9      	b.n	800952c <__sfp+0x1c>
 8009578:	2104      	movs	r1, #4
 800957a:	4638      	mov	r0, r7
 800957c:	f7ff ff62 	bl	8009444 <__sfmoreglue>
 8009580:	4604      	mov	r4, r0
 8009582:	6030      	str	r0, [r6, #0]
 8009584:	2800      	cmp	r0, #0
 8009586:	d1d5      	bne.n	8009534 <__sfp+0x24>
 8009588:	f7ff ff78 	bl	800947c <__sfp_lock_release>
 800958c:	230c      	movs	r3, #12
 800958e:	603b      	str	r3, [r7, #0]
 8009590:	e7ee      	b.n	8009570 <__sfp+0x60>
 8009592:	bf00      	nop
 8009594:	0800a5cc 	.word	0x0800a5cc
 8009598:	ffff0001 	.word	0xffff0001

0800959c <_fwalk_reent>:
 800959c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095a0:	4606      	mov	r6, r0
 80095a2:	4688      	mov	r8, r1
 80095a4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80095a8:	2700      	movs	r7, #0
 80095aa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80095ae:	f1b9 0901 	subs.w	r9, r9, #1
 80095b2:	d505      	bpl.n	80095c0 <_fwalk_reent+0x24>
 80095b4:	6824      	ldr	r4, [r4, #0]
 80095b6:	2c00      	cmp	r4, #0
 80095b8:	d1f7      	bne.n	80095aa <_fwalk_reent+0xe>
 80095ba:	4638      	mov	r0, r7
 80095bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095c0:	89ab      	ldrh	r3, [r5, #12]
 80095c2:	2b01      	cmp	r3, #1
 80095c4:	d907      	bls.n	80095d6 <_fwalk_reent+0x3a>
 80095c6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80095ca:	3301      	adds	r3, #1
 80095cc:	d003      	beq.n	80095d6 <_fwalk_reent+0x3a>
 80095ce:	4629      	mov	r1, r5
 80095d0:	4630      	mov	r0, r6
 80095d2:	47c0      	blx	r8
 80095d4:	4307      	orrs	r7, r0
 80095d6:	3568      	adds	r5, #104	; 0x68
 80095d8:	e7e9      	b.n	80095ae <_fwalk_reent+0x12>
	...

080095dc <_localeconv_r>:
 80095dc:	4800      	ldr	r0, [pc, #0]	; (80095e0 <_localeconv_r+0x4>)
 80095de:	4770      	bx	lr
 80095e0:	20001920 	.word	0x20001920

080095e4 <__retarget_lock_init_recursive>:
 80095e4:	4770      	bx	lr

080095e6 <__retarget_lock_acquire_recursive>:
 80095e6:	4770      	bx	lr

080095e8 <__retarget_lock_release_recursive>:
 80095e8:	4770      	bx	lr

080095ea <__swhatbuf_r>:
 80095ea:	b570      	push	{r4, r5, r6, lr}
 80095ec:	460e      	mov	r6, r1
 80095ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095f2:	2900      	cmp	r1, #0
 80095f4:	b096      	sub	sp, #88	; 0x58
 80095f6:	4614      	mov	r4, r2
 80095f8:	461d      	mov	r5, r3
 80095fa:	da08      	bge.n	800960e <__swhatbuf_r+0x24>
 80095fc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009600:	2200      	movs	r2, #0
 8009602:	602a      	str	r2, [r5, #0]
 8009604:	061a      	lsls	r2, r3, #24
 8009606:	d410      	bmi.n	800962a <__swhatbuf_r+0x40>
 8009608:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800960c:	e00e      	b.n	800962c <__swhatbuf_r+0x42>
 800960e:	466a      	mov	r2, sp
 8009610:	f000 fd9a 	bl	800a148 <_fstat_r>
 8009614:	2800      	cmp	r0, #0
 8009616:	dbf1      	blt.n	80095fc <__swhatbuf_r+0x12>
 8009618:	9a01      	ldr	r2, [sp, #4]
 800961a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800961e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009622:	425a      	negs	r2, r3
 8009624:	415a      	adcs	r2, r3
 8009626:	602a      	str	r2, [r5, #0]
 8009628:	e7ee      	b.n	8009608 <__swhatbuf_r+0x1e>
 800962a:	2340      	movs	r3, #64	; 0x40
 800962c:	2000      	movs	r0, #0
 800962e:	6023      	str	r3, [r4, #0]
 8009630:	b016      	add	sp, #88	; 0x58
 8009632:	bd70      	pop	{r4, r5, r6, pc}

08009634 <__smakebuf_r>:
 8009634:	898b      	ldrh	r3, [r1, #12]
 8009636:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009638:	079d      	lsls	r5, r3, #30
 800963a:	4606      	mov	r6, r0
 800963c:	460c      	mov	r4, r1
 800963e:	d507      	bpl.n	8009650 <__smakebuf_r+0x1c>
 8009640:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009644:	6023      	str	r3, [r4, #0]
 8009646:	6123      	str	r3, [r4, #16]
 8009648:	2301      	movs	r3, #1
 800964a:	6163      	str	r3, [r4, #20]
 800964c:	b002      	add	sp, #8
 800964e:	bd70      	pop	{r4, r5, r6, pc}
 8009650:	ab01      	add	r3, sp, #4
 8009652:	466a      	mov	r2, sp
 8009654:	f7ff ffc9 	bl	80095ea <__swhatbuf_r>
 8009658:	9900      	ldr	r1, [sp, #0]
 800965a:	4605      	mov	r5, r0
 800965c:	4630      	mov	r0, r6
 800965e:	f000 fc45 	bl	8009eec <_malloc_r>
 8009662:	b948      	cbnz	r0, 8009678 <__smakebuf_r+0x44>
 8009664:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009668:	059a      	lsls	r2, r3, #22
 800966a:	d4ef      	bmi.n	800964c <__smakebuf_r+0x18>
 800966c:	f023 0303 	bic.w	r3, r3, #3
 8009670:	f043 0302 	orr.w	r3, r3, #2
 8009674:	81a3      	strh	r3, [r4, #12]
 8009676:	e7e3      	b.n	8009640 <__smakebuf_r+0xc>
 8009678:	4b0d      	ldr	r3, [pc, #52]	; (80096b0 <__smakebuf_r+0x7c>)
 800967a:	62b3      	str	r3, [r6, #40]	; 0x28
 800967c:	89a3      	ldrh	r3, [r4, #12]
 800967e:	6020      	str	r0, [r4, #0]
 8009680:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009684:	81a3      	strh	r3, [r4, #12]
 8009686:	9b00      	ldr	r3, [sp, #0]
 8009688:	6163      	str	r3, [r4, #20]
 800968a:	9b01      	ldr	r3, [sp, #4]
 800968c:	6120      	str	r0, [r4, #16]
 800968e:	b15b      	cbz	r3, 80096a8 <__smakebuf_r+0x74>
 8009690:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009694:	4630      	mov	r0, r6
 8009696:	f000 fd69 	bl	800a16c <_isatty_r>
 800969a:	b128      	cbz	r0, 80096a8 <__smakebuf_r+0x74>
 800969c:	89a3      	ldrh	r3, [r4, #12]
 800969e:	f023 0303 	bic.w	r3, r3, #3
 80096a2:	f043 0301 	orr.w	r3, r3, #1
 80096a6:	81a3      	strh	r3, [r4, #12]
 80096a8:	89a0      	ldrh	r0, [r4, #12]
 80096aa:	4305      	orrs	r5, r0
 80096ac:	81a5      	strh	r5, [r4, #12]
 80096ae:	e7cd      	b.n	800964c <__smakebuf_r+0x18>
 80096b0:	08009439 	.word	0x08009439

080096b4 <malloc>:
 80096b4:	4b02      	ldr	r3, [pc, #8]	; (80096c0 <malloc+0xc>)
 80096b6:	4601      	mov	r1, r0
 80096b8:	6818      	ldr	r0, [r3, #0]
 80096ba:	f000 bc17 	b.w	8009eec <_malloc_r>
 80096be:	bf00      	nop
 80096c0:	200017cc 	.word	0x200017cc

080096c4 <memcpy>:
 80096c4:	440a      	add	r2, r1
 80096c6:	4291      	cmp	r1, r2
 80096c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80096cc:	d100      	bne.n	80096d0 <memcpy+0xc>
 80096ce:	4770      	bx	lr
 80096d0:	b510      	push	{r4, lr}
 80096d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80096d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80096da:	4291      	cmp	r1, r2
 80096dc:	d1f9      	bne.n	80096d2 <memcpy+0xe>
 80096de:	bd10      	pop	{r4, pc}

080096e0 <_Balloc>:
 80096e0:	b570      	push	{r4, r5, r6, lr}
 80096e2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80096e4:	4604      	mov	r4, r0
 80096e6:	460d      	mov	r5, r1
 80096e8:	b976      	cbnz	r6, 8009708 <_Balloc+0x28>
 80096ea:	2010      	movs	r0, #16
 80096ec:	f7ff ffe2 	bl	80096b4 <malloc>
 80096f0:	4602      	mov	r2, r0
 80096f2:	6260      	str	r0, [r4, #36]	; 0x24
 80096f4:	b920      	cbnz	r0, 8009700 <_Balloc+0x20>
 80096f6:	4b18      	ldr	r3, [pc, #96]	; (8009758 <_Balloc+0x78>)
 80096f8:	4818      	ldr	r0, [pc, #96]	; (800975c <_Balloc+0x7c>)
 80096fa:	2166      	movs	r1, #102	; 0x66
 80096fc:	f7fe f836 	bl	800776c <__assert_func>
 8009700:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009704:	6006      	str	r6, [r0, #0]
 8009706:	60c6      	str	r6, [r0, #12]
 8009708:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800970a:	68f3      	ldr	r3, [r6, #12]
 800970c:	b183      	cbz	r3, 8009730 <_Balloc+0x50>
 800970e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009710:	68db      	ldr	r3, [r3, #12]
 8009712:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009716:	b9b8      	cbnz	r0, 8009748 <_Balloc+0x68>
 8009718:	2101      	movs	r1, #1
 800971a:	fa01 f605 	lsl.w	r6, r1, r5
 800971e:	1d72      	adds	r2, r6, #5
 8009720:	0092      	lsls	r2, r2, #2
 8009722:	4620      	mov	r0, r4
 8009724:	f000 fb60 	bl	8009de8 <_calloc_r>
 8009728:	b160      	cbz	r0, 8009744 <_Balloc+0x64>
 800972a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800972e:	e00e      	b.n	800974e <_Balloc+0x6e>
 8009730:	2221      	movs	r2, #33	; 0x21
 8009732:	2104      	movs	r1, #4
 8009734:	4620      	mov	r0, r4
 8009736:	f000 fb57 	bl	8009de8 <_calloc_r>
 800973a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800973c:	60f0      	str	r0, [r6, #12]
 800973e:	68db      	ldr	r3, [r3, #12]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d1e4      	bne.n	800970e <_Balloc+0x2e>
 8009744:	2000      	movs	r0, #0
 8009746:	bd70      	pop	{r4, r5, r6, pc}
 8009748:	6802      	ldr	r2, [r0, #0]
 800974a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800974e:	2300      	movs	r3, #0
 8009750:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009754:	e7f7      	b.n	8009746 <_Balloc+0x66>
 8009756:	bf00      	nop
 8009758:	0800a622 	.word	0x0800a622
 800975c:	0800a708 	.word	0x0800a708

08009760 <_Bfree>:
 8009760:	b570      	push	{r4, r5, r6, lr}
 8009762:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009764:	4605      	mov	r5, r0
 8009766:	460c      	mov	r4, r1
 8009768:	b976      	cbnz	r6, 8009788 <_Bfree+0x28>
 800976a:	2010      	movs	r0, #16
 800976c:	f7ff ffa2 	bl	80096b4 <malloc>
 8009770:	4602      	mov	r2, r0
 8009772:	6268      	str	r0, [r5, #36]	; 0x24
 8009774:	b920      	cbnz	r0, 8009780 <_Bfree+0x20>
 8009776:	4b09      	ldr	r3, [pc, #36]	; (800979c <_Bfree+0x3c>)
 8009778:	4809      	ldr	r0, [pc, #36]	; (80097a0 <_Bfree+0x40>)
 800977a:	218a      	movs	r1, #138	; 0x8a
 800977c:	f7fd fff6 	bl	800776c <__assert_func>
 8009780:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009784:	6006      	str	r6, [r0, #0]
 8009786:	60c6      	str	r6, [r0, #12]
 8009788:	b13c      	cbz	r4, 800979a <_Bfree+0x3a>
 800978a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800978c:	6862      	ldr	r2, [r4, #4]
 800978e:	68db      	ldr	r3, [r3, #12]
 8009790:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009794:	6021      	str	r1, [r4, #0]
 8009796:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800979a:	bd70      	pop	{r4, r5, r6, pc}
 800979c:	0800a622 	.word	0x0800a622
 80097a0:	0800a708 	.word	0x0800a708

080097a4 <__multadd>:
 80097a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097a8:	690d      	ldr	r5, [r1, #16]
 80097aa:	4607      	mov	r7, r0
 80097ac:	460c      	mov	r4, r1
 80097ae:	461e      	mov	r6, r3
 80097b0:	f101 0c14 	add.w	ip, r1, #20
 80097b4:	2000      	movs	r0, #0
 80097b6:	f8dc 3000 	ldr.w	r3, [ip]
 80097ba:	b299      	uxth	r1, r3
 80097bc:	fb02 6101 	mla	r1, r2, r1, r6
 80097c0:	0c1e      	lsrs	r6, r3, #16
 80097c2:	0c0b      	lsrs	r3, r1, #16
 80097c4:	fb02 3306 	mla	r3, r2, r6, r3
 80097c8:	b289      	uxth	r1, r1
 80097ca:	3001      	adds	r0, #1
 80097cc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80097d0:	4285      	cmp	r5, r0
 80097d2:	f84c 1b04 	str.w	r1, [ip], #4
 80097d6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80097da:	dcec      	bgt.n	80097b6 <__multadd+0x12>
 80097dc:	b30e      	cbz	r6, 8009822 <__multadd+0x7e>
 80097de:	68a3      	ldr	r3, [r4, #8]
 80097e0:	42ab      	cmp	r3, r5
 80097e2:	dc19      	bgt.n	8009818 <__multadd+0x74>
 80097e4:	6861      	ldr	r1, [r4, #4]
 80097e6:	4638      	mov	r0, r7
 80097e8:	3101      	adds	r1, #1
 80097ea:	f7ff ff79 	bl	80096e0 <_Balloc>
 80097ee:	4680      	mov	r8, r0
 80097f0:	b928      	cbnz	r0, 80097fe <__multadd+0x5a>
 80097f2:	4602      	mov	r2, r0
 80097f4:	4b0c      	ldr	r3, [pc, #48]	; (8009828 <__multadd+0x84>)
 80097f6:	480d      	ldr	r0, [pc, #52]	; (800982c <__multadd+0x88>)
 80097f8:	21b5      	movs	r1, #181	; 0xb5
 80097fa:	f7fd ffb7 	bl	800776c <__assert_func>
 80097fe:	6922      	ldr	r2, [r4, #16]
 8009800:	3202      	adds	r2, #2
 8009802:	f104 010c 	add.w	r1, r4, #12
 8009806:	0092      	lsls	r2, r2, #2
 8009808:	300c      	adds	r0, #12
 800980a:	f7ff ff5b 	bl	80096c4 <memcpy>
 800980e:	4621      	mov	r1, r4
 8009810:	4638      	mov	r0, r7
 8009812:	f7ff ffa5 	bl	8009760 <_Bfree>
 8009816:	4644      	mov	r4, r8
 8009818:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800981c:	3501      	adds	r5, #1
 800981e:	615e      	str	r6, [r3, #20]
 8009820:	6125      	str	r5, [r4, #16]
 8009822:	4620      	mov	r0, r4
 8009824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009828:	0800a694 	.word	0x0800a694
 800982c:	0800a708 	.word	0x0800a708

08009830 <__hi0bits>:
 8009830:	0c03      	lsrs	r3, r0, #16
 8009832:	041b      	lsls	r3, r3, #16
 8009834:	b9d3      	cbnz	r3, 800986c <__hi0bits+0x3c>
 8009836:	0400      	lsls	r0, r0, #16
 8009838:	2310      	movs	r3, #16
 800983a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800983e:	bf04      	itt	eq
 8009840:	0200      	lsleq	r0, r0, #8
 8009842:	3308      	addeq	r3, #8
 8009844:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009848:	bf04      	itt	eq
 800984a:	0100      	lsleq	r0, r0, #4
 800984c:	3304      	addeq	r3, #4
 800984e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009852:	bf04      	itt	eq
 8009854:	0080      	lsleq	r0, r0, #2
 8009856:	3302      	addeq	r3, #2
 8009858:	2800      	cmp	r0, #0
 800985a:	db05      	blt.n	8009868 <__hi0bits+0x38>
 800985c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009860:	f103 0301 	add.w	r3, r3, #1
 8009864:	bf08      	it	eq
 8009866:	2320      	moveq	r3, #32
 8009868:	4618      	mov	r0, r3
 800986a:	4770      	bx	lr
 800986c:	2300      	movs	r3, #0
 800986e:	e7e4      	b.n	800983a <__hi0bits+0xa>

08009870 <__lo0bits>:
 8009870:	6803      	ldr	r3, [r0, #0]
 8009872:	f013 0207 	ands.w	r2, r3, #7
 8009876:	4601      	mov	r1, r0
 8009878:	d00b      	beq.n	8009892 <__lo0bits+0x22>
 800987a:	07da      	lsls	r2, r3, #31
 800987c:	d423      	bmi.n	80098c6 <__lo0bits+0x56>
 800987e:	0798      	lsls	r0, r3, #30
 8009880:	bf49      	itett	mi
 8009882:	085b      	lsrmi	r3, r3, #1
 8009884:	089b      	lsrpl	r3, r3, #2
 8009886:	2001      	movmi	r0, #1
 8009888:	600b      	strmi	r3, [r1, #0]
 800988a:	bf5c      	itt	pl
 800988c:	600b      	strpl	r3, [r1, #0]
 800988e:	2002      	movpl	r0, #2
 8009890:	4770      	bx	lr
 8009892:	b298      	uxth	r0, r3
 8009894:	b9a8      	cbnz	r0, 80098c2 <__lo0bits+0x52>
 8009896:	0c1b      	lsrs	r3, r3, #16
 8009898:	2010      	movs	r0, #16
 800989a:	b2da      	uxtb	r2, r3
 800989c:	b90a      	cbnz	r2, 80098a2 <__lo0bits+0x32>
 800989e:	3008      	adds	r0, #8
 80098a0:	0a1b      	lsrs	r3, r3, #8
 80098a2:	071a      	lsls	r2, r3, #28
 80098a4:	bf04      	itt	eq
 80098a6:	091b      	lsreq	r3, r3, #4
 80098a8:	3004      	addeq	r0, #4
 80098aa:	079a      	lsls	r2, r3, #30
 80098ac:	bf04      	itt	eq
 80098ae:	089b      	lsreq	r3, r3, #2
 80098b0:	3002      	addeq	r0, #2
 80098b2:	07da      	lsls	r2, r3, #31
 80098b4:	d403      	bmi.n	80098be <__lo0bits+0x4e>
 80098b6:	085b      	lsrs	r3, r3, #1
 80098b8:	f100 0001 	add.w	r0, r0, #1
 80098bc:	d005      	beq.n	80098ca <__lo0bits+0x5a>
 80098be:	600b      	str	r3, [r1, #0]
 80098c0:	4770      	bx	lr
 80098c2:	4610      	mov	r0, r2
 80098c4:	e7e9      	b.n	800989a <__lo0bits+0x2a>
 80098c6:	2000      	movs	r0, #0
 80098c8:	4770      	bx	lr
 80098ca:	2020      	movs	r0, #32
 80098cc:	4770      	bx	lr
	...

080098d0 <__i2b>:
 80098d0:	b510      	push	{r4, lr}
 80098d2:	460c      	mov	r4, r1
 80098d4:	2101      	movs	r1, #1
 80098d6:	f7ff ff03 	bl	80096e0 <_Balloc>
 80098da:	4602      	mov	r2, r0
 80098dc:	b928      	cbnz	r0, 80098ea <__i2b+0x1a>
 80098de:	4b05      	ldr	r3, [pc, #20]	; (80098f4 <__i2b+0x24>)
 80098e0:	4805      	ldr	r0, [pc, #20]	; (80098f8 <__i2b+0x28>)
 80098e2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80098e6:	f7fd ff41 	bl	800776c <__assert_func>
 80098ea:	2301      	movs	r3, #1
 80098ec:	6144      	str	r4, [r0, #20]
 80098ee:	6103      	str	r3, [r0, #16]
 80098f0:	bd10      	pop	{r4, pc}
 80098f2:	bf00      	nop
 80098f4:	0800a694 	.word	0x0800a694
 80098f8:	0800a708 	.word	0x0800a708

080098fc <__multiply>:
 80098fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009900:	4691      	mov	r9, r2
 8009902:	690a      	ldr	r2, [r1, #16]
 8009904:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009908:	429a      	cmp	r2, r3
 800990a:	bfb8      	it	lt
 800990c:	460b      	movlt	r3, r1
 800990e:	460c      	mov	r4, r1
 8009910:	bfbc      	itt	lt
 8009912:	464c      	movlt	r4, r9
 8009914:	4699      	movlt	r9, r3
 8009916:	6927      	ldr	r7, [r4, #16]
 8009918:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800991c:	68a3      	ldr	r3, [r4, #8]
 800991e:	6861      	ldr	r1, [r4, #4]
 8009920:	eb07 060a 	add.w	r6, r7, sl
 8009924:	42b3      	cmp	r3, r6
 8009926:	b085      	sub	sp, #20
 8009928:	bfb8      	it	lt
 800992a:	3101      	addlt	r1, #1
 800992c:	f7ff fed8 	bl	80096e0 <_Balloc>
 8009930:	b930      	cbnz	r0, 8009940 <__multiply+0x44>
 8009932:	4602      	mov	r2, r0
 8009934:	4b44      	ldr	r3, [pc, #272]	; (8009a48 <__multiply+0x14c>)
 8009936:	4845      	ldr	r0, [pc, #276]	; (8009a4c <__multiply+0x150>)
 8009938:	f240 115d 	movw	r1, #349	; 0x15d
 800993c:	f7fd ff16 	bl	800776c <__assert_func>
 8009940:	f100 0514 	add.w	r5, r0, #20
 8009944:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009948:	462b      	mov	r3, r5
 800994a:	2200      	movs	r2, #0
 800994c:	4543      	cmp	r3, r8
 800994e:	d321      	bcc.n	8009994 <__multiply+0x98>
 8009950:	f104 0314 	add.w	r3, r4, #20
 8009954:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009958:	f109 0314 	add.w	r3, r9, #20
 800995c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009960:	9202      	str	r2, [sp, #8]
 8009962:	1b3a      	subs	r2, r7, r4
 8009964:	3a15      	subs	r2, #21
 8009966:	f022 0203 	bic.w	r2, r2, #3
 800996a:	3204      	adds	r2, #4
 800996c:	f104 0115 	add.w	r1, r4, #21
 8009970:	428f      	cmp	r7, r1
 8009972:	bf38      	it	cc
 8009974:	2204      	movcc	r2, #4
 8009976:	9201      	str	r2, [sp, #4]
 8009978:	9a02      	ldr	r2, [sp, #8]
 800997a:	9303      	str	r3, [sp, #12]
 800997c:	429a      	cmp	r2, r3
 800997e:	d80c      	bhi.n	800999a <__multiply+0x9e>
 8009980:	2e00      	cmp	r6, #0
 8009982:	dd03      	ble.n	800998c <__multiply+0x90>
 8009984:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009988:	2b00      	cmp	r3, #0
 800998a:	d05a      	beq.n	8009a42 <__multiply+0x146>
 800998c:	6106      	str	r6, [r0, #16]
 800998e:	b005      	add	sp, #20
 8009990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009994:	f843 2b04 	str.w	r2, [r3], #4
 8009998:	e7d8      	b.n	800994c <__multiply+0x50>
 800999a:	f8b3 a000 	ldrh.w	sl, [r3]
 800999e:	f1ba 0f00 	cmp.w	sl, #0
 80099a2:	d024      	beq.n	80099ee <__multiply+0xf2>
 80099a4:	f104 0e14 	add.w	lr, r4, #20
 80099a8:	46a9      	mov	r9, r5
 80099aa:	f04f 0c00 	mov.w	ip, #0
 80099ae:	f85e 2b04 	ldr.w	r2, [lr], #4
 80099b2:	f8d9 1000 	ldr.w	r1, [r9]
 80099b6:	fa1f fb82 	uxth.w	fp, r2
 80099ba:	b289      	uxth	r1, r1
 80099bc:	fb0a 110b 	mla	r1, sl, fp, r1
 80099c0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80099c4:	f8d9 2000 	ldr.w	r2, [r9]
 80099c8:	4461      	add	r1, ip
 80099ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80099ce:	fb0a c20b 	mla	r2, sl, fp, ip
 80099d2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80099d6:	b289      	uxth	r1, r1
 80099d8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80099dc:	4577      	cmp	r7, lr
 80099de:	f849 1b04 	str.w	r1, [r9], #4
 80099e2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80099e6:	d8e2      	bhi.n	80099ae <__multiply+0xb2>
 80099e8:	9a01      	ldr	r2, [sp, #4]
 80099ea:	f845 c002 	str.w	ip, [r5, r2]
 80099ee:	9a03      	ldr	r2, [sp, #12]
 80099f0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80099f4:	3304      	adds	r3, #4
 80099f6:	f1b9 0f00 	cmp.w	r9, #0
 80099fa:	d020      	beq.n	8009a3e <__multiply+0x142>
 80099fc:	6829      	ldr	r1, [r5, #0]
 80099fe:	f104 0c14 	add.w	ip, r4, #20
 8009a02:	46ae      	mov	lr, r5
 8009a04:	f04f 0a00 	mov.w	sl, #0
 8009a08:	f8bc b000 	ldrh.w	fp, [ip]
 8009a0c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009a10:	fb09 220b 	mla	r2, r9, fp, r2
 8009a14:	4492      	add	sl, r2
 8009a16:	b289      	uxth	r1, r1
 8009a18:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009a1c:	f84e 1b04 	str.w	r1, [lr], #4
 8009a20:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009a24:	f8be 1000 	ldrh.w	r1, [lr]
 8009a28:	0c12      	lsrs	r2, r2, #16
 8009a2a:	fb09 1102 	mla	r1, r9, r2, r1
 8009a2e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009a32:	4567      	cmp	r7, ip
 8009a34:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009a38:	d8e6      	bhi.n	8009a08 <__multiply+0x10c>
 8009a3a:	9a01      	ldr	r2, [sp, #4]
 8009a3c:	50a9      	str	r1, [r5, r2]
 8009a3e:	3504      	adds	r5, #4
 8009a40:	e79a      	b.n	8009978 <__multiply+0x7c>
 8009a42:	3e01      	subs	r6, #1
 8009a44:	e79c      	b.n	8009980 <__multiply+0x84>
 8009a46:	bf00      	nop
 8009a48:	0800a694 	.word	0x0800a694
 8009a4c:	0800a708 	.word	0x0800a708

08009a50 <__pow5mult>:
 8009a50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a54:	4615      	mov	r5, r2
 8009a56:	f012 0203 	ands.w	r2, r2, #3
 8009a5a:	4606      	mov	r6, r0
 8009a5c:	460f      	mov	r7, r1
 8009a5e:	d007      	beq.n	8009a70 <__pow5mult+0x20>
 8009a60:	4c25      	ldr	r4, [pc, #148]	; (8009af8 <__pow5mult+0xa8>)
 8009a62:	3a01      	subs	r2, #1
 8009a64:	2300      	movs	r3, #0
 8009a66:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009a6a:	f7ff fe9b 	bl	80097a4 <__multadd>
 8009a6e:	4607      	mov	r7, r0
 8009a70:	10ad      	asrs	r5, r5, #2
 8009a72:	d03d      	beq.n	8009af0 <__pow5mult+0xa0>
 8009a74:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009a76:	b97c      	cbnz	r4, 8009a98 <__pow5mult+0x48>
 8009a78:	2010      	movs	r0, #16
 8009a7a:	f7ff fe1b 	bl	80096b4 <malloc>
 8009a7e:	4602      	mov	r2, r0
 8009a80:	6270      	str	r0, [r6, #36]	; 0x24
 8009a82:	b928      	cbnz	r0, 8009a90 <__pow5mult+0x40>
 8009a84:	4b1d      	ldr	r3, [pc, #116]	; (8009afc <__pow5mult+0xac>)
 8009a86:	481e      	ldr	r0, [pc, #120]	; (8009b00 <__pow5mult+0xb0>)
 8009a88:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009a8c:	f7fd fe6e 	bl	800776c <__assert_func>
 8009a90:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009a94:	6004      	str	r4, [r0, #0]
 8009a96:	60c4      	str	r4, [r0, #12]
 8009a98:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009a9c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009aa0:	b94c      	cbnz	r4, 8009ab6 <__pow5mult+0x66>
 8009aa2:	f240 2171 	movw	r1, #625	; 0x271
 8009aa6:	4630      	mov	r0, r6
 8009aa8:	f7ff ff12 	bl	80098d0 <__i2b>
 8009aac:	2300      	movs	r3, #0
 8009aae:	f8c8 0008 	str.w	r0, [r8, #8]
 8009ab2:	4604      	mov	r4, r0
 8009ab4:	6003      	str	r3, [r0, #0]
 8009ab6:	f04f 0900 	mov.w	r9, #0
 8009aba:	07eb      	lsls	r3, r5, #31
 8009abc:	d50a      	bpl.n	8009ad4 <__pow5mult+0x84>
 8009abe:	4639      	mov	r1, r7
 8009ac0:	4622      	mov	r2, r4
 8009ac2:	4630      	mov	r0, r6
 8009ac4:	f7ff ff1a 	bl	80098fc <__multiply>
 8009ac8:	4639      	mov	r1, r7
 8009aca:	4680      	mov	r8, r0
 8009acc:	4630      	mov	r0, r6
 8009ace:	f7ff fe47 	bl	8009760 <_Bfree>
 8009ad2:	4647      	mov	r7, r8
 8009ad4:	106d      	asrs	r5, r5, #1
 8009ad6:	d00b      	beq.n	8009af0 <__pow5mult+0xa0>
 8009ad8:	6820      	ldr	r0, [r4, #0]
 8009ada:	b938      	cbnz	r0, 8009aec <__pow5mult+0x9c>
 8009adc:	4622      	mov	r2, r4
 8009ade:	4621      	mov	r1, r4
 8009ae0:	4630      	mov	r0, r6
 8009ae2:	f7ff ff0b 	bl	80098fc <__multiply>
 8009ae6:	6020      	str	r0, [r4, #0]
 8009ae8:	f8c0 9000 	str.w	r9, [r0]
 8009aec:	4604      	mov	r4, r0
 8009aee:	e7e4      	b.n	8009aba <__pow5mult+0x6a>
 8009af0:	4638      	mov	r0, r7
 8009af2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009af6:	bf00      	nop
 8009af8:	0800a858 	.word	0x0800a858
 8009afc:	0800a622 	.word	0x0800a622
 8009b00:	0800a708 	.word	0x0800a708

08009b04 <__lshift>:
 8009b04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b08:	460c      	mov	r4, r1
 8009b0a:	6849      	ldr	r1, [r1, #4]
 8009b0c:	6923      	ldr	r3, [r4, #16]
 8009b0e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009b12:	68a3      	ldr	r3, [r4, #8]
 8009b14:	4607      	mov	r7, r0
 8009b16:	4691      	mov	r9, r2
 8009b18:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009b1c:	f108 0601 	add.w	r6, r8, #1
 8009b20:	42b3      	cmp	r3, r6
 8009b22:	db0b      	blt.n	8009b3c <__lshift+0x38>
 8009b24:	4638      	mov	r0, r7
 8009b26:	f7ff fddb 	bl	80096e0 <_Balloc>
 8009b2a:	4605      	mov	r5, r0
 8009b2c:	b948      	cbnz	r0, 8009b42 <__lshift+0x3e>
 8009b2e:	4602      	mov	r2, r0
 8009b30:	4b2a      	ldr	r3, [pc, #168]	; (8009bdc <__lshift+0xd8>)
 8009b32:	482b      	ldr	r0, [pc, #172]	; (8009be0 <__lshift+0xdc>)
 8009b34:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009b38:	f7fd fe18 	bl	800776c <__assert_func>
 8009b3c:	3101      	adds	r1, #1
 8009b3e:	005b      	lsls	r3, r3, #1
 8009b40:	e7ee      	b.n	8009b20 <__lshift+0x1c>
 8009b42:	2300      	movs	r3, #0
 8009b44:	f100 0114 	add.w	r1, r0, #20
 8009b48:	f100 0210 	add.w	r2, r0, #16
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	4553      	cmp	r3, sl
 8009b50:	db37      	blt.n	8009bc2 <__lshift+0xbe>
 8009b52:	6920      	ldr	r0, [r4, #16]
 8009b54:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009b58:	f104 0314 	add.w	r3, r4, #20
 8009b5c:	f019 091f 	ands.w	r9, r9, #31
 8009b60:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009b64:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009b68:	d02f      	beq.n	8009bca <__lshift+0xc6>
 8009b6a:	f1c9 0e20 	rsb	lr, r9, #32
 8009b6e:	468a      	mov	sl, r1
 8009b70:	f04f 0c00 	mov.w	ip, #0
 8009b74:	681a      	ldr	r2, [r3, #0]
 8009b76:	fa02 f209 	lsl.w	r2, r2, r9
 8009b7a:	ea42 020c 	orr.w	r2, r2, ip
 8009b7e:	f84a 2b04 	str.w	r2, [sl], #4
 8009b82:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b86:	4298      	cmp	r0, r3
 8009b88:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009b8c:	d8f2      	bhi.n	8009b74 <__lshift+0x70>
 8009b8e:	1b03      	subs	r3, r0, r4
 8009b90:	3b15      	subs	r3, #21
 8009b92:	f023 0303 	bic.w	r3, r3, #3
 8009b96:	3304      	adds	r3, #4
 8009b98:	f104 0215 	add.w	r2, r4, #21
 8009b9c:	4290      	cmp	r0, r2
 8009b9e:	bf38      	it	cc
 8009ba0:	2304      	movcc	r3, #4
 8009ba2:	f841 c003 	str.w	ip, [r1, r3]
 8009ba6:	f1bc 0f00 	cmp.w	ip, #0
 8009baa:	d001      	beq.n	8009bb0 <__lshift+0xac>
 8009bac:	f108 0602 	add.w	r6, r8, #2
 8009bb0:	3e01      	subs	r6, #1
 8009bb2:	4638      	mov	r0, r7
 8009bb4:	612e      	str	r6, [r5, #16]
 8009bb6:	4621      	mov	r1, r4
 8009bb8:	f7ff fdd2 	bl	8009760 <_Bfree>
 8009bbc:	4628      	mov	r0, r5
 8009bbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bc2:	f842 0f04 	str.w	r0, [r2, #4]!
 8009bc6:	3301      	adds	r3, #1
 8009bc8:	e7c1      	b.n	8009b4e <__lshift+0x4a>
 8009bca:	3904      	subs	r1, #4
 8009bcc:	f853 2b04 	ldr.w	r2, [r3], #4
 8009bd0:	f841 2f04 	str.w	r2, [r1, #4]!
 8009bd4:	4298      	cmp	r0, r3
 8009bd6:	d8f9      	bhi.n	8009bcc <__lshift+0xc8>
 8009bd8:	e7ea      	b.n	8009bb0 <__lshift+0xac>
 8009bda:	bf00      	nop
 8009bdc:	0800a694 	.word	0x0800a694
 8009be0:	0800a708 	.word	0x0800a708

08009be4 <__mcmp>:
 8009be4:	b530      	push	{r4, r5, lr}
 8009be6:	6902      	ldr	r2, [r0, #16]
 8009be8:	690c      	ldr	r4, [r1, #16]
 8009bea:	1b12      	subs	r2, r2, r4
 8009bec:	d10e      	bne.n	8009c0c <__mcmp+0x28>
 8009bee:	f100 0314 	add.w	r3, r0, #20
 8009bf2:	3114      	adds	r1, #20
 8009bf4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009bf8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009bfc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009c00:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009c04:	42a5      	cmp	r5, r4
 8009c06:	d003      	beq.n	8009c10 <__mcmp+0x2c>
 8009c08:	d305      	bcc.n	8009c16 <__mcmp+0x32>
 8009c0a:	2201      	movs	r2, #1
 8009c0c:	4610      	mov	r0, r2
 8009c0e:	bd30      	pop	{r4, r5, pc}
 8009c10:	4283      	cmp	r3, r0
 8009c12:	d3f3      	bcc.n	8009bfc <__mcmp+0x18>
 8009c14:	e7fa      	b.n	8009c0c <__mcmp+0x28>
 8009c16:	f04f 32ff 	mov.w	r2, #4294967295
 8009c1a:	e7f7      	b.n	8009c0c <__mcmp+0x28>

08009c1c <__mdiff>:
 8009c1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c20:	460c      	mov	r4, r1
 8009c22:	4606      	mov	r6, r0
 8009c24:	4611      	mov	r1, r2
 8009c26:	4620      	mov	r0, r4
 8009c28:	4690      	mov	r8, r2
 8009c2a:	f7ff ffdb 	bl	8009be4 <__mcmp>
 8009c2e:	1e05      	subs	r5, r0, #0
 8009c30:	d110      	bne.n	8009c54 <__mdiff+0x38>
 8009c32:	4629      	mov	r1, r5
 8009c34:	4630      	mov	r0, r6
 8009c36:	f7ff fd53 	bl	80096e0 <_Balloc>
 8009c3a:	b930      	cbnz	r0, 8009c4a <__mdiff+0x2e>
 8009c3c:	4b3a      	ldr	r3, [pc, #232]	; (8009d28 <__mdiff+0x10c>)
 8009c3e:	4602      	mov	r2, r0
 8009c40:	f240 2132 	movw	r1, #562	; 0x232
 8009c44:	4839      	ldr	r0, [pc, #228]	; (8009d2c <__mdiff+0x110>)
 8009c46:	f7fd fd91 	bl	800776c <__assert_func>
 8009c4a:	2301      	movs	r3, #1
 8009c4c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009c50:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c54:	bfa4      	itt	ge
 8009c56:	4643      	movge	r3, r8
 8009c58:	46a0      	movge	r8, r4
 8009c5a:	4630      	mov	r0, r6
 8009c5c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009c60:	bfa6      	itte	ge
 8009c62:	461c      	movge	r4, r3
 8009c64:	2500      	movge	r5, #0
 8009c66:	2501      	movlt	r5, #1
 8009c68:	f7ff fd3a 	bl	80096e0 <_Balloc>
 8009c6c:	b920      	cbnz	r0, 8009c78 <__mdiff+0x5c>
 8009c6e:	4b2e      	ldr	r3, [pc, #184]	; (8009d28 <__mdiff+0x10c>)
 8009c70:	4602      	mov	r2, r0
 8009c72:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009c76:	e7e5      	b.n	8009c44 <__mdiff+0x28>
 8009c78:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009c7c:	6926      	ldr	r6, [r4, #16]
 8009c7e:	60c5      	str	r5, [r0, #12]
 8009c80:	f104 0914 	add.w	r9, r4, #20
 8009c84:	f108 0514 	add.w	r5, r8, #20
 8009c88:	f100 0e14 	add.w	lr, r0, #20
 8009c8c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009c90:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009c94:	f108 0210 	add.w	r2, r8, #16
 8009c98:	46f2      	mov	sl, lr
 8009c9a:	2100      	movs	r1, #0
 8009c9c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009ca0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009ca4:	fa1f f883 	uxth.w	r8, r3
 8009ca8:	fa11 f18b 	uxtah	r1, r1, fp
 8009cac:	0c1b      	lsrs	r3, r3, #16
 8009cae:	eba1 0808 	sub.w	r8, r1, r8
 8009cb2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009cb6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009cba:	fa1f f888 	uxth.w	r8, r8
 8009cbe:	1419      	asrs	r1, r3, #16
 8009cc0:	454e      	cmp	r6, r9
 8009cc2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009cc6:	f84a 3b04 	str.w	r3, [sl], #4
 8009cca:	d8e7      	bhi.n	8009c9c <__mdiff+0x80>
 8009ccc:	1b33      	subs	r3, r6, r4
 8009cce:	3b15      	subs	r3, #21
 8009cd0:	f023 0303 	bic.w	r3, r3, #3
 8009cd4:	3304      	adds	r3, #4
 8009cd6:	3415      	adds	r4, #21
 8009cd8:	42a6      	cmp	r6, r4
 8009cda:	bf38      	it	cc
 8009cdc:	2304      	movcc	r3, #4
 8009cde:	441d      	add	r5, r3
 8009ce0:	4473      	add	r3, lr
 8009ce2:	469e      	mov	lr, r3
 8009ce4:	462e      	mov	r6, r5
 8009ce6:	4566      	cmp	r6, ip
 8009ce8:	d30e      	bcc.n	8009d08 <__mdiff+0xec>
 8009cea:	f10c 0203 	add.w	r2, ip, #3
 8009cee:	1b52      	subs	r2, r2, r5
 8009cf0:	f022 0203 	bic.w	r2, r2, #3
 8009cf4:	3d03      	subs	r5, #3
 8009cf6:	45ac      	cmp	ip, r5
 8009cf8:	bf38      	it	cc
 8009cfa:	2200      	movcc	r2, #0
 8009cfc:	441a      	add	r2, r3
 8009cfe:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009d02:	b17b      	cbz	r3, 8009d24 <__mdiff+0x108>
 8009d04:	6107      	str	r7, [r0, #16]
 8009d06:	e7a3      	b.n	8009c50 <__mdiff+0x34>
 8009d08:	f856 8b04 	ldr.w	r8, [r6], #4
 8009d0c:	fa11 f288 	uxtah	r2, r1, r8
 8009d10:	1414      	asrs	r4, r2, #16
 8009d12:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009d16:	b292      	uxth	r2, r2
 8009d18:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009d1c:	f84e 2b04 	str.w	r2, [lr], #4
 8009d20:	1421      	asrs	r1, r4, #16
 8009d22:	e7e0      	b.n	8009ce6 <__mdiff+0xca>
 8009d24:	3f01      	subs	r7, #1
 8009d26:	e7ea      	b.n	8009cfe <__mdiff+0xe2>
 8009d28:	0800a694 	.word	0x0800a694
 8009d2c:	0800a708 	.word	0x0800a708

08009d30 <__d2b>:
 8009d30:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009d34:	4689      	mov	r9, r1
 8009d36:	2101      	movs	r1, #1
 8009d38:	ec57 6b10 	vmov	r6, r7, d0
 8009d3c:	4690      	mov	r8, r2
 8009d3e:	f7ff fccf 	bl	80096e0 <_Balloc>
 8009d42:	4604      	mov	r4, r0
 8009d44:	b930      	cbnz	r0, 8009d54 <__d2b+0x24>
 8009d46:	4602      	mov	r2, r0
 8009d48:	4b25      	ldr	r3, [pc, #148]	; (8009de0 <__d2b+0xb0>)
 8009d4a:	4826      	ldr	r0, [pc, #152]	; (8009de4 <__d2b+0xb4>)
 8009d4c:	f240 310a 	movw	r1, #778	; 0x30a
 8009d50:	f7fd fd0c 	bl	800776c <__assert_func>
 8009d54:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009d58:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009d5c:	bb35      	cbnz	r5, 8009dac <__d2b+0x7c>
 8009d5e:	2e00      	cmp	r6, #0
 8009d60:	9301      	str	r3, [sp, #4]
 8009d62:	d028      	beq.n	8009db6 <__d2b+0x86>
 8009d64:	4668      	mov	r0, sp
 8009d66:	9600      	str	r6, [sp, #0]
 8009d68:	f7ff fd82 	bl	8009870 <__lo0bits>
 8009d6c:	9900      	ldr	r1, [sp, #0]
 8009d6e:	b300      	cbz	r0, 8009db2 <__d2b+0x82>
 8009d70:	9a01      	ldr	r2, [sp, #4]
 8009d72:	f1c0 0320 	rsb	r3, r0, #32
 8009d76:	fa02 f303 	lsl.w	r3, r2, r3
 8009d7a:	430b      	orrs	r3, r1
 8009d7c:	40c2      	lsrs	r2, r0
 8009d7e:	6163      	str	r3, [r4, #20]
 8009d80:	9201      	str	r2, [sp, #4]
 8009d82:	9b01      	ldr	r3, [sp, #4]
 8009d84:	61a3      	str	r3, [r4, #24]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	bf14      	ite	ne
 8009d8a:	2202      	movne	r2, #2
 8009d8c:	2201      	moveq	r2, #1
 8009d8e:	6122      	str	r2, [r4, #16]
 8009d90:	b1d5      	cbz	r5, 8009dc8 <__d2b+0x98>
 8009d92:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009d96:	4405      	add	r5, r0
 8009d98:	f8c9 5000 	str.w	r5, [r9]
 8009d9c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009da0:	f8c8 0000 	str.w	r0, [r8]
 8009da4:	4620      	mov	r0, r4
 8009da6:	b003      	add	sp, #12
 8009da8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009dac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009db0:	e7d5      	b.n	8009d5e <__d2b+0x2e>
 8009db2:	6161      	str	r1, [r4, #20]
 8009db4:	e7e5      	b.n	8009d82 <__d2b+0x52>
 8009db6:	a801      	add	r0, sp, #4
 8009db8:	f7ff fd5a 	bl	8009870 <__lo0bits>
 8009dbc:	9b01      	ldr	r3, [sp, #4]
 8009dbe:	6163      	str	r3, [r4, #20]
 8009dc0:	2201      	movs	r2, #1
 8009dc2:	6122      	str	r2, [r4, #16]
 8009dc4:	3020      	adds	r0, #32
 8009dc6:	e7e3      	b.n	8009d90 <__d2b+0x60>
 8009dc8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009dcc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009dd0:	f8c9 0000 	str.w	r0, [r9]
 8009dd4:	6918      	ldr	r0, [r3, #16]
 8009dd6:	f7ff fd2b 	bl	8009830 <__hi0bits>
 8009dda:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009dde:	e7df      	b.n	8009da0 <__d2b+0x70>
 8009de0:	0800a694 	.word	0x0800a694
 8009de4:	0800a708 	.word	0x0800a708

08009de8 <_calloc_r>:
 8009de8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009dea:	fba1 2402 	umull	r2, r4, r1, r2
 8009dee:	b94c      	cbnz	r4, 8009e04 <_calloc_r+0x1c>
 8009df0:	4611      	mov	r1, r2
 8009df2:	9201      	str	r2, [sp, #4]
 8009df4:	f000 f87a 	bl	8009eec <_malloc_r>
 8009df8:	9a01      	ldr	r2, [sp, #4]
 8009dfa:	4605      	mov	r5, r0
 8009dfc:	b930      	cbnz	r0, 8009e0c <_calloc_r+0x24>
 8009dfe:	4628      	mov	r0, r5
 8009e00:	b003      	add	sp, #12
 8009e02:	bd30      	pop	{r4, r5, pc}
 8009e04:	220c      	movs	r2, #12
 8009e06:	6002      	str	r2, [r0, #0]
 8009e08:	2500      	movs	r5, #0
 8009e0a:	e7f8      	b.n	8009dfe <_calloc_r+0x16>
 8009e0c:	4621      	mov	r1, r4
 8009e0e:	f7fd fd07 	bl	8007820 <memset>
 8009e12:	e7f4      	b.n	8009dfe <_calloc_r+0x16>

08009e14 <_free_r>:
 8009e14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009e16:	2900      	cmp	r1, #0
 8009e18:	d044      	beq.n	8009ea4 <_free_r+0x90>
 8009e1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e1e:	9001      	str	r0, [sp, #4]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	f1a1 0404 	sub.w	r4, r1, #4
 8009e26:	bfb8      	it	lt
 8009e28:	18e4      	addlt	r4, r4, r3
 8009e2a:	f000 f9d3 	bl	800a1d4 <__malloc_lock>
 8009e2e:	4a1e      	ldr	r2, [pc, #120]	; (8009ea8 <_free_r+0x94>)
 8009e30:	9801      	ldr	r0, [sp, #4]
 8009e32:	6813      	ldr	r3, [r2, #0]
 8009e34:	b933      	cbnz	r3, 8009e44 <_free_r+0x30>
 8009e36:	6063      	str	r3, [r4, #4]
 8009e38:	6014      	str	r4, [r2, #0]
 8009e3a:	b003      	add	sp, #12
 8009e3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009e40:	f000 b9ce 	b.w	800a1e0 <__malloc_unlock>
 8009e44:	42a3      	cmp	r3, r4
 8009e46:	d908      	bls.n	8009e5a <_free_r+0x46>
 8009e48:	6825      	ldr	r5, [r4, #0]
 8009e4a:	1961      	adds	r1, r4, r5
 8009e4c:	428b      	cmp	r3, r1
 8009e4e:	bf01      	itttt	eq
 8009e50:	6819      	ldreq	r1, [r3, #0]
 8009e52:	685b      	ldreq	r3, [r3, #4]
 8009e54:	1949      	addeq	r1, r1, r5
 8009e56:	6021      	streq	r1, [r4, #0]
 8009e58:	e7ed      	b.n	8009e36 <_free_r+0x22>
 8009e5a:	461a      	mov	r2, r3
 8009e5c:	685b      	ldr	r3, [r3, #4]
 8009e5e:	b10b      	cbz	r3, 8009e64 <_free_r+0x50>
 8009e60:	42a3      	cmp	r3, r4
 8009e62:	d9fa      	bls.n	8009e5a <_free_r+0x46>
 8009e64:	6811      	ldr	r1, [r2, #0]
 8009e66:	1855      	adds	r5, r2, r1
 8009e68:	42a5      	cmp	r5, r4
 8009e6a:	d10b      	bne.n	8009e84 <_free_r+0x70>
 8009e6c:	6824      	ldr	r4, [r4, #0]
 8009e6e:	4421      	add	r1, r4
 8009e70:	1854      	adds	r4, r2, r1
 8009e72:	42a3      	cmp	r3, r4
 8009e74:	6011      	str	r1, [r2, #0]
 8009e76:	d1e0      	bne.n	8009e3a <_free_r+0x26>
 8009e78:	681c      	ldr	r4, [r3, #0]
 8009e7a:	685b      	ldr	r3, [r3, #4]
 8009e7c:	6053      	str	r3, [r2, #4]
 8009e7e:	4421      	add	r1, r4
 8009e80:	6011      	str	r1, [r2, #0]
 8009e82:	e7da      	b.n	8009e3a <_free_r+0x26>
 8009e84:	d902      	bls.n	8009e8c <_free_r+0x78>
 8009e86:	230c      	movs	r3, #12
 8009e88:	6003      	str	r3, [r0, #0]
 8009e8a:	e7d6      	b.n	8009e3a <_free_r+0x26>
 8009e8c:	6825      	ldr	r5, [r4, #0]
 8009e8e:	1961      	adds	r1, r4, r5
 8009e90:	428b      	cmp	r3, r1
 8009e92:	bf04      	itt	eq
 8009e94:	6819      	ldreq	r1, [r3, #0]
 8009e96:	685b      	ldreq	r3, [r3, #4]
 8009e98:	6063      	str	r3, [r4, #4]
 8009e9a:	bf04      	itt	eq
 8009e9c:	1949      	addeq	r1, r1, r5
 8009e9e:	6021      	streq	r1, [r4, #0]
 8009ea0:	6054      	str	r4, [r2, #4]
 8009ea2:	e7ca      	b.n	8009e3a <_free_r+0x26>
 8009ea4:	b003      	add	sp, #12
 8009ea6:	bd30      	pop	{r4, r5, pc}
 8009ea8:	20002570 	.word	0x20002570

08009eac <sbrk_aligned>:
 8009eac:	b570      	push	{r4, r5, r6, lr}
 8009eae:	4e0e      	ldr	r6, [pc, #56]	; (8009ee8 <sbrk_aligned+0x3c>)
 8009eb0:	460c      	mov	r4, r1
 8009eb2:	6831      	ldr	r1, [r6, #0]
 8009eb4:	4605      	mov	r5, r0
 8009eb6:	b911      	cbnz	r1, 8009ebe <sbrk_aligned+0x12>
 8009eb8:	f000 f88c 	bl	8009fd4 <_sbrk_r>
 8009ebc:	6030      	str	r0, [r6, #0]
 8009ebe:	4621      	mov	r1, r4
 8009ec0:	4628      	mov	r0, r5
 8009ec2:	f000 f887 	bl	8009fd4 <_sbrk_r>
 8009ec6:	1c43      	adds	r3, r0, #1
 8009ec8:	d00a      	beq.n	8009ee0 <sbrk_aligned+0x34>
 8009eca:	1cc4      	adds	r4, r0, #3
 8009ecc:	f024 0403 	bic.w	r4, r4, #3
 8009ed0:	42a0      	cmp	r0, r4
 8009ed2:	d007      	beq.n	8009ee4 <sbrk_aligned+0x38>
 8009ed4:	1a21      	subs	r1, r4, r0
 8009ed6:	4628      	mov	r0, r5
 8009ed8:	f000 f87c 	bl	8009fd4 <_sbrk_r>
 8009edc:	3001      	adds	r0, #1
 8009ede:	d101      	bne.n	8009ee4 <sbrk_aligned+0x38>
 8009ee0:	f04f 34ff 	mov.w	r4, #4294967295
 8009ee4:	4620      	mov	r0, r4
 8009ee6:	bd70      	pop	{r4, r5, r6, pc}
 8009ee8:	20002574 	.word	0x20002574

08009eec <_malloc_r>:
 8009eec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ef0:	1ccd      	adds	r5, r1, #3
 8009ef2:	f025 0503 	bic.w	r5, r5, #3
 8009ef6:	3508      	adds	r5, #8
 8009ef8:	2d0c      	cmp	r5, #12
 8009efa:	bf38      	it	cc
 8009efc:	250c      	movcc	r5, #12
 8009efe:	2d00      	cmp	r5, #0
 8009f00:	4607      	mov	r7, r0
 8009f02:	db01      	blt.n	8009f08 <_malloc_r+0x1c>
 8009f04:	42a9      	cmp	r1, r5
 8009f06:	d905      	bls.n	8009f14 <_malloc_r+0x28>
 8009f08:	230c      	movs	r3, #12
 8009f0a:	603b      	str	r3, [r7, #0]
 8009f0c:	2600      	movs	r6, #0
 8009f0e:	4630      	mov	r0, r6
 8009f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f14:	4e2e      	ldr	r6, [pc, #184]	; (8009fd0 <_malloc_r+0xe4>)
 8009f16:	f000 f95d 	bl	800a1d4 <__malloc_lock>
 8009f1a:	6833      	ldr	r3, [r6, #0]
 8009f1c:	461c      	mov	r4, r3
 8009f1e:	bb34      	cbnz	r4, 8009f6e <_malloc_r+0x82>
 8009f20:	4629      	mov	r1, r5
 8009f22:	4638      	mov	r0, r7
 8009f24:	f7ff ffc2 	bl	8009eac <sbrk_aligned>
 8009f28:	1c43      	adds	r3, r0, #1
 8009f2a:	4604      	mov	r4, r0
 8009f2c:	d14d      	bne.n	8009fca <_malloc_r+0xde>
 8009f2e:	6834      	ldr	r4, [r6, #0]
 8009f30:	4626      	mov	r6, r4
 8009f32:	2e00      	cmp	r6, #0
 8009f34:	d140      	bne.n	8009fb8 <_malloc_r+0xcc>
 8009f36:	6823      	ldr	r3, [r4, #0]
 8009f38:	4631      	mov	r1, r6
 8009f3a:	4638      	mov	r0, r7
 8009f3c:	eb04 0803 	add.w	r8, r4, r3
 8009f40:	f000 f848 	bl	8009fd4 <_sbrk_r>
 8009f44:	4580      	cmp	r8, r0
 8009f46:	d13a      	bne.n	8009fbe <_malloc_r+0xd2>
 8009f48:	6821      	ldr	r1, [r4, #0]
 8009f4a:	3503      	adds	r5, #3
 8009f4c:	1a6d      	subs	r5, r5, r1
 8009f4e:	f025 0503 	bic.w	r5, r5, #3
 8009f52:	3508      	adds	r5, #8
 8009f54:	2d0c      	cmp	r5, #12
 8009f56:	bf38      	it	cc
 8009f58:	250c      	movcc	r5, #12
 8009f5a:	4629      	mov	r1, r5
 8009f5c:	4638      	mov	r0, r7
 8009f5e:	f7ff ffa5 	bl	8009eac <sbrk_aligned>
 8009f62:	3001      	adds	r0, #1
 8009f64:	d02b      	beq.n	8009fbe <_malloc_r+0xd2>
 8009f66:	6823      	ldr	r3, [r4, #0]
 8009f68:	442b      	add	r3, r5
 8009f6a:	6023      	str	r3, [r4, #0]
 8009f6c:	e00e      	b.n	8009f8c <_malloc_r+0xa0>
 8009f6e:	6822      	ldr	r2, [r4, #0]
 8009f70:	1b52      	subs	r2, r2, r5
 8009f72:	d41e      	bmi.n	8009fb2 <_malloc_r+0xc6>
 8009f74:	2a0b      	cmp	r2, #11
 8009f76:	d916      	bls.n	8009fa6 <_malloc_r+0xba>
 8009f78:	1961      	adds	r1, r4, r5
 8009f7a:	42a3      	cmp	r3, r4
 8009f7c:	6025      	str	r5, [r4, #0]
 8009f7e:	bf18      	it	ne
 8009f80:	6059      	strne	r1, [r3, #4]
 8009f82:	6863      	ldr	r3, [r4, #4]
 8009f84:	bf08      	it	eq
 8009f86:	6031      	streq	r1, [r6, #0]
 8009f88:	5162      	str	r2, [r4, r5]
 8009f8a:	604b      	str	r3, [r1, #4]
 8009f8c:	4638      	mov	r0, r7
 8009f8e:	f104 060b 	add.w	r6, r4, #11
 8009f92:	f000 f925 	bl	800a1e0 <__malloc_unlock>
 8009f96:	f026 0607 	bic.w	r6, r6, #7
 8009f9a:	1d23      	adds	r3, r4, #4
 8009f9c:	1af2      	subs	r2, r6, r3
 8009f9e:	d0b6      	beq.n	8009f0e <_malloc_r+0x22>
 8009fa0:	1b9b      	subs	r3, r3, r6
 8009fa2:	50a3      	str	r3, [r4, r2]
 8009fa4:	e7b3      	b.n	8009f0e <_malloc_r+0x22>
 8009fa6:	6862      	ldr	r2, [r4, #4]
 8009fa8:	42a3      	cmp	r3, r4
 8009faa:	bf0c      	ite	eq
 8009fac:	6032      	streq	r2, [r6, #0]
 8009fae:	605a      	strne	r2, [r3, #4]
 8009fb0:	e7ec      	b.n	8009f8c <_malloc_r+0xa0>
 8009fb2:	4623      	mov	r3, r4
 8009fb4:	6864      	ldr	r4, [r4, #4]
 8009fb6:	e7b2      	b.n	8009f1e <_malloc_r+0x32>
 8009fb8:	4634      	mov	r4, r6
 8009fba:	6876      	ldr	r6, [r6, #4]
 8009fbc:	e7b9      	b.n	8009f32 <_malloc_r+0x46>
 8009fbe:	230c      	movs	r3, #12
 8009fc0:	603b      	str	r3, [r7, #0]
 8009fc2:	4638      	mov	r0, r7
 8009fc4:	f000 f90c 	bl	800a1e0 <__malloc_unlock>
 8009fc8:	e7a1      	b.n	8009f0e <_malloc_r+0x22>
 8009fca:	6025      	str	r5, [r4, #0]
 8009fcc:	e7de      	b.n	8009f8c <_malloc_r+0xa0>
 8009fce:	bf00      	nop
 8009fd0:	20002570 	.word	0x20002570

08009fd4 <_sbrk_r>:
 8009fd4:	b538      	push	{r3, r4, r5, lr}
 8009fd6:	4d06      	ldr	r5, [pc, #24]	; (8009ff0 <_sbrk_r+0x1c>)
 8009fd8:	2300      	movs	r3, #0
 8009fda:	4604      	mov	r4, r0
 8009fdc:	4608      	mov	r0, r1
 8009fde:	602b      	str	r3, [r5, #0]
 8009fe0:	f7f8 f9ce 	bl	8002380 <_sbrk>
 8009fe4:	1c43      	adds	r3, r0, #1
 8009fe6:	d102      	bne.n	8009fee <_sbrk_r+0x1a>
 8009fe8:	682b      	ldr	r3, [r5, #0]
 8009fea:	b103      	cbz	r3, 8009fee <_sbrk_r+0x1a>
 8009fec:	6023      	str	r3, [r4, #0]
 8009fee:	bd38      	pop	{r3, r4, r5, pc}
 8009ff0:	20002578 	.word	0x20002578

08009ff4 <_raise_r>:
 8009ff4:	291f      	cmp	r1, #31
 8009ff6:	b538      	push	{r3, r4, r5, lr}
 8009ff8:	4604      	mov	r4, r0
 8009ffa:	460d      	mov	r5, r1
 8009ffc:	d904      	bls.n	800a008 <_raise_r+0x14>
 8009ffe:	2316      	movs	r3, #22
 800a000:	6003      	str	r3, [r0, #0]
 800a002:	f04f 30ff 	mov.w	r0, #4294967295
 800a006:	bd38      	pop	{r3, r4, r5, pc}
 800a008:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a00a:	b112      	cbz	r2, 800a012 <_raise_r+0x1e>
 800a00c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a010:	b94b      	cbnz	r3, 800a026 <_raise_r+0x32>
 800a012:	4620      	mov	r0, r4
 800a014:	f000 f830 	bl	800a078 <_getpid_r>
 800a018:	462a      	mov	r2, r5
 800a01a:	4601      	mov	r1, r0
 800a01c:	4620      	mov	r0, r4
 800a01e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a022:	f000 b817 	b.w	800a054 <_kill_r>
 800a026:	2b01      	cmp	r3, #1
 800a028:	d00a      	beq.n	800a040 <_raise_r+0x4c>
 800a02a:	1c59      	adds	r1, r3, #1
 800a02c:	d103      	bne.n	800a036 <_raise_r+0x42>
 800a02e:	2316      	movs	r3, #22
 800a030:	6003      	str	r3, [r0, #0]
 800a032:	2001      	movs	r0, #1
 800a034:	e7e7      	b.n	800a006 <_raise_r+0x12>
 800a036:	2400      	movs	r4, #0
 800a038:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a03c:	4628      	mov	r0, r5
 800a03e:	4798      	blx	r3
 800a040:	2000      	movs	r0, #0
 800a042:	e7e0      	b.n	800a006 <_raise_r+0x12>

0800a044 <raise>:
 800a044:	4b02      	ldr	r3, [pc, #8]	; (800a050 <raise+0xc>)
 800a046:	4601      	mov	r1, r0
 800a048:	6818      	ldr	r0, [r3, #0]
 800a04a:	f7ff bfd3 	b.w	8009ff4 <_raise_r>
 800a04e:	bf00      	nop
 800a050:	200017cc 	.word	0x200017cc

0800a054 <_kill_r>:
 800a054:	b538      	push	{r3, r4, r5, lr}
 800a056:	4d07      	ldr	r5, [pc, #28]	; (800a074 <_kill_r+0x20>)
 800a058:	2300      	movs	r3, #0
 800a05a:	4604      	mov	r4, r0
 800a05c:	4608      	mov	r0, r1
 800a05e:	4611      	mov	r1, r2
 800a060:	602b      	str	r3, [r5, #0]
 800a062:	f7f8 f921 	bl	80022a8 <_kill>
 800a066:	1c43      	adds	r3, r0, #1
 800a068:	d102      	bne.n	800a070 <_kill_r+0x1c>
 800a06a:	682b      	ldr	r3, [r5, #0]
 800a06c:	b103      	cbz	r3, 800a070 <_kill_r+0x1c>
 800a06e:	6023      	str	r3, [r4, #0]
 800a070:	bd38      	pop	{r3, r4, r5, pc}
 800a072:	bf00      	nop
 800a074:	20002578 	.word	0x20002578

0800a078 <_getpid_r>:
 800a078:	f7f8 b90e 	b.w	8002298 <_getpid>

0800a07c <__sread>:
 800a07c:	b510      	push	{r4, lr}
 800a07e:	460c      	mov	r4, r1
 800a080:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a084:	f000 f8b2 	bl	800a1ec <_read_r>
 800a088:	2800      	cmp	r0, #0
 800a08a:	bfab      	itete	ge
 800a08c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a08e:	89a3      	ldrhlt	r3, [r4, #12]
 800a090:	181b      	addge	r3, r3, r0
 800a092:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a096:	bfac      	ite	ge
 800a098:	6563      	strge	r3, [r4, #84]	; 0x54
 800a09a:	81a3      	strhlt	r3, [r4, #12]
 800a09c:	bd10      	pop	{r4, pc}

0800a09e <__swrite>:
 800a09e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0a2:	461f      	mov	r7, r3
 800a0a4:	898b      	ldrh	r3, [r1, #12]
 800a0a6:	05db      	lsls	r3, r3, #23
 800a0a8:	4605      	mov	r5, r0
 800a0aa:	460c      	mov	r4, r1
 800a0ac:	4616      	mov	r6, r2
 800a0ae:	d505      	bpl.n	800a0bc <__swrite+0x1e>
 800a0b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0b4:	2302      	movs	r3, #2
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	f000 f868 	bl	800a18c <_lseek_r>
 800a0bc:	89a3      	ldrh	r3, [r4, #12]
 800a0be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a0c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a0c6:	81a3      	strh	r3, [r4, #12]
 800a0c8:	4632      	mov	r2, r6
 800a0ca:	463b      	mov	r3, r7
 800a0cc:	4628      	mov	r0, r5
 800a0ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a0d2:	f000 b817 	b.w	800a104 <_write_r>

0800a0d6 <__sseek>:
 800a0d6:	b510      	push	{r4, lr}
 800a0d8:	460c      	mov	r4, r1
 800a0da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0de:	f000 f855 	bl	800a18c <_lseek_r>
 800a0e2:	1c43      	adds	r3, r0, #1
 800a0e4:	89a3      	ldrh	r3, [r4, #12]
 800a0e6:	bf15      	itete	ne
 800a0e8:	6560      	strne	r0, [r4, #84]	; 0x54
 800a0ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a0ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a0f2:	81a3      	strheq	r3, [r4, #12]
 800a0f4:	bf18      	it	ne
 800a0f6:	81a3      	strhne	r3, [r4, #12]
 800a0f8:	bd10      	pop	{r4, pc}

0800a0fa <__sclose>:
 800a0fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0fe:	f000 b813 	b.w	800a128 <_close_r>
	...

0800a104 <_write_r>:
 800a104:	b538      	push	{r3, r4, r5, lr}
 800a106:	4d07      	ldr	r5, [pc, #28]	; (800a124 <_write_r+0x20>)
 800a108:	4604      	mov	r4, r0
 800a10a:	4608      	mov	r0, r1
 800a10c:	4611      	mov	r1, r2
 800a10e:	2200      	movs	r2, #0
 800a110:	602a      	str	r2, [r5, #0]
 800a112:	461a      	mov	r2, r3
 800a114:	f7f6 ff42 	bl	8000f9c <_write>
 800a118:	1c43      	adds	r3, r0, #1
 800a11a:	d102      	bne.n	800a122 <_write_r+0x1e>
 800a11c:	682b      	ldr	r3, [r5, #0]
 800a11e:	b103      	cbz	r3, 800a122 <_write_r+0x1e>
 800a120:	6023      	str	r3, [r4, #0]
 800a122:	bd38      	pop	{r3, r4, r5, pc}
 800a124:	20002578 	.word	0x20002578

0800a128 <_close_r>:
 800a128:	b538      	push	{r3, r4, r5, lr}
 800a12a:	4d06      	ldr	r5, [pc, #24]	; (800a144 <_close_r+0x1c>)
 800a12c:	2300      	movs	r3, #0
 800a12e:	4604      	mov	r4, r0
 800a130:	4608      	mov	r0, r1
 800a132:	602b      	str	r3, [r5, #0]
 800a134:	f7f8 f8ef 	bl	8002316 <_close>
 800a138:	1c43      	adds	r3, r0, #1
 800a13a:	d102      	bne.n	800a142 <_close_r+0x1a>
 800a13c:	682b      	ldr	r3, [r5, #0]
 800a13e:	b103      	cbz	r3, 800a142 <_close_r+0x1a>
 800a140:	6023      	str	r3, [r4, #0]
 800a142:	bd38      	pop	{r3, r4, r5, pc}
 800a144:	20002578 	.word	0x20002578

0800a148 <_fstat_r>:
 800a148:	b538      	push	{r3, r4, r5, lr}
 800a14a:	4d07      	ldr	r5, [pc, #28]	; (800a168 <_fstat_r+0x20>)
 800a14c:	2300      	movs	r3, #0
 800a14e:	4604      	mov	r4, r0
 800a150:	4608      	mov	r0, r1
 800a152:	4611      	mov	r1, r2
 800a154:	602b      	str	r3, [r5, #0]
 800a156:	f7f8 f8ea 	bl	800232e <_fstat>
 800a15a:	1c43      	adds	r3, r0, #1
 800a15c:	d102      	bne.n	800a164 <_fstat_r+0x1c>
 800a15e:	682b      	ldr	r3, [r5, #0]
 800a160:	b103      	cbz	r3, 800a164 <_fstat_r+0x1c>
 800a162:	6023      	str	r3, [r4, #0]
 800a164:	bd38      	pop	{r3, r4, r5, pc}
 800a166:	bf00      	nop
 800a168:	20002578 	.word	0x20002578

0800a16c <_isatty_r>:
 800a16c:	b538      	push	{r3, r4, r5, lr}
 800a16e:	4d06      	ldr	r5, [pc, #24]	; (800a188 <_isatty_r+0x1c>)
 800a170:	2300      	movs	r3, #0
 800a172:	4604      	mov	r4, r0
 800a174:	4608      	mov	r0, r1
 800a176:	602b      	str	r3, [r5, #0]
 800a178:	f7f8 f8e9 	bl	800234e <_isatty>
 800a17c:	1c43      	adds	r3, r0, #1
 800a17e:	d102      	bne.n	800a186 <_isatty_r+0x1a>
 800a180:	682b      	ldr	r3, [r5, #0]
 800a182:	b103      	cbz	r3, 800a186 <_isatty_r+0x1a>
 800a184:	6023      	str	r3, [r4, #0]
 800a186:	bd38      	pop	{r3, r4, r5, pc}
 800a188:	20002578 	.word	0x20002578

0800a18c <_lseek_r>:
 800a18c:	b538      	push	{r3, r4, r5, lr}
 800a18e:	4d07      	ldr	r5, [pc, #28]	; (800a1ac <_lseek_r+0x20>)
 800a190:	4604      	mov	r4, r0
 800a192:	4608      	mov	r0, r1
 800a194:	4611      	mov	r1, r2
 800a196:	2200      	movs	r2, #0
 800a198:	602a      	str	r2, [r5, #0]
 800a19a:	461a      	mov	r2, r3
 800a19c:	f7f8 f8e2 	bl	8002364 <_lseek>
 800a1a0:	1c43      	adds	r3, r0, #1
 800a1a2:	d102      	bne.n	800a1aa <_lseek_r+0x1e>
 800a1a4:	682b      	ldr	r3, [r5, #0]
 800a1a6:	b103      	cbz	r3, 800a1aa <_lseek_r+0x1e>
 800a1a8:	6023      	str	r3, [r4, #0]
 800a1aa:	bd38      	pop	{r3, r4, r5, pc}
 800a1ac:	20002578 	.word	0x20002578

0800a1b0 <__ascii_mbtowc>:
 800a1b0:	b082      	sub	sp, #8
 800a1b2:	b901      	cbnz	r1, 800a1b6 <__ascii_mbtowc+0x6>
 800a1b4:	a901      	add	r1, sp, #4
 800a1b6:	b142      	cbz	r2, 800a1ca <__ascii_mbtowc+0x1a>
 800a1b8:	b14b      	cbz	r3, 800a1ce <__ascii_mbtowc+0x1e>
 800a1ba:	7813      	ldrb	r3, [r2, #0]
 800a1bc:	600b      	str	r3, [r1, #0]
 800a1be:	7812      	ldrb	r2, [r2, #0]
 800a1c0:	1e10      	subs	r0, r2, #0
 800a1c2:	bf18      	it	ne
 800a1c4:	2001      	movne	r0, #1
 800a1c6:	b002      	add	sp, #8
 800a1c8:	4770      	bx	lr
 800a1ca:	4610      	mov	r0, r2
 800a1cc:	e7fb      	b.n	800a1c6 <__ascii_mbtowc+0x16>
 800a1ce:	f06f 0001 	mvn.w	r0, #1
 800a1d2:	e7f8      	b.n	800a1c6 <__ascii_mbtowc+0x16>

0800a1d4 <__malloc_lock>:
 800a1d4:	4801      	ldr	r0, [pc, #4]	; (800a1dc <__malloc_lock+0x8>)
 800a1d6:	f7ff ba06 	b.w	80095e6 <__retarget_lock_acquire_recursive>
 800a1da:	bf00      	nop
 800a1dc:	2000256c 	.word	0x2000256c

0800a1e0 <__malloc_unlock>:
 800a1e0:	4801      	ldr	r0, [pc, #4]	; (800a1e8 <__malloc_unlock+0x8>)
 800a1e2:	f7ff ba01 	b.w	80095e8 <__retarget_lock_release_recursive>
 800a1e6:	bf00      	nop
 800a1e8:	2000256c 	.word	0x2000256c

0800a1ec <_read_r>:
 800a1ec:	b538      	push	{r3, r4, r5, lr}
 800a1ee:	4d07      	ldr	r5, [pc, #28]	; (800a20c <_read_r+0x20>)
 800a1f0:	4604      	mov	r4, r0
 800a1f2:	4608      	mov	r0, r1
 800a1f4:	4611      	mov	r1, r2
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	602a      	str	r2, [r5, #0]
 800a1fa:	461a      	mov	r2, r3
 800a1fc:	f7f8 f86e 	bl	80022dc <_read>
 800a200:	1c43      	adds	r3, r0, #1
 800a202:	d102      	bne.n	800a20a <_read_r+0x1e>
 800a204:	682b      	ldr	r3, [r5, #0]
 800a206:	b103      	cbz	r3, 800a20a <_read_r+0x1e>
 800a208:	6023      	str	r3, [r4, #0]
 800a20a:	bd38      	pop	{r3, r4, r5, pc}
 800a20c:	20002578 	.word	0x20002578

0800a210 <__ascii_wctomb>:
 800a210:	b149      	cbz	r1, 800a226 <__ascii_wctomb+0x16>
 800a212:	2aff      	cmp	r2, #255	; 0xff
 800a214:	bf85      	ittet	hi
 800a216:	238a      	movhi	r3, #138	; 0x8a
 800a218:	6003      	strhi	r3, [r0, #0]
 800a21a:	700a      	strbls	r2, [r1, #0]
 800a21c:	f04f 30ff 	movhi.w	r0, #4294967295
 800a220:	bf98      	it	ls
 800a222:	2001      	movls	r0, #1
 800a224:	4770      	bx	lr
 800a226:	4608      	mov	r0, r1
 800a228:	4770      	bx	lr
 800a22a:	0000      	movs	r0, r0
 800a22c:	0000      	movs	r0, r0
	...

0800a230 <ceil>:
 800a230:	ec51 0b10 	vmov	r0, r1, d0
 800a234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a238:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800a23c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800a240:	2e13      	cmp	r6, #19
 800a242:	ee10 5a10 	vmov	r5, s0
 800a246:	ee10 8a10 	vmov	r8, s0
 800a24a:	460c      	mov	r4, r1
 800a24c:	dc30      	bgt.n	800a2b0 <ceil+0x80>
 800a24e:	2e00      	cmp	r6, #0
 800a250:	da12      	bge.n	800a278 <ceil+0x48>
 800a252:	a335      	add	r3, pc, #212	; (adr r3, 800a328 <ceil+0xf8>)
 800a254:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a258:	f7f6 f820 	bl	800029c <__adddf3>
 800a25c:	2200      	movs	r2, #0
 800a25e:	2300      	movs	r3, #0
 800a260:	f7f6 fc62 	bl	8000b28 <__aeabi_dcmpgt>
 800a264:	b128      	cbz	r0, 800a272 <ceil+0x42>
 800a266:	2c00      	cmp	r4, #0
 800a268:	db55      	blt.n	800a316 <ceil+0xe6>
 800a26a:	432c      	orrs	r4, r5
 800a26c:	d057      	beq.n	800a31e <ceil+0xee>
 800a26e:	4c30      	ldr	r4, [pc, #192]	; (800a330 <ceil+0x100>)
 800a270:	2500      	movs	r5, #0
 800a272:	4621      	mov	r1, r4
 800a274:	4628      	mov	r0, r5
 800a276:	e025      	b.n	800a2c4 <ceil+0x94>
 800a278:	4f2e      	ldr	r7, [pc, #184]	; (800a334 <ceil+0x104>)
 800a27a:	4137      	asrs	r7, r6
 800a27c:	ea01 0307 	and.w	r3, r1, r7
 800a280:	4303      	orrs	r3, r0
 800a282:	d01f      	beq.n	800a2c4 <ceil+0x94>
 800a284:	a328      	add	r3, pc, #160	; (adr r3, 800a328 <ceil+0xf8>)
 800a286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a28a:	f7f6 f807 	bl	800029c <__adddf3>
 800a28e:	2200      	movs	r2, #0
 800a290:	2300      	movs	r3, #0
 800a292:	f7f6 fc49 	bl	8000b28 <__aeabi_dcmpgt>
 800a296:	2800      	cmp	r0, #0
 800a298:	d0eb      	beq.n	800a272 <ceil+0x42>
 800a29a:	2c00      	cmp	r4, #0
 800a29c:	bfc2      	ittt	gt
 800a29e:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 800a2a2:	fa43 f606 	asrgt.w	r6, r3, r6
 800a2a6:	19a4      	addgt	r4, r4, r6
 800a2a8:	ea24 0407 	bic.w	r4, r4, r7
 800a2ac:	2500      	movs	r5, #0
 800a2ae:	e7e0      	b.n	800a272 <ceil+0x42>
 800a2b0:	2e33      	cmp	r6, #51	; 0x33
 800a2b2:	dd0b      	ble.n	800a2cc <ceil+0x9c>
 800a2b4:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800a2b8:	d104      	bne.n	800a2c4 <ceil+0x94>
 800a2ba:	ee10 2a10 	vmov	r2, s0
 800a2be:	460b      	mov	r3, r1
 800a2c0:	f7f5 ffec 	bl	800029c <__adddf3>
 800a2c4:	ec41 0b10 	vmov	d0, r0, r1
 800a2c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2cc:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800a2d0:	f04f 33ff 	mov.w	r3, #4294967295
 800a2d4:	fa23 f707 	lsr.w	r7, r3, r7
 800a2d8:	4207      	tst	r7, r0
 800a2da:	d0f3      	beq.n	800a2c4 <ceil+0x94>
 800a2dc:	a312      	add	r3, pc, #72	; (adr r3, 800a328 <ceil+0xf8>)
 800a2de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2e2:	f7f5 ffdb 	bl	800029c <__adddf3>
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	f7f6 fc1d 	bl	8000b28 <__aeabi_dcmpgt>
 800a2ee:	2800      	cmp	r0, #0
 800a2f0:	d0bf      	beq.n	800a272 <ceil+0x42>
 800a2f2:	2c00      	cmp	r4, #0
 800a2f4:	dd02      	ble.n	800a2fc <ceil+0xcc>
 800a2f6:	2e14      	cmp	r6, #20
 800a2f8:	d103      	bne.n	800a302 <ceil+0xd2>
 800a2fa:	3401      	adds	r4, #1
 800a2fc:	ea25 0507 	bic.w	r5, r5, r7
 800a300:	e7b7      	b.n	800a272 <ceil+0x42>
 800a302:	2301      	movs	r3, #1
 800a304:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800a308:	fa03 f606 	lsl.w	r6, r3, r6
 800a30c:	4435      	add	r5, r6
 800a30e:	4545      	cmp	r5, r8
 800a310:	bf38      	it	cc
 800a312:	18e4      	addcc	r4, r4, r3
 800a314:	e7f2      	b.n	800a2fc <ceil+0xcc>
 800a316:	2500      	movs	r5, #0
 800a318:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800a31c:	e7a9      	b.n	800a272 <ceil+0x42>
 800a31e:	4625      	mov	r5, r4
 800a320:	e7a7      	b.n	800a272 <ceil+0x42>
 800a322:	bf00      	nop
 800a324:	f3af 8000 	nop.w
 800a328:	8800759c 	.word	0x8800759c
 800a32c:	7e37e43c 	.word	0x7e37e43c
 800a330:	3ff00000 	.word	0x3ff00000
 800a334:	000fffff 	.word	0x000fffff

0800a338 <_init>:
 800a338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a33a:	bf00      	nop
 800a33c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a33e:	bc08      	pop	{r3}
 800a340:	469e      	mov	lr, r3
 800a342:	4770      	bx	lr

0800a344 <_fini>:
 800a344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a346:	bf00      	nop
 800a348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a34a:	bc08      	pop	{r3}
 800a34c:	469e      	mov	lr, r3
 800a34e:	4770      	bx	lr
